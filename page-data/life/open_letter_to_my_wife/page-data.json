{"componentChunkName":"component---src-templates-blogs-blog-post-jsx","path":"/life/open_letter_to_my_wife","result":{"data":{"markdownRemark":{"html":"<p>When I first met you, I didn't know how to talk to you, hell, I did not have any pick-up lines(I always found them dumb, I honestly still do). To me, you were a stranger, but I wanted to know you, get the chance to explore your thoughts, hates, likes, dislikes. Get to know who you truly were. I have to be honest, I did not know how to talk to girls, I tried so many tactics and I had always failed. It was almost as if I was studying for an exam. You never know what is coming in the test, but you know you want to pass it. Anyway, I digress. I first saw you and thought, wow, I want to actually just get to know you, just talk for hours and not feel any pressure for some grand gesture to win you over. Like those Hollywood movies. I hate them, honestly. They come with so many expectations on love, always as if love can be summed up in 2 hours of screen play.</p>\n<p>I always ran out of things to say, probably because I wanted to impress you and just said things over and over differently. You laughed and smiled slightly. You probably knew what was going on in my head, but, the calm face you kept was something else. It made me feel confident, not enough to go fight of bears for you, but enough to do silly things without a care in the world.</p>\n<p>Do I sometimes wonder whether life would have paired us differently? All the time. Every day, I ask myself(the universe, maybe), what is it that happened to make us meet? Star alignment? Cosmic disruption? Celestial bodies colliding? I did not know. What I did know, was that I was willing to give this a shot. Maybe I would fail horribly. You probably told your girlfriends about me and they just nodded their heads in response and asked you \"why him again?\". At least, that is how I hope it went.</p>\n<p>You remember the time we went for a picnic? I recall it like it was yesterday. I was nervous, sweaty and panicking on the inside. I did not know how to even act. But, somehow, all this was on the inside, including the sweating, thank God. That would have been embarassing. We laughed, smiled, made fun of each other and got lost in each other. I loved that day. It was away from all the noise of the city. All the struggles and doubt. I was happy. Probably, happier than I usually am.</p>\n<p>I was not only happy because I got a chance to spend the day with this wonderful human being that decided to block out her day just for me, but also happy that despite my numerous flaws, you picked me out of a bunch of guys, and I know there were a bunch of guys, I mean who would not have wanted to get a chance to be with you? I was not the smartest in a room, there are times I asked(still ask) the dumbest questions. I tend to be a bit slow to react to some things happening around me. Maybe, because I overthink the situation and start drawing parallel posibilities. You would not want to be in my head actually. And that is not something that I would ever boast about. I even almost lost you because I was in too deep in my head instead of being in the present. Honestly, that is my biggest flaw and for a long time, I have been working on that. Thank you for being so patient with me. You always have been. But, there was a time you were not always as patient and I get that. You were so mad at me. And for some reason that made me realize that I wanted to fight for you even more. It was at that moment that I realized I want to only be with you and only you.</p>\n<p>I guess what I am saying here is that no matter what happens, I hope you know how deeply I care. How much love I have for you. I would fight for you even when I stood no chance of winning, the thought of losing you would be more devastating than actually losing the fight. As I said, I am no poet, so probably around here, would be a simile or metaphor to something that would communicate better what I feel on the inside. Regardless, I will be here for you, on your side till time ends.</p>","frontmatter":{"title":"An open letter to my wife","subtitle":"Dear beloved,","date":"May, 06, 2019","author":{"name":"Brian Lusina","link":null,"avatar":"brian_lusina.jpg"},"image":{"feature":null,"thumbnail":null,"teaser":null,"credit":null,"creditlink":null},"path":"/life/open_letter_to_my_wife","tags":["Live","Love","Life"],"excerpt":"Ah, my beloved, that is how I would start my letter if I were in the 60s, but modern society has us all thinking differently. I probably would not have written a letter(I am no poet). This would have come in the form of a text message probably. But, let us be a little old school."}}},"pageContext":{"prev":{"html":"<p>Chaos is often depicted as negative and literally means \"complete disorder and confusion\". What if we can use this complete lack of organization in our production environment to bring stability and confidence in our systems and completely change the meaning of chaos? Let us explore the possible ways in which we can get harmony from chaos engineering.</p>\n<p>So, if chaos is a lack of organization, complete disfunction and confusion &#x26; engineering is about precision &#x26; using scientific principles to design and build machines, structures, tools and other items. How do these 2 principles exactly come together to bring harmony through chaos engineering?</p>\n<p>First of all, let's start with a bit of a history lesson. Chaos engineering was initially thought of by Greg Orzell in 2011 while Netflix was moving to the cloud. His intent was to move from a development model that assumed zero downtimes and breakdowns to  a model where such breakdowns were inevitable. This stemmed from the fact that during development we often assume the best case scenerios where no breakdowns happen or we control how they happen and can immediately fix these issues. However, that is not the case in the real world as we all know breakdowns could happen at any time. His intention was to drive engineers to consider resilience as an obligation rather than an option.</p>\n<p>In order to achieve this, Neflix came up with a tool known as  <em>Chaos Monkey</em> whose purpose was to randomly choose servers in a production environment and turn them off during business hours. Of course this is a very unpopular opinion and not many would attempt to do this in their production environment that actively serves customers.</p>\n<blockquote>\n<p>\"Imagine a monkey entering a \"data center\", these \"farms\" of servers that host all the critical functions of our online activities. The monkey randomly rips cables, destroys devices and returns everything that passes by the hand [i.e. flings excrement]. The challenge for IT managers is to design the information system they are responsible for so that it can work despite these monkeys, which no one ever knows when they arrive and what they will destroy.\"</p>\n</blockquote>\n<p>In practice this is how chaos engineering can be achieved:</p>\n<p><img src=\"/images/posts/chaos-engineering-flow.png\" alt=\"chaos-engineering-flow\"></p>\n<p>The harder it is to disrupt the steady state, the more confident we are the system can withstand random breakdowns. If a weakness is uncovered, we now have a target for improvement before that behavior manifests in the system at large.</p>\n<h2>Build  a hypothesis around steady state behaviour</h2>\n<p> Focus on the measurable output of a system instead of the internal attributes. By focusing on systemic behavior patterns during experiments, Chaos verifies that the system does work, rather than trying to validate how it works.</p>\n<h2>Vary Real world events</h2>\n<p>Chaos variables reflect real-world events. Prioritize events either by potential impact or estimated frequency. Consider events that correspond to hardware failures like servers dying, software failures like malformed responses, and non-failure events like a spike in traffic or a scaling event. Any event capable of disrupting steady state is a potential variable in a Chaos experiment.</p>\n<h2>Run experiments in production</h2>\n<p>Systems behave differently depending on environment and traffic patterns. Since the behavior of utilization can change at any time, sampling real traffic is the only way to reliably capture the request path. To guarantee both authenticity of the way in which the system is exercised and relevance to the current deployed system, Chaos strongly prefers to experiment directly on production traffic.</p>\n<h2>Automate Experiments to run continuously</h2>\n<p>Running experiments manually is labor-intensive and ultimately unsustainable. Automate experiments and run them continuously. Chaos Engineering builds automation into the system to drive both orchestration and analysis.</p>\n<h2>Minimize the blast radius</h2>\n<p>Experimenting in production has the potential to cause unnecessary customer pain. While there must be an allowance for some short-term negative impact, it is the responsibility and obligation of the Chaos Engineer to ensure the fallout from experiments are minimized and contained.</p>\n<h3>Limitations</h3>\n<p>Despite the buzz and the hype around chaos engineering, there are some drawbacks to it:</p>\n<ol>\n<li>\n<p><strong>Means to an end</strong>.</p>\n<p>It's important to note that it is a <em>means to an end and not an end in itself</em> . What matters most is the production service that is provided at the end. Whatever findings that you discover from perform chaos engineering from your system, must be fed back to the system - in terms of fixing bugs, training people - otherwise it will count as a waste of time.</p>\n</li>\n<li>\n<p><strong>One step forward two steps back</strong></p>\n<p>Whoâ€™s to say that being able to uncover weaknesses will automatically lead to positive outcomes, like improved customer experience? As software developers know, identifying a bug and fixing it are two different challenges. Indeed, your optimization efforts in one area might increase brittleness in other areas.</p>\n</li>\n<li>\n<p><strong>One among many</strong></p>\n<p>  Chaos Engineering is not a remedy for all of your reliability concerns, and it never will be. Itâ€™s merely one of many approaches used to gain confidence in system correctness (typically in the face of perturbation). Consider it required but not sufficient. And by no means is it â€“ or should it be â€“ the only way to learn from failure.</p>\n</li>\n<li>\n<p><strong>Systems will continue to fail</strong></p>\n<p>  It may sound overly pessimistic, but while Chaos Engineering surely is a net plus, impermanence makes sure that all complex systems will fail no matter how hard we try to avoid it (which is exactly why postmortems are so important). The Holy Grail of Automation â€“ introducing faults automatically instead of manually â€“ wonâ€™t change that fact a bit. Donâ€™t fool yourself and set realistic expectations.</p>\n</li>\n<li>\n<p><strong>No Rollback button</strong></p>\n<p>  The rollback button is a lie. Thatâ€™s not only true for application deployments but also for fault injection, as both face the same fundamental problem: state. Yes, you might be able to revert the direct impact of non-destructive faults, which can be as simple as stopping to generate CPU/memory/disk load or deleting traffic rules created to simulate network conditions. But no, you canâ€™t roll back what has been inflicted on everything else in the system â€“ the targeted application and everything that interacts with it. A prime example is corrupt or incorrect data stored in a database/queue/cache due to a program crash.</p>\n</li>\n</ol>\n<h2>Conclusion</h2>\n<p>This is but a brief introduction about chaos engineering, to just showcase that this is a new paradigm and shift into how products are now built at scale and to ensure that the end user always has the best esperience despite the system experiencing heavy storms. I would recommend using chaos engineering as an everyday tool to ensure that whatever you build will always work at scale and work consistently. Of course this is not everyone's cup of tea and that is acceptable. At certain levels of scale, this just becomes a pain to setup and get to work properly. Remember, the ultimate goal is to bring the best experience to the customer and measuer the overal output of your product and not how it works internally.</p>\n<p>With that I shall leave you with a quote.</p>\n<blockquote>\n<p>But behind all the beauty lies madness and chaos.</p>\n</blockquote>","id":"54fb72cb-10cf-5707-81b0-377f619c67a2","timeToRead":5,"frontmatter":{"title":"Harmony in Chaos Engineering","subtitle":"Making chaos work for you at scale","excerpt":"Chaos is often depicted as negative and literally means \"complete disorder and confusion\". What if we can use this complete lack of organization in our production environment to bring stability and confidence in our systems and completely change the meaning of chaos? Let us explore the possible ways in which we can get harmony from chaos engineering.","path":"/tech/chaos-engineering","category":"tech","date":"October 13, 2019","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"chaos-engineering.jpeg","thumbnail":"chaos-engineering.jpeg","teaser":"chaos-engineering.jpeg","credit":null,"creditlink":null},"tags":["Engineering","Chaos","Testing"],"published":true}},"next":{"html":"<p>What is immutabilty? I see this word being thrown around a lot, especially in the software industry, where other phrases such as <strong>clean code</strong> and <strong>code quality</strong> are constantly being emphasized. What is it? Why is it necessary to understand what it is and how to use it?</p>\n<p>In this post, I shall write briefly about what it is and how to use it. This will not use any JS framework, but will be pure JavaScript. This is because this is applicable in any JavaScript context(read framework). Frameworks and libraries come with their own rules of immutability. How do they creat these rules arround immutability?</p>\n<blockquote>\n<p>Immutability means <em>not capable or susceptible to change</em></p>\n</blockquote>\n<p>In other words, not capable of change. In object oriented programming and functional programming, this means that an immutable object is an <em>object whose state cannot be modified after it is created</em>. Objects in general have state and behaviour. When an object is immutable, the state and behaviour can not change.</p>\n<p>This has several benefits. First of all ensures this ensures that there are no intended side-effects and we know exactly what an object's state and behaviour is at any given time within the application's lifecycle. It makes us more confident when writing our code, as we know exactly what to expect from an immutable object.</p>\n<p>Of course, this also means that it's state can not be modified and can also be an issue in the case where we do need to alter it's current state. This is why we create a copy of the object and alter the state of the copy instead of the original object(A pattern that is used in <a href=\"http://redux.js.org\">Redux</a>).</p>\n<p>Before delving into that, let us see how to create object immutability in plain ol' JavaScript:</p>\n<pre><code class=\"language-javascript\">let johnDoe = {\n    firstName: \"John\",\n    lastName: \"Doe\",\n    email: \"johndoe@email.com\",\n    age: 50\n}\n\nconst frozenJohnDoe = Object.freeze(johnDoe);\n\nfrozenJohnDoe.age = 33;\n// Throws an error in strict mode\n\nfrozenJohnDoe.age;\n// expected output: 50\n</code></pre>\n<blockquote>\n<p>An example of immutabililty in JavaScript</p>\n</blockquote>\n<p>Above, we have a <code>johnDoe</code> object with some properties (<code>firstName</code>, <code>lastName</code>, <code>email</code> and <code>age</code>). These properties at time of create are mutable(can be changed). To make this object immutable, we use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\">Object.freeze</a>. A very handy function that <em>freezes</em> the object. Therefore, we can not alter any of its properties on the following lines.</p>\n<p>This means nothing can be added or removed from the frozen object. Our <code>johnDoe</code> object is now frozen and can never be able to alter his age, sorry John :(. This gives us a sense of what to always expect when we use the frozen object. We can always be guaranteed that his age will be 50 when we use it.</p>\n<p>It is important to note that when not running in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\">strict mode</a>, it will appear as if mutation of the object's properties can be done. Here is an example:</p>\n<pre><code class=\"language-javascript\">// still using our johnDoe object above\n> johnDoe.age = 5\n5\n> johnDoe\n{ firstName: 'John',\n  lastName: 'Doe',\n  email: 'johndoe@email.com',\n  age: 50 }\n</code></pre>\n<blockquote>\n<p>While running in a Node REPL</p>\n</blockquote>\n<p>While trying to set the age of the object to 5, no error is thrown and thus it will appear as if a successful mutation actually occured, but in reality, the properties remain the same, age has not been altered.</p>\n<p>Data properties of frozen objects can not be changed, configurable attributes are set to false. This is what sets the immutability of the object. There is a problem though. What if my object's properties' values were other objects? Are those immutable to? An example:</p>\n<pre><code class=\"language-javascript\">> let shoppingCart = {\n    fruits: {\n        banana: \"banana\",\n        apple: \"apple\",\n        oranges: \"oranges\"\n    },\n    bread: {\n        brown: \"brown bread\",\n        white: \"white bread\"\n    }\n    price: 50\n}\n// freeze our object, we do not need to save a copy of it. As the function returns our initial object and NOT a fronzen copy\n> Object.freeze(shoppingCart)\n\n// fruits remains as is\n> shoppingCart.fruits\n{\n    banana: \"banana\",\n    apple: \"apple\",\n    oranges: \"oranges\"\n}\n// attempt to mutate the fruits object's properties\n> shoppingCart.fruits.banana = \"very ripe banana\"\n'very ripe banana'\n\n> shoppingCart.fruits\n{\n    banana: \"very ripe banana\",\n    apple: \"apple\",\n    oranges: \"oranges\"\n}\n</code></pre>\n<blockquote>\n<p>Again, running in a Node REPL</p>\n</blockquote>\n<p>As, you can see from above, the <code>fruits</code> object's values can be mutated, yet it is in a frozen object <code>shoppingCart</code>. This is known as <strong>shallow freeze</strong>. This means that the immediate properties of <code>shoppingCart</code> have been made immutable, however, if the values of said properties are objects, they are not frozen.</p>\n<p>For the fruits object to also have the same level of immutability, they have to also be frozen:</p>\n<pre><code class=\"language-javascript\">> let fruits = {\n    banana: \"banana\",\n    apple: \"apple\",\n    oranges: \"oranges\"\n};\n> Object.freeze(fruits);\n\n> let bread = {\n    brown: \"brown bread\",\n    white: \"white bread\"\n}\n> Object.freeze(bread);\n\n> let shoppingCart = {\n    fruits,\n    bread,\n    price: 50\n};\n\n// freeze our object, we do not need to save a copy of it\n> Object.freeze(shoppingCart)\n\n// fruits remains as is\n> shoppingCart.fruits\n{\n    banana: \"banana\",\n    apple: \"apple\",\n    oranges: \"oranges\"\n}\n// attempt to mutate the fruits object's properties\n> shoppingCart.fruits.banana = \"very ripe banana\"\n'very ripe banana'\n\n> shoppingCart.fruits\n{\n    banana: \"banana\",\n    apple: \"apple\",\n    oranges: \"oranges\"\n}\n</code></pre>\n<blockquote>\n<p>Now we have immutability for our fruits :)</p>\n</blockquote>\n<p>Of course, this can be a pain when dealing with objects that have properties that have other objects and those objects have properties that have other objects and so forth. Creating a recursive function that freezes all properties of the object that are objects themselves will save us the time and ensure that we attain <strong>deep freeze</strong> on our object.</p>\n<p>We have to ensure that the recurstion does not end up in a cycle though.</p>\n<pre><code class=\"language-javascript\">const deepFreeze = object => {\n    // get the property names\n    let propNames = Object.getOwnPropertyNames(object);\n\n    // freeze properties before freezing self\n    for(let name of propNames){\n        let value = object[name]\n\n        object[name] = value &#x26;&#x26; typeof value === \"object\" ?\n            deepFreeze(value) : value\n    }\n\n    // freeze self\n    return Object.freeze(object);\n}\n</code></pre>\n<blockquote>\n<p>This function will recursively freeze all properties of an object that are objects.</p>\n</blockquote>\n<p>We can now use this function as below:</p>\n<pre><code class=\"language-javascript\">var collection = {\n    internal: {\n        a: null\n    }\n};\n\ndeepFreeze(collection);\n\n// fails silently in non-strict mode\ncollection.internal.a = 'anotherValue';\ncollection.internal.a; // null\n</code></pre>\n<p>You can check whether out objects are frozen with <code>Object.isFrozen</code>, this takes in an object and checks whether the configurable properties have been set to false and returns a boolean value (true, if the object is frozen, false otherwise).</p>\n<p><strong>Object.freeze</strong> also works on arrays:</p>\n<pre><code class=\"language-javascript\">let a = [0];\nObject.freeze(a); // The array cannot be modified now.\n\na[0]=1; // fails silently\na.push(2); // fails silently\n\n// In strict mode such attempts will throw TypeErrors\nfunction fail() {\n  \"use strict\"\n  a[0] = 1;\n  a.push(2);\n}\n\nfail();\n</code></pre>\n<h2>The End</h2>\n<p>Next time you are writing a Javascript module and you are exposing objects that other developers may use, make sure that they have the exact needed permissions to alter your objects, otherwise they may broke your code without even realising it. Make sure also to document it.</p>","id":"c79dec82-4b96-559d-b42d-544659815fe0","timeToRead":5,"frontmatter":{"title":"Object Immutability In JavaScript","subtitle":"Creating object immutability in JavaScript","excerpt":"Creating object immutability in JavaScript has its advantages when it comes to programming, it ensures that objects retain their properties and has no unexpected side-effects. How to we create this immutability in JavaScript?","path":"/tech/object-immutability-js","category":"tech","date":"September 18, 2018","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"object-freeze.png","thumbnail":"object-freeze.png","teaser":"object-freeze.png","credit":null,"creditlink":null},"tags":["JavaScript","Objects"],"published":true}}}}}