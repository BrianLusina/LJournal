{"componentChunkName":"component---src-templates-blogs-blog-post-jsx","path":"/design/usability-and-code","result":{"data":{"markdownRemark":{"html":"<p>A lot of people associate designing stellar applications with skill alone. That it just takes one brilliant out of the blue idea to create something that everyone will suddenly realize they need. Sometimes this happens, but more often than not it does not. A lot of applications are built to fill a gap that people have craved to be filled. To find this gap you need to first know that it is there, you need to identify if people acknowledge it is a gap as well and also you need to be able to determine if said people need a complex technology to fill this gap or do they simply need a pen and paper. Not all problems need technology to get solved.</p>\n<p>Now, say that you find a problem that can be solved with technology. Say, your particular software can help provide a particular solution to the problem. This is always good to identify, that it helps to solve the problem. The question breaks down to is it something the users can use with ease and can they learn easily to use it or do they need the whole documentation you used to build it?</p>\n<p>This brings me to <strong>usability</strong>. A term that is so rarely used, but a term I think is necessary and important in the world of designing technology.</p>\n<h2>Usability</h2>\n<p>Usability is a quality attribute that assesses how easy user interfaces are to use. The word <em>usability</em> also refers to methods for improving ease-of-use during the design process.</p>\n<p>The 5 components associated with usability:</p>\n<ul>\n<li><strong>Learnability</strong> Is it easy for users to accomplish basic tasks the first time they encounter the design?</li>\n<li><strong>Efficiency</strong> Once users have learned the design, how quickly can they perform tasks?</li>\n<li><strong>Memorability</strong> When users return to the design after a period of not using it, how easily can they reestablish proficiency?</li>\n<li><strong>Errors</strong> How many errors do users make, how severe are these errors, and how easily can they recover from the errors?</li>\n<li><strong>Satisfaction</strong> How pleasant is it to use the design?</li>\n</ul>\n<p>Another key attribute is <strong>utility</strong>, which refers to the design's functionality: <em>Does it do what users need?</em></p>\n<p>Usability and utility are equally important and together determine whether something is useful: It matters little that something is easy if it's not what you want. It's also no good if the system can hypothetically do what you want, but you can't make it happen because the user interface is too difficult. To study a design's utility, you can use the same user research methods that improve usability.</p>\n<p>So, utility is simply whether it provides the features you need. Usability is how easy &#x26; pleasant these features are to use. Combining the two leads to a product being <em>useful</em>.</p>\n<h2>Importance of Usability</h2>\n<p>The first law of e-commerce is that if users cannot find the product, they cannot buy it either. This means that if a user can not clearly understand your site and get all the information they need from the get go, they <strong>leave</strong>.</p>\n<blockquote>\n<p>On the Web, usability is a necessary condition. If a website is difficult to use, people exit. If the homepage fails to clearly state what a company offers and what users can do on the site, people leave. If users get lost on a website, they leave. If a website's information is hard to read or doesn't answer users' key questions, they leave. Note a pattern here? There's no such thing as a user reading a website manual or otherwise spending much time trying to figure out an interface. There are plenty of other websites available; leaving is the first line of defense when users encounter a difficulty.</p>\n</blockquote>\n<h2>Improving usability</h2>\n<p>The most basic and useful way to improve usability is <strong>user testing</strong>, which has 3 components:</p>\n<ul>\n<li><strong>Get hold of some representative users</strong>, such as customers for an e-commerce site.</li>\n<li>Ask the users to <strong>perform representative</strong> tasks with the design.</li>\n<li><strong>Observe what the users do</strong>, where they succeed, and where they have difficulties with the user interface. Shut up and let the users do the talking.</li>\n</ul>\n<p>It's important to test users individually and let them solve any problems on their own. If you help them or direct their attention to any particular part of the screen, you have contaminated the test results.\nTo identify a design's most important usability problems, testing 5 users is typically enough. Rather than run a big, expensive study, it's a better use of resources to run many small tests and revise the design between each one so you can fix the usability flaws as you identify them. Iterative design is the best way to increase the quality of user experience. The more versions and interface ideas you test with users, the better.</p>\n<p>User testing is different from focus groups, which are a poor way of evaluating design usability. Focus groups have a place in market research, but to evaluate interaction designs you must closely observe individual users as they perform tasks with the user interface. Listening to what people say is misleading: you have to watch what they actually do.</p>\n<h2>When to Work on Usability</h2>\n<p>Usability plays a role in each stage of the design process. The resulting need for multiple studies is the reason individual studies should be fast and cheap. Here are the main steps:</p>\n<ul>\n<li>Before starting the new design, <strong>test the old design</strong> to identify the good parts that you should keep or emphasize, and the bad parts that give users trouble.</li>\n<li><strong>Test your competitors' designs</strong> to get cheap data on a range of alternative interfaces that have similar features to your own.</li>\n<li><strong>Conduct a field study</strong> to see how users behave in their natural habitat.</li>\n<li>Make <strong>paper prototypes</strong> of one or more new design ideas and test them. The less time you invest in these design ideas the better, because you'll need to change them all based on the test results.</li>\n<li><strong>Refine the design ideas</strong> that test best through multiple iterations, gradually moving from low-fidelity prototyping to high-fidelity representations that run on the computer. Test each iteration.</li>\n<li><strong>Inspect the design relative to established usability guidelines</strong> whether from your own earlier studies or published research.\nOnce you decide on and implement the final design, test it again. Subtle usability problems always creep in during implementation.</li>\n<li><strong>Don't defer user testing until you have a fully implemented design</strong>. If you do, it will be impossible to fix the vast majority of the critical usability problems that the test uncovers. Many of these problems are likely to be structural, and fixing them would require major rearchitecting.</li>\n</ul>\n<p>The only way to a high-quality user experience is to start user testing early in the design process and to keep testing every step of the way.</p>\n<h2>Testing, 1, 2, 3</h2>\n<p>If you run at least one user study per week, it's worth building a dedicated usability laboratory. For most companies, however, it's fine to conduct tests in a conference room or an office â€” as long as you can close the door to keep out distractions. What matters is that you get hold of real users and sit with them while they use the design. A notepad is the only equipment you need.</p>\n<h2>Conclusion</h2>\n<p>Usability is just as important as the design and it goes a long way in creating software that not only solves a particular problem but also allows the user to enjoy using it the software at the same time.</p>","frontmatter":{"title":"Usability, Design and Code","subtitle":"Usability 101, a brief introduction into design","date":"August, 01, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"usability-design.png","thumbnail":"usability-design.png","teaser":"usability-design.png","credit":null,"creditlink":null},"path":"/design/usability-and-code","tags":["Usability","User Experience","UX","Design"],"excerpt":"Usability 101, a brief introduction into design"}}},"pageContext":{"prev":{"html":"<p>Big O notation is used in Computer Science to describe the performance or complexity of an algorithm. Big O specifically describes the worst-case scenario, and can be used to describe the execution time required or the space used (e.g. in memory or on disk) by an algorithm.</p>\n<p>A function's Big-O notation is determined by how it responds to different inputs. How much slower is it if we give it a list of 1000 things to work on instead of a list of 1 thing?</p>\n<p>Consider this code:</p>\n<pre><code class=\"language-python\">def item_in_list(to_check, the_list):\n    for item in the_list:\n        if to_check == item:\n          return True\n    return False\n</code></pre>\n<p>If we call this function like <code>item_in_list(2, [1,2,3])</code>, it should be quick. We loop over each thing in the list and if we find the first argument to our function, return True. If we get to the end and we didn't find it, return False.</p>\n<p>The <em>\"complexity\"</em> of this function is <strong>O(n)</strong>. O(n) is read <em>\"Order of N\"</em> because the O function is also known as the Order function. which deals in <em>orders of magnitude</em>.</p>\n<p>\"Orders of magnitude\" is basically tells the difference between classes of numbers. The difference between 1,000 and 10,000 is pretty big (in fact, its the difference between a junker car and a lightly used one). It turns out that in approximation, as long as you're within an order of magnitude, you're pretty close.</p>\n<p>If we were to graph the time it takes to run this function above with different sized inputs (e.g. an array of 1 item, 2 items, 3 items, etc), we'd see that it approximately corresponds to the number of items in the array. This is called a <code>linear graph</code>. This means that the line is basically straight if you were to graph it.</p>\n<p>If, in the code sample above, our item was always the first item in the list, our code would be really fast! This is true, but Big-O is all about the <strong>approximate worst-case performance of doing something</strong>. The worst case for the code above is that the thing we're searching for isn't in the list at all. (Note: The math term for this is \"upper bound\", which means its talking about the mathematic limit of awfulness).</p>\n<p><img src=\"https://justin.abrah.ms/static/images/o_n__plot.png\" alt=\"image\" title=\"Run Time Characteristics of an O(n) function\"></p>\n<blockquote>\n<p>Run Time characteristics of an O(n) function</p>\n</blockquote>\n<p>Consider this next code snippet:</p>\n<pre><code class=\"language-python\">def is_none(item):\n    return item is None\n</code></pre>\n<p>This function is called <code>O(1)</code> which is called <strong>\"constant time\"</strong>. What this means is no matter how big our input is, it always takes the same amount of time to compute things.</p>\n<p><img src=\"https://justin.abrah.ms/static/images/o_1__plot.png\" alt=\"o1_charactersitics\" title=\"Run time characteristics of O(1) function\"></p>\n<blockquote>\n<p>Run time charactersitics of O(1) function</p>\n</blockquote>\n<p>Consider this next example.</p>\n<pre><code class=\"language-python\">def combinations(the_list):\n   results = []\n   for item in the_list:\n       for inner_item in the_list:\n           results.append((item, inner_item))\n   return results\n</code></pre>\n<p>This matches every item in the list with every other item in the list. If we gave it an array <code>[1,2,3]</code>, we'd get back <code>[(1,1) (1,2), (1,3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)]</code>. This is part of the field of <strong>combinatorics</strong>, which is the mathematical field which studies combinations of things. This function is considered <strong>O(n^2)</strong>. This is because for every item in the list we have to do n more operations. So n * n == n^2.</p>\n<p>Below is a comparison of each of these graphs, for reference. You can see that an O(n^2) function will get slow very quickly where as something that operates in constant time will be much better. This is particularly useful when it comes to data structures.</p>\n<p><img src=\"https://justin.abrah.ms/static/images/runtime_comparison.png\" alt=\"comparison\"></p>\n<blockquote>\n<p>Comparison of O(n), O(1) and O(n^2) functions</p>\n</blockquote>\n<p>Another Big O notation term is <strong>O(2^N)</strong> denotes an algorithm whose growth doubles with each additon to the input data set. The growth curve of an O(2^N) function is exponential - starting off very shallow, then rising meteorically. An example of an O(2^N) function is the recursive calculation of Fibonacci numbers:</p>\n<p>An example:</p>\n<pre><code class=\"language-python\">def fibonacci(number):\n    if number &#x3C;=1 :\n        return number\n    return fibonacci(number - 2) + fibonacci(number - 1);\n}\n</code></pre>","id":"7c19ef19-bd32-5ef7-822b-bddde609db81","timeToRead":3,"frontmatter":{"title":"Big-O-Notation","subtitle":"The Big Deal with the Big-O Notation and algorithms","excerpt":"Big O notation is used in Computer Science to describe the performance or complexity of an algorithm. Big O specifically describes the worst-case scenario, and can be used to describe the execution time required or the space used (e.g. in memory or on disk) by an algorithm.","path":"/tech/big-o-notation","category":"tech","date":"August 02, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"big-o-notation-post.png","thumbnail":"big-o-notation-post.png","teaser":"big-o-notation-post.png","credit":"NuuNoel","creditlink":"http://www.nuuneoi.com"},"tags":["algorithms"],"published":true}},"next":{"html":"<p>Browsers are essential tools that help in transfering information from one computer to another over the world wide web. Without these browsers we would not be able to dynamically interact with people from all over the world at a click of a button.</p>\n<p>Most of us interact with browsers without actually knowing what happens behind the scenes. From the time you type in <a href=\"https://www.google.com\"><em>google</em></a> to the time you get millions of hits on your search, a lot of things happen in the background. We shall explore these many things that happen.</p>\n<p>First of, we shall identify the browsers out there, the ones in existence. I know there many but we shall still outline a few, just to get an idea of what we are dealing with.</p>\n<ul>\n<li>Chrome</li>\n<li>Firefox</li>\n<li>Safari (for my good friends who own MacBooks)</li>\n<li>Internet Explorer 9</li>\n<li>Opera</li>\n<li>Maxthon</li>\n<li>YouTube Browswer</li>\n<li>Netscape Browser</li>\n<li>UC Browser</li>\n<li>Avant</li>\n</ul>\n<p>etc etc.\nNotice, how I have mentioned some browsers which are mobile based. Regardless of where they are based, the functionality remains the same as we shall soon see.</p>\n<p>The most elementary function of a browser is to display a web resource to the user. This resource is fetched from a server and displayed in the browser window. This resource is written in <a href=\"https://en.wikipedia.org/wiki/HTML\" title=\"More about HTML here\">HyperText Markup Language</a> (HTML), but it can be a PDF document or an image or any other type of file.</p>\n<h2>Functionality</h2>\n<p>Browsers are able to display such content due to an underlying web <em>protocol</em> (An agreed-upon format for transmitting data between two devices). This protocol is known as the <a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol\">HyperText Transfer Protocol</a> or <strong>HTTP</strong> in short. HTTP defines how messages are formatted and transmitted and also what actions Web servers and browsers should take in response to various commands. This allows Web clients and servers to <em>talk</em> to each other. When you enter a Web address or <a href=\"https://en.wikipedia.org/wiki/Uniform_Resource_Locator\">Uniform Resource Locator</a> (URL) in your browser it sends a HTTP command to the Web server instructin it to fetch and transmit the requested Web page and display this information in your browser. It is like making a phone call. You dial a specific number in order to talk to a specific person on the other end of the line.</p>\n<blockquote>\n<p>HyperText Transfer Protocol: An agreed-upon format for transmitting data between two devices</p>\n</blockquote>\n<p>All Web servers serving Web sites and pages support the HTTP protocol.</p>\n<p>A brief example will make it easier to picture. Say, you intend to browse a website by the name <em>FunCats</em> and you want to read up on why cats love chasing red dots to their hearts content (why do they not get it's always a trap?). The title of this article is called \"For the love of the red dot.\". The URL to reach this article on FunCats is: <a href=\"http://www.funcats.com/for-the-love-of-the-red-dot.html\">http://www.funcats.com/for-the-love-of-the-red-dot.html</a></p>\n<p>Once you enter the URL \"<a href=\"http://www.funcats.com/for-the-love-of-the-red-dot.html\">http://www.funcats.com/for-the-love-of-the-red-dot.html</a>\" into your address line, the browser breaks that Web address down into 3 parts:</p>\n<ul>\n<li>Protocol - http</li>\n<li>Server name - www.funcats.com</li>\n<li>file name - for-the-love-of-the-red-dot.html (I is is important to note that .html is a file extenstion name for HyperText Markup Language File, so a PDF document would be <em>for-the-love-of-the-red-dot.pdf</em>)</li>\n</ul>\n<p>In order for your browser to connect to the server to retrieve the information, it communicates with a name server to translate the server name into an <a href=\"IP%20address%20-%20Wikipedia,%20the%20free%20encyclopedia\" title=\"More on IP addresses\">IP address</a>. Your Web browser is then able to connect to the Web server at the resolved IP address. Once your browser has connected to the Web server using HTTP, the browser then reads the HyperText Markup Language (HTML) and the data is then displayed in your browser.</p>\n<h2>Components of a browser</h2>\n<p>So, what exactly are these parts of a browser that make this all possible? It surely has to be more than just the explanation above. For the functions to be a well oiled machine, these are the parts of a browser:</p>\n<ol>\n<li>\n<p><strong>User Interface</strong></p>\n<p>This inclued the address bar, where you type to search for content online, the back and forward buttons for navigation and last but not least the bookmarks bar.</p>\n</li>\n<li>\n<p><strong>Browser engine</strong></p>\n<p>Connects the rendering engine and the user interface.</p>\n</li>\n<li>\n<p><strong>Rendering engine</strong></p>\n<p>This is reponsible for displaying requested content. If the content requested is HTML, it will parse the HTML and CSS and display the parsed content. The main function (as the name suggests), is to simply render the content requested. By default the rendering engine can display HTML and XML documents, but it can also display other content, such as images and documens such as PDF. Browsers such as Chrome run multiple instances of the rendering engine, one for each tab. Therefore, each tab runs on a separate process. Different browsers use different rendering engines. Chrome uses Blink, Firefox uses gecko, Safari uses Webkit and Internet Explorer user trident, just to mention a few.</p>\n</li>\n<li>\n<p><strong>Networking</strong></p>\n<p>For networking calls such as HTTP requests.</p>\n</li>\n<li>\n<p><strong>UI backend</strong></p>\n<p>This is used to draw basic widgets like windows and combo boxes.</p>\n</li>\n<li>\n<p><strong>JavaScript Interpreter</strong></p>\n<p>Used to parse and execute JavaScript code from a website that used JavaScript.</p>\n</li>\n<li>\n<p><strong>Data Storage</strong></p>\n<p>This is used to store data locally, such as <a href=\"HTTP%20cookie%20-%20Wikipedia,%20the%20free%20encyclopedia\" title=\"More about cookies here\">cookies</a>. This is not the tasty treat that you always craved as a child.</p>\n</li>\n</ol>\n<p>Here is an image to make it more visiually appealing</p>\n<img src=\"http://placehold.it/150x150.gif\" alt=\"\">\n![image](https://github.com/BrianLusina/howBrowsersWork/blob/master/components_of_a_browser.png \"Components of a browser\")\n<p>So, before i sum it all up, here is the intricate flow of data from the website you requested to the display on your browser:</p>\n<p><img src=\"http://www.html5rocks.com/en/tutorials/internals/howbrowserswork/flow.png\" alt=\"flow\" title=\"Flow of a typical Rendering Engine\"></p>\n<p>These are the steps:</p>\n<ul>\n<li>The rendering engine will start off with parsing the HTML document (if that is what is requested by the user) then convert elements to <a href=\"Document%20Object%20Model%20-%20Wikipedia,%20the%20free%20encyclopedia\" title=\"More information on Document Object MOdel\">Document Object Model</a>(DOM) nodes in a tree called the \"content tree\". it will read through the style data, both in external CSS files and in style elements. The styling information and visual instructions in the HTML will be used to create another tree: the <em>render tree</em>. The render tree contains rectangles with visual attributes like color and dimensions. The rectangles are in the right order to be displayed on the screen.</li>\n<li>After the construction of the render tree it goes through a \"layout\" process. This means giving each node the exact coordinates where it should appear on the screen.</li>\n<li>The next stage is painting. The render tree will be traversed and each node will be painted using the UI backend layer.</li>\n</ul>\n<p>I have broken it down to 3 steps, but is is actually a gradual process. For a better user experience (UX), the rendering engine will try to display contents on the screen as soon as possible. It will not wait until all HTML is parsed before starting to build and layout the render tree. Parts of the content will be parsed and displayed, while the process continues with the rest of the contents that keeps coming from the network. It is more like how threads work in Java. Call it multitasking, in some way.</p>\n<p>Here is a simple example of a rendering engine at work. The example displayed is of the workings of the WebKit rendering engine. Not all rendering engines will use the same terms, but the general flow will be the same.</p>\n<p><img src=\"http://www.html5rocks.com/en/tutorials/internals/howbrowserswork/webkitflow.png\" alt=\"render\"></p>","id":"44f5e4dc-b8c6-5e05-b516-3620f3f35516","timeToRead":6,"frontmatter":{"title":"How Browsers Work","subtitle":"Some basic information about how a browser works","excerpt":"Browsers are essential tools that help in transfering information from one computer to another over the world wide web. Without these browsers we would not be able to dynamically interact with people from all over the world at a click of a button.","path":"/tech/how-browsers-work","category":"tech","date":"July 31, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"how-browsers-work.jpg","thumbnail":null,"teaser":"how-browsers-work.jpg","credit":"Taligarsiel","creditlink":"http://www.taligarsiel.com"},"tags":["how browsers work","browsers"],"published":true}}}}}