{"componentChunkName":"component---src-templates-blogs-blog-post-jsx","path":"/design/front-end-journey","result":{"data":{"markdownRemark":{"html":"<p>The front end development journey is a long one and it involves a lot of work. Requires effort, perserverence and sweat. Also, coffee, lack of sleep and frustrating arguments with your computer. Either way, it is still an exciting journey that teaches you a lot of things, whether you are an expert or starting out. To truly become an expert or proficient in your skill, you need to practice it every single day. The 10,000 hour rule applies everywhere and thus is no exception to this.</p>\n<h2>User Experience, User Interface, what's the difference?</h2>\n<p>User Experience (UX) and User Interface (UI) are two terms used interchangeably, which is very wrong to do so. They are very much related, but do not mean the same thing, If you are going to be doing front end work, it is imperative to note the difference and be able to distinguish the two every time you create an app, a website or even a simple one pager site. These two terms could not be more different like the Sun and the moon, but they are both celestial bodies.</p>\n<h2>User Experience</h2>\n<p>User experience, as the name suggests, is basically the experience the user gets when using a partifuclar websites or application. The experience has to be fluid simple and fulfilling for the user. Therefore if your site or application is about blog posts and news feeds, it should be able to display these posts in a simple way such that the user has a fluid and dynamic experience with the software.</p>\n<h2>User Interface</h2>\n<p>User interface describes how the user and your software interact. This could be how the user interacts with your web page or your mobile application. The interface is like the outer covering of your application or web page. It is supposed to be able to allow the user to dynamically interact with your website and at the same time look appealing to attract even more users, because, let us face it, human beings are quite vain and we like things that look good. So, a good user interface allows the user to enjoy using your application as well as reaping the benefits it has to offer.</p>\n<p>UI and UX are not mutually exclusive, at the very least that is my take on it. In order to create software that offers user the best experience, you also need to be able to create an interface that the user can interact with well. They are not synonymous, but they should surely not be treated separately.</p>\n<h2>Algorithms</h2>\n<p>I am going to create a series of posts, most will be Algorithm problems based on how I see it. Of course none of these are the Gospel truth, as there are always hundreds of ways to solve an algorithm problem, we are just always looking for solution that gets the problem solved the fastest. Therefore the best algorithm, is the one that gets to the solution in the shortest time frame, but also does it accurately, of course the best solution does not necessarily have to be the one that does it in the shortest time frame as it could possibly not give accurate results. So, you need to look at <em>cost and benefit approach</em> and pick the one that gets the solution, minimising errors and giving you the intended result.</p>\n<h1>Bottom Line</h1>\n<p>My bottom line is to put in the effort and constantly keep learning. This is the one thing that keeps evolving and so should you. Keep changing your approach to things, while maintaning your goal in mind and you will become an excellent front end developer and more. I suppose the best approach is to always evaluate and ask yourself, 'If I was going to use this program, what would I like to see?'. And then make it as simple as you can to people who are unfamiliar with programming and its fundamentals. Break it down completely, the user does not need to know how it fully works, they just need to know that it works well, and that is why front end development is crucial as it presents the best possible image of the program and allows the users to enjoy the full functionality of the program without fully knowing what is under the hood.</p>","frontmatter":{"title":"The Front End Development Journey.","subtitle":"The long and winding front-end development journey.","date":"June, 17, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":null,"thumbnail":null,"teaser":null,"credit":null,"creditlink":null},"path":"/design/front-end-journey","tags":["front-end","User Experience","UX","UI","User interface","design"],"excerpt":"The front end development journey is a long one and it involves a lot of work. Requires effort, perserverence and sweat. Also, coffee, lack of sleep and frustrating arguments with your computer. Either way, it is still an exciting journey"}}},"pageContext":{"prev":{"html":"<p>The very first time I encountered Git, I was confused, I did not understand anything about it. Racked my head constantly trying to figure out what it was all about. Frankly, I was getting frustrated. I simply thought it was one of those cloud backups. So, I questioned what everyone was saying about Distributed Version Control System. Did not quite grasp the concept, until finally it started making sense when I went over a tutorial and read some books and started using it. It finally meant sense, A door was opened in my mind, which unlocked tons of other ones.</p>\n<p>Admittedly, I am still learning as I interact with it and I am enjoying as I go along.</p>\n<h2>What is Git and why should you git it?</h2>\n<p>Many questions have been raised as to what git is(Maybe, not so many), but still it is worth mentioning. Git is a <a href=\"https://en.wikipedia.org/wiki/Distributed_version_contro\" title=\"More about DVCS\">Distributed Version Control System</a> (DVCS)that allows developers share their work on a platform and also make changes to it thus collaborate more effectively.</p>\n<p>One may ask <em>\"Why not just use a cloud system like Dropbox, OneDrive or Google Drive?\"</em>. One, may use these cloud platforms, but it makes work a bit difficult in the long run. I shall explain why, but first, version control, what is it and why should you care?</p>\n<h2>Version Control System(VCS)</h2>\n<p>This is a system that records changes to a file or set of files over time so that you can recall specific versions later. Ideally, you can do this with any type of file in your computer and needless to say, it makes collaborating on projects even easier. This is considering that you may not be able to meet up with your team all the time physicall. This makes version control a inique and powerful tool.</p>\n<p>You could use <a href=\"https://www.google.com/drive/\">Google Drive</a> or <a href=\"https://www.dropbox.com/\">Dropbox</a> to save your files, but you will not be able to store specific versions of your files over time. Even if you label each file differently, say filenameV1.txt or filenameV2.txt. This will mean you will have tons of files just for one project and therefore it will make it difficult when it comes back to revert back to files from a previous state. Also, it will mean having tons and tons of folders each a different version for a single project. This is bad practice and also it will become bulky in the future.</p>\n<p>With VCS, you can:</p>\n<ul>\n<li>revert back to previous files easily, revert even an entire project,</li>\n<li>compare changes you have made over time on a single project. This allows you to make notes and possibly, see where you went wrong or right on a particular change</li>\n<li>See who last modified something that was causing a problem, that is if you are working with someone on a particular project.</li>\n<li>In the event you do lose your files and projects locally, you can easily recover them and continue with your work, sure, you can do this with any cloud platform, but it will cost you much less when it comes to VCS.</li>\n</ul>\n<p>There are three types of VCS:</p>\n<ol>\n<li>\n<p><strong>Local Version Control System</strong>, which is basically storing files locally on your machine. With LVCS, there is a system in place which means you store your files using a <em>time-stamp</em> on each directory your own, creating your own version control. This however can lead to many errors. Such as over-writing files you did not intend to over-write, or losing all of them in the event of a system crush.\n<img src=\"https://git-scm.com/book/en/v2/book/01-introduction/images/local.png\" alt=\"lvcsimage\"></p>\n<blockquote>\n<p>image showing files being versioned on a local computer</p>\n</blockquote>\n</li>\n<li>\n<p><strong>Centralized Version Control System</strong> is a centralized control system which allows collaborators and developers to work on a project that is stored in a central database. This is far much better than LCVS, as you can store your projects online and be able to properly version your work and view changes made by other developers. The downside is when the database crushes, so does the project, unless it was backed up elsewhere. This is damaging considering that their is a central point of failure.<a href=\"https://subversion.apache.org/\">Subversion</a> and <a href=\"https://www.perforce.com/\">Perforce</a> are examples of CVCS.\n<img src=\"https://git-scm.com/book/en/v2/book/01-introduction/images/centralized.png\" alt=\"cvcsimage\"></p>\n<blockquote>\n<p>image showing the working of a CVCS</p>\n</blockquote>\n</li>\n<li><strong>Distributed Version Control System</strong> is the best to use as clients donâ€™t just check out the latest snapshot of the files: they fully mirror the repository. Thus if any server dies, and these systems were collaborating via it, any of the client repositories can be copied back up to the server to restore it. Every clone is really a full backup of all the data. In addition, many of these systems deal really well with having several remote repositories they can work with. This allows for collaboration with different groups of people in different ways simultaneously within the same project. This allows you to set up several types of workflows that arenâ€™t possible in centralized systems. Examples of such systems are <a href=\"https://www.mercurial-scm.org/\">Mercurial</a> <a href=\"https://git-scm.com/\">Git</a>, <a href=\"darcs.net/\">Darcs</a> and <a href=\"bazaar.canonical.com/\">Bazaar</a></li>\n</ol>\n<p><img src=\"https://git-scm.com/book/en/v2/book/01-introduction/images/distributed.png\" alt=\"dvcsimage\"></p>\n<blockquote>\n<p>DVCS at work</p>\n</blockquote>\n<p>There is a lot more documentation online on Version Control Systems and <a href=\"https://git-scm.com/\">git</a> and there are very well documented too, I suggest getting in on this, especially if you are a developer just starting out and want to be able to properly store your work and collaborate with other developers.</p>\n<p>Get git now!</p>","id":"d5b91efd-5974-5b78-bbb9-5ea3617530a1","timeToRead":4,"frontmatter":{"title":"Version Control and Git","subtitle":"Version control and git control","excerpt":"Version control and its subtle benefits","path":"/tech/git-control","category":"tech","date":"June 25, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"version-contol-system.png","thumbnail":"version-contol-system.png","teaser":"version-contol-system.png","credit":null,"creditlink":null},"tags":["git","version control","VCS","versioning"],"published":true}},"next":{"html":"<p>The Chrome Developer Tools (DevTools for short), are a set of web authoring and debugging tools built into Google Chrome. The DevTools provide web developers deep access into the internals of the browser and their web application. The DevTools are used to efficiently track down layout issues, set JavaScript breakpoints, and get insights for code optimization. It makes web development dare I say <em>easy</em>.</p>\n<p>These tools are effective for any web deveeloper and allow for live editing of a web application. Thus, you do not need to change the web application from the server that hosts the application and refresh your browser. This even allows you to track any bugs and also performance of your application. Thus makes web development a little bit simpler.</p>\n<h2>Accessging the DevTools</h2>\n<p>Access to the DevTools is quite simple. There are two ways:</p>\n<ul>\n<li>Select the Chrome menu Chrome Menu <img src=\"https://developer.chrome.com/devtools/images/chrome-menu.png\" alt=\"chromeMenu\"> at the top-right of your browser window, then select Tools > Developer Tools.</li>\n<li>Right-click on any page element and select Inspect Element.</li>\n<li>Use a keyboard shortcut such as F12 of</li>\n</ul>\n<p>The DevTools window will open at the bottom of your browser or on the right side of your browser, depending on how you prefer to dock it.\nThe Tools window has several panels that lets you edit your web application and track any changes you make.</p>\n<p><img src=\"https://developer.chrome.com/devtools/images/devtools-window.png\" alt=\"DevToolsWindow\"></p>\n<blockquote>\n<p>Chrome Developer Tools Window</p>\n</blockquote>\n<p>As you can see above, there are panels you can navigate to on the left side of the window. These let you work with a specifit type of page or app window.</p>\n<ul>\n<li>\n<p><strong>Elements</strong></p>\n<p>Allows you inspect everything on the <a href=\"https://en.wikipedia.org/wiki/Document_Object_Model\" title=\"More on DOM\"><em>Document Object Model</em></a> (DOM for short) and edit the elements you find.</p>\n<p><img src=\"https://developer.chrome.com/devtools/images/elements-panel.png\" alt=\"elementsPanel\" title=\"Elements Panel\"></p>\n</li>\n<li>\n<p><strong>Resources</strong></p>\n<p>This lets you inspect resources that are loaded in the inspected page. It lets you interact with HTML5 Database, Local Storage, Cookies, AppCache, etc.</p>\n<p><img src=\"https://developer.chrome.com/devtools/images/resources-panel.png\" alt=\"resourcePanel\" title=\"Resource panel\"></p>\n</li>\n<li>\n<p><strong>Network</strong></p>\n<p>Provides insights into resources that are requested and downloaded over the network in real time. Identifying and addressing those requests taking longer than expected is an essential step in optimizing your page.</p>\n<p><img src=\"https://developer.chrome.com/devtools/images/network-panel.png\" alt=\"networkPanel\" title=\"Network Panel\"></p>\n</li>\n<li>\n<p><strong>Sources</strong></p>\n<p>Developers need powerful debugging tools to help quickly discover the cause of an issue and fix it efficiently. The Sources tab allows you to go over the JavaScript code and debug where necessary.</p>\n<p><img src=\"https://developer.chrome.com/devtools/images/js-debugging.png\" alt=\"sourcesTab\" title=\"Sources Tab\"></p>\n</li>\n<li>\n<p><strong>Timeline</strong></p>\n<p>This gives you a complete overview of where time is spent when loading and using your web app or page. All events, from loading resources to parsing JavaScript, calculating styles, and repainting are plotted on a timeline.</p>\n<p><img src=\"https://developer.chrome.com/devtools/images/timeline-panel.png\" alt=\"timelinePanel\" title=\"Timeline Panel\"></p>\n</li>\n<li>\n<p><strong>Profiles</strong></p>\n<p>This allows you to <em>profile</em> the execution time and memory usage of a web app or page. These help you to understand where resources are being spent, and so help you to optimize your code. The profiles are:</p>\n<ul>\n<li>CPU profiler shows where execution time is spent in your page's JavaScript functions.</li>\n<li>Heap profiler shows memory distribution by your page's JavaScript objects and related DOM nodes.</li>\n<li>JavaScript profile shows where execution time is spent in your scripts</li>\n</ul>\n<p><img src=\"https://developer.chrome.com/devtools/images/profiles-panel.png\" alt=\"profileTab\" title=\"Profile Tab\"></p>\n</li>\n<li>\n<p><strong>Audits</strong></p>\n<p>The Audit panel can analyze a page as it loads. Then provides suggestions and optimizations for decreasing page load time and increase perceived (and real) responsiveness.</p>\n<p><img src=\"https://developer.chrome.com/devtools/images/audits-panel.png\" alt=\"auditPanel\" title=\"Audit Panel\"></p>\n</li>\n<li>\n<p><strong>Console</strong></p>\n<p>Provides two primary functions for developers testing web pages and applications. It is a place to:</p>\n<ul>\n<li>Log diagnostic information in the development process.</li>\n<li>A shell prompt which can be used to interact with the document and DevTools.</li>\n</ul>\n<p><img src=\"https://developer.chrome.com/devtools/docs/console-files/expression-evaluation.png\" alt=\"consoleTab\" title=\"Console Tab\"></p>\n</li>\n</ul>\n<h3>More on DevTools</h3>\n<p>These are just but the essentials to get you started on using the DevTools, more reading can be found here:</p>\n<ul>\n<li><a href=\"https://developer.chrome.com/devtools/docs/heap-profiling\">Heap Profiling</a></li>\n<li><a href=\"https://developer.chrome.com/devtools/docs/cpu-profiling\">CPU Profiling</a></li>\n<li><a href=\"https://developer.chrome.com/devtools/docs/device-mode\">Device Mode &#x26; Mobile Emulation</a></li>\n<li><a href=\"https://developer.chrome.com/devtools/docs/remote-debugging\">Remote Debugging</a></li>\n<li><a href=\"https://developer.chrome.com/devtools/docs/videos\">DevTools Videos</a></li>\n<li>And a free course on DevTools in <a href=\"http://discover-devtools.codeschool.com/\">CodeSchool</a></li>\n</ul>","id":"79a6cdba-c28c-57f1-b3b5-ceef7031df84","timeToRead":3,"frontmatter":{"title":"What Is Chrome Developer Tools?","subtitle":"Brief introduction to the Chrome DevTools","excerpt":"The Chrome Developer Tools (DevTools for short), are a set of web authoring and debugging tools built into Google Chrome. The DevTools provide web developers deep access into the internals of the browser and their web application.","path":"/tech/chrome-dev-tools","category":"tech","date":"June 06, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"chrome-dev-tools.png","thumbnail":"chrome-dev-tools.png","teaser":"chrome-dev-tools.png","credit":null,"creditlink":null},"tags":["chrome","DevTools","browser tools"],"published":true}}}}}