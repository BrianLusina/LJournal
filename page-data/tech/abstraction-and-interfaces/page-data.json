{"componentChunkName":"component---src-templates-blogs-blog-post-jsx","path":"/tech/abstraction-and-interfaces","result":{"data":{"markdownRemark":{"html":"<p>Abstraction and interfaces are common words that most programmers will come across when desigining systems and platforms. They are very useful concepts that any programmer who knows about Object Oriented Programming (OOP) should grasp and know like the back of their hand. They not only make code readable and testable, but also make your life a hell of a lot easier.</p>\n<p>Alright,let us get to it, so, I shall write about abstraction and interface in the Java programming language. However these very concepts can be applied to any OOP language out there.</p>\n<h2>Abstract classes</h2>\n<p>These are classes that contain one or more abstract methods. An abstract method is one that is declared but contains no implementation (without braces and followed by a semi-colon).</p>\n<pre><code class=\"language-java\">abstract void drive(double speed);\n</code></pre>\n<p>If a class contains abstract methods then the class <strong>must</strong> be declared abstract. When an abstract class is subclassed, the subclass usually provides implementations for all of the abstract methods in its parent class. However, if it does not, then the subclass must also be declared abstract.</p>\n<pre><code class=\"language-java\">abstract class Car{\n\n    abstract void changeGear(int number);\n}\n</code></pre>\n<p>Take for example we are modelling animals, we may start the hierachy with a base class of <em>Animal</em>. Animals are capable of several things, flying, running, swimming, crawling. They are also capable of sleeping, eating, dreaming. In this regard, the many types of animals have similar characteristics, like eating and sleeping. So the common operations performed by animals, but in a different way is a good candidate for abstraction which will force the subclasses (or child classes) to provide their own implementation. Let us take the following example.</p>\n<pre><code class=\"language-java\">    abstract class Animal {\n\n        /**Types of food the animals eat*/\n        public abstract void eat(String food);\n\n        /**How long the anima will sleep*/\n        public void sleep(int hours){\n            try{\n                // 1000 milliseconds * 60 seconds * 60 minutes * hours\n                Thread.sleep(1000 * 60 *60 *hours);\n            }catch (InterruptedException ie){\n                ie.printStackTrace();\n            }\n        }\n\n        /**The sound the animals make*/\n        public abstract void makeNoise();\n    }\n</code></pre>\n<p>The <strong>abstract</strong> keyword is used in both the class and the method to declare that the class and the method are abstract. Any class that subclasses <code>Animal</code> must implement the <code>makeNoise</code> and the <code>eat</code> functions.</p>\n<pre><code class=\"language-java\">    public class Cat extends Animal{\n        @Override\n        public void eat(String food) {\n            System.out.println(\"Cats eat \" + food);\n        }\n\n        @Override\n        public void makeNoise() {\n            System.out.println(\"Cats meow a lot\");\n        }\n    }\n</code></pre>\n<p>Alternatively we could declare Animal as an interface instead of using an abstract class, and have the Cat implement the interface. You could - but you'd also need to implement the sleep method. By using abstract classes, you can inherit the implementation of other (non-abstract) methods. You can't do that with interfaces - an interface cannot provide any method implementations.</p>\n<h2>Abstract classes and Interfaces</h2>\n<p>Now, that we have a basic understanding of abstraction, we shal compare that to interfaces. What is the difference? They are similar in a way, but are obviously not the same. You <strong>can't</strong> instantiate an abstract class and they may contain a mix of methods containing a mix of methods declared with or without an implementation. With abstract classes, you can declare fields that are not static and final, and define public, protected, and private concrete methods. With interfaces on the other hand, all fields are automatically public, static, and final, and all methods that you declare or define (as default methods) are public. In addition, you can extend only one class, whether or not it is abstract, whereas you can implement any number of interfaces (basics of OOP).</p>\n<h2>Instances to use Abstract classes and Interfaces.</h2>\n<p>Abstract classes are best used in such scenarios:</p>\n<ul>\n<li>You want to share code among several closely related classes.</li>\n<li>You expect that classes that extend your abstract class have many common methods or fields, or require access modifiers other than public (such as protected and private).</li>\n<li>You want to declare non-static or non-final fields. This enables you to define methods that can access and modify the state of the object to which they belong.</li>\n</ul>\n<p>Interfaces on the other hand are best used in such scenarios:</p>\n<ul>\n<li>You expect that unrelated classes would implement your interface.</li>\n<li>You want to specify the behavior of a particular data type, but not concerned about who implements its behavior.</li>\n<li>You want to take advantage of multiple inheritance of type.</li>\n</ul>\n<p>These obviously are not the only scenarios, they are just but examples. A real practical example of Abstraction is found <a href=\"https://github.com/BrianLusina/Java-Playground/tree/master/AbstractionInterfaces/MotorVehicles\">here</a>.</p>","frontmatter":{"title":"Abstraction and interfaces","subtitle":"When to use abstraction and when to use interfaces","date":"October, 28, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"abstract_class_interfaces.png","thumbnail":"abstract_class_interfaces.png","teaser":"abstract_class_interfaces.png","credit":"Agile Code","creditlink":"http://agile-code.com"},"path":"/tech/abstraction-and-interfaces","tags":["abstraction","interfaces","oop"],"excerpt":"Abstraction and interfaces are common words that most programmers will come across when desigining systems and platforms. They are very useful concepts that any programmer who knows about Object Oriented Programming (OOP) should grasp and know like the back of their hand. They not only make code readable and testable, but also make your life a hell of a lot easier."}}},"pageContext":{"prev":{"html":"<p>The title may not be as intuitive or as smart as it should be, but I assure that the title is the least of concerns. This may be a very common topic when it comes to the insurance sector, but, hey, why not shed some more light on it anyway.</p>\n<p>Insurance is very critical to business and in order for these businesses to keep operating despite calamities, they need insurance to ensure that no matter what happens they can keep their doors open.</p>\n<p>But, this is on the side of businesses and that is entirely different, today I shall shed some light on the fundamental problems of <em>Non life insurance</em> on Insurance companies. Call it flipping the coin and viewing it from the other side.</p>\n<p>This is a high-level view of what I am talking about.</p>\n<p>Actuaries deal with all kinds of mathematical and statistical problems in insurance. Insurance companies accept risks (potential claims) from their clients against a certain price called the premium. If a risk or a portfolio of risks is too large for a company, it will pass parts of it to one or several companies (its <em>re-insurance</em>) and remain with a part of it (its <em>retention</em>). If a risk is very large, some re-insurers pass parts of the acceptances to other companies so that the original risk or portfolio is covered by an entire network of insurers and re-insurance arrangements between a number of companies each of them carrying the retention they deem appropriate. Therefore, the amount of a company retains depend on a lot of things:</p>\n<h3>Capital of a company</h3>\n<p>This is obviously a big deal. A company with a large capital base can afford to retain more on its account than a company with a smaller capital base.</p>\n<h3>Management risk willingness</h3>\n<p>This all depends on the management and their risk appetite. The only question to ask here is <em>is the management willing to take risks?</em>. And this usually leads to, <em>if so, how much?</em>. A manager with a smaller risk appetite will not take as much risk as his/her counterpart. Thus we expect the former to retain less on the company account.</p>\n<h3>Profitability of the company</h3>\n<p>How profitable will be company be in undertaking a risk? We all know that the most basic of any company goal is to make a profit. It's usually hidden under the many missions and visions it share with the public. Internally, the company's main goal is to make a profit.\nThe <em>underwriter</em> needs to set appropriate premiums and assess whether the portfolio will produce a profit given unusual claims are not reported.</p>\n<p>These are just some of the basics and I will ensure to highlight more in days to come.\nIn the meantime, digest this information and comment if you like.</p>\n<p>Cheers!</p>","id":"40dd5656-280a-5675-9a2e-8ed41c308cb8","timeToRead":2,"frontmatter":{"title":"Non Life Insurance Problems in Life","subtitle":"Problems in Non-Life Insurance","excerpt":"Problems in Non-Life Insurance","path":"/finance/non-life-actuarial-problems","category":"finance","date":"January 16, 2017","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"nonlife-insurance-problems.jpg","thumbnail":null,"teaser":"nonlife-insurance-problems.jpg","credit":"Life Marketers","creditlink":"http://www.lifemarketers.com/life-insurance-general-agency/non-med-life-insurance"},"tags":["Actuarial","Insurance","Money","business"],"published":true}},"next":{"html":"<p>No one likes errors, especially when they occur frequently and unchecked. As developers we constantly check for errors and not that the program is running as expected, but rather it is handling the errors as it should. There is not perfect program that will never encounter errors, the best programs are the ones that handle <strong>exceptions</strong> really well and keep the user happy and oblivous of the errors being handled. It is important that errors are handled appropriately and also that they give the user a meaningful message. Unfortunately, you never know that kind of errors you may encounter in your program. Some are caused by the code you write, others by external factors that your program has nothing to do with, like a poor internet connection or hardware malfunction. In both cases, your program should be able to handle these exceptions and keep running or exit, whichever suits you need at the time.</p>\n<p>Of course, before delving deeper into the exceptions, we should all be on the same page as to what exceptions are.</p>\n<p><strong>Exceptions</strong> as defined by Java Documentation is an event, which occurs during the execution of a program, that disrupts the normal flow of the program's instructions. This disruption of the normal flow of the program should be handled with care and enable the user to keep interacting with the program despite this interruption, otherwise you will have poor ratings, no one wants that.</p>\n<p>I will not delve into details about how a program determines an error and normal flow of a program. I will dive immediately into which type of exceptions we should look out for.</p>\n<ol>\n<li>\n<p>Checked Exception</p>\n<p>Say, you are creating a program that requires user input, such as their name, phone number, email and such, for validation purposes. Maybe you need these inputs for authorization or for sign up to your platform. It is possible that the user will provide an invalid email address and as such you will need to validate these parameters before passing them to a function or class that will handle the authentication. Normally, if you are developing for Android it will be easy to validate this field in the XML layout, but what if you are checking with a server and you have to fetch a response in order to proceed. If the response returns <em>Null</em> then you need to be able to handle such a response.</p>\n<p>A well-written program will catch this exception and notify the user of the mistake, possibly prompting for a correct email address if the email does not exist in the system's database.</p>\n</li>\n<li>\n<p>Error</p>\n<p>These are the kind of errors that will occur that are outside the application's scope of handling. These kind of errors may involve poor internet connection on the part of the user or maybe they are experiencing hardware failure. The application can not anticipate that it will happen as it may occur randomly. However, it should be able to catch this exception and notify the user of the failure to execute the program. In the example above, maybe in the middle of execution of request to ther server, after having validate the user credentials, the internet connection is abruptly cut and the user is not properly authenticated with the system, it is at this point that the application should notify the user of the problem, catch this expection and try again at a late time. It may make sense in some instances to print a stacktrace and exit the program.</p>\n</li>\n<li>\n<p>Runtime Exception</p>\n<p>These are exceptional conditions that are internal to the application, and that the application usually cannot anticipate or recover from. These type of errors are usually because of an improper use of an API or a logic error. If we use the abov example still, if a logic error causes <code>null</code> to be passed instead of a <code>username</code> then the method handling authentication will throw a <strong>NullPointerException</strong>. Now normally it may make sense to catch this exception and notify the user, but it makes even more sense to eliminate this bug completely and not pass null to the method or constructor of a class.</p>\n</li>\n</ol>\n<p>Now, you may have noticed something similar about the last two types of exceptions. Errors and runtime exceptions are collectively known as <strong>unchecked exceptions</strong> and this is because they do not need to be <em>caught</em> as much as the 1st type. This is normally because they could be caused by external factors that the app can not manage and it will reduce complexity and make more sense for the application to terminate and inform the user of the same. In other instances like in the third example about the logic error, it makes more sense to not pass in null to a constructor or method.</p>\n<p>Either way, it is important to give your user the best possible experience with your program and thus keep the user notified of any errors that may occur and thus give them the best experience.</p>","id":"19d640e0-9b50-5692-88e1-9f0410ad4fcb","timeToRead":3,"frontmatter":{"title":"Exception Handling and why you should care.","subtitle":"Try and catch that exception, keeping your user happy","excerpt":"No one likes errors, especially when they occur frequently and unchecked. As developers we constantly check for errors and not that the program is running as expected, but rather it is handling the errors as it should. There is not perfect program that will never encounter errors, the best programs are the ones that handle **exceptions** really well and keep the user happy and oblivous of the errors being handled","path":"/tech/exceptions","category":"tech","date":"October 26, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"exceptions-vs-errors.png","thumbnail":"exceptions-vs-errors.png","teaser":"exceptions-vs-errors.png","credit":"http://rypress.com","creditlink":"http://rypress.com/tutorials/objective-c/exceptions"},"tags":["exceptions","error-handling"],"published":true}}}}}