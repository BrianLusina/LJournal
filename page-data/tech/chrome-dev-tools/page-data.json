{"componentChunkName":"component---src-templates-blogs-blog-post-jsx","path":"/tech/chrome-dev-tools","result":{"data":{"markdownRemark":{"html":"<p>The Chrome Developer Tools (DevTools for short), are a set of web authoring and debugging tools built into Google Chrome. The DevTools provide web developers deep access into the internals of the browser and their web application. The DevTools are used to efficiently track down layout issues, set JavaScript breakpoints, and get insights for code optimization. It makes web development dare I say <em>easy</em>.</p>\n<p>These tools are effective for any web deveeloper and allow for live editing of a web application. Thus, you do not need to change the web application from the server that hosts the application and refresh your browser. This even allows you to track any bugs and also performance of your application. Thus makes web development a little bit simpler.</p>\n<h2>Accessging the DevTools</h2>\n<p>Access to the DevTools is quite simple. There are two ways:</p>\n<ul>\n<li>Select the Chrome menu Chrome Menu <img src=\"https://developer.chrome.com/devtools/images/chrome-menu.png\" alt=\"chromeMenu\"> at the top-right of your browser window, then select Tools > Developer Tools.</li>\n<li>Right-click on any page element and select Inspect Element.</li>\n<li>Use a keyboard shortcut such as F12 of</li>\n</ul>\n<p>The DevTools window will open at the bottom of your browser or on the right side of your browser, depending on how you prefer to dock it.\nThe Tools window has several panels that lets you edit your web application and track any changes you make.</p>\n<p><img src=\"https://developer.chrome.com/devtools/images/devtools-window.png\" alt=\"DevToolsWindow\"></p>\n<blockquote>\n<p>Chrome Developer Tools Window</p>\n</blockquote>\n<p>As you can see above, there are panels you can navigate to on the left side of the window. These let you work with a specifit type of page or app window.</p>\n<ul>\n<li>\n<p><strong>Elements</strong></p>\n<p>Allows you inspect everything on the <a href=\"https://en.wikipedia.org/wiki/Document_Object_Model\" title=\"More on DOM\"><em>Document Object Model</em></a> (DOM for short) and edit the elements you find.</p>\n<p><img src=\"https://developer.chrome.com/devtools/images/elements-panel.png\" alt=\"elementsPanel\" title=\"Elements Panel\"></p>\n</li>\n<li>\n<p><strong>Resources</strong></p>\n<p>This lets you inspect resources that are loaded in the inspected page. It lets you interact with HTML5 Database, Local Storage, Cookies, AppCache, etc.</p>\n<p><img src=\"https://developer.chrome.com/devtools/images/resources-panel.png\" alt=\"resourcePanel\" title=\"Resource panel\"></p>\n</li>\n<li>\n<p><strong>Network</strong></p>\n<p>Provides insights into resources that are requested and downloaded over the network in real time. Identifying and addressing those requests taking longer than expected is an essential step in optimizing your page.</p>\n<p><img src=\"https://developer.chrome.com/devtools/images/network-panel.png\" alt=\"networkPanel\" title=\"Network Panel\"></p>\n</li>\n<li>\n<p><strong>Sources</strong></p>\n<p>Developers need powerful debugging tools to help quickly discover the cause of an issue and fix it efficiently. The Sources tab allows you to go over the JavaScript code and debug where necessary.</p>\n<p><img src=\"https://developer.chrome.com/devtools/images/js-debugging.png\" alt=\"sourcesTab\" title=\"Sources Tab\"></p>\n</li>\n<li>\n<p><strong>Timeline</strong></p>\n<p>This gives you a complete overview of where time is spent when loading and using your web app or page. All events, from loading resources to parsing JavaScript, calculating styles, and repainting are plotted on a timeline.</p>\n<p><img src=\"https://developer.chrome.com/devtools/images/timeline-panel.png\" alt=\"timelinePanel\" title=\"Timeline Panel\"></p>\n</li>\n<li>\n<p><strong>Profiles</strong></p>\n<p>This allows you to <em>profile</em> the execution time and memory usage of a web app or page. These help you to understand where resources are being spent, and so help you to optimize your code. The profiles are:</p>\n<ul>\n<li>CPU profiler shows where execution time is spent in your page's JavaScript functions.</li>\n<li>Heap profiler shows memory distribution by your page's JavaScript objects and related DOM nodes.</li>\n<li>JavaScript profile shows where execution time is spent in your scripts</li>\n</ul>\n<p><img src=\"https://developer.chrome.com/devtools/images/profiles-panel.png\" alt=\"profileTab\" title=\"Profile Tab\"></p>\n</li>\n<li>\n<p><strong>Audits</strong></p>\n<p>The Audit panel can analyze a page as it loads. Then provides suggestions and optimizations for decreasing page load time and increase perceived (and real) responsiveness.</p>\n<p><img src=\"https://developer.chrome.com/devtools/images/audits-panel.png\" alt=\"auditPanel\" title=\"Audit Panel\"></p>\n</li>\n<li>\n<p><strong>Console</strong></p>\n<p>Provides two primary functions for developers testing web pages and applications. It is a place to:</p>\n<ul>\n<li>Log diagnostic information in the development process.</li>\n<li>A shell prompt which can be used to interact with the document and DevTools.</li>\n</ul>\n<p><img src=\"https://developer.chrome.com/devtools/docs/console-files/expression-evaluation.png\" alt=\"consoleTab\" title=\"Console Tab\"></p>\n</li>\n</ul>\n<h3>More on DevTools</h3>\n<p>These are just but the essentials to get you started on using the DevTools, more reading can be found here:</p>\n<ul>\n<li><a href=\"https://developer.chrome.com/devtools/docs/heap-profiling\">Heap Profiling</a></li>\n<li><a href=\"https://developer.chrome.com/devtools/docs/cpu-profiling\">CPU Profiling</a></li>\n<li><a href=\"https://developer.chrome.com/devtools/docs/device-mode\">Device Mode &#x26; Mobile Emulation</a></li>\n<li><a href=\"https://developer.chrome.com/devtools/docs/remote-debugging\">Remote Debugging</a></li>\n<li><a href=\"https://developer.chrome.com/devtools/docs/videos\">DevTools Videos</a></li>\n<li>And a free course on DevTools in <a href=\"http://discover-devtools.codeschool.com/\">CodeSchool</a></li>\n</ul>","frontmatter":{"title":"What Is Chrome Developer Tools?","subtitle":"Brief introduction to the Chrome DevTools","date":"June, 06, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"chrome-dev-tools.png","thumbnail":"chrome-dev-tools.png","teaser":"chrome-dev-tools.png","credit":null,"creditlink":null},"path":"/tech/chrome-dev-tools","tags":["chrome","DevTools","browser tools"],"excerpt":"The Chrome Developer Tools (DevTools for short), are a set of web authoring and debugging tools built into Google Chrome. The DevTools provide web developers deep access into the internals of the browser and their web application."}}},"pageContext":{"prev":{"html":"<p>The front end development journey is a long one and it involves a lot of work. Requires effort, perserverence and sweat. Also, coffee, lack of sleep and frustrating arguments with your computer. Either way, it is still an exciting journey that teaches you a lot of things, whether you are an expert or starting out. To truly become an expert or proficient in your skill, you need to practice it every single day. The 10,000 hour rule applies everywhere and thus is no exception to this.</p>\n<h2>User Experience, User Interface, what's the difference?</h2>\n<p>User Experience (UX) and User Interface (UI) are two terms used interchangeably, which is very wrong to do so. They are very much related, but do not mean the same thing, If you are going to be doing front end work, it is imperative to note the difference and be able to distinguish the two every time you create an app, a website or even a simple one pager site. These two terms could not be more different like the Sun and the moon, but they are both celestial bodies.</p>\n<h2>User Experience</h2>\n<p>User experience, as the name suggests, is basically the experience the user gets when using a partifuclar websites or application. The experience has to be fluid simple and fulfilling for the user. Therefore if your site or application is about blog posts and news feeds, it should be able to display these posts in a simple way such that the user has a fluid and dynamic experience with the software.</p>\n<h2>User Interface</h2>\n<p>User interface describes how the user and your software interact. This could be how the user interacts with your web page or your mobile application. The interface is like the outer covering of your application or web page. It is supposed to be able to allow the user to dynamically interact with your website and at the same time look appealing to attract even more users, because, let us face it, human beings are quite vain and we like things that look good. So, a good user interface allows the user to enjoy using your application as well as reaping the benefits it has to offer.</p>\n<p>UI and UX are not mutually exclusive, at the very least that is my take on it. In order to create software that offers user the best experience, you also need to be able to create an interface that the user can interact with well. They are not synonymous, but they should surely not be treated separately.</p>\n<h2>Algorithms</h2>\n<p>I am going to create a series of posts, most will be Algorithm problems based on how I see it. Of course none of these are the Gospel truth, as there are always hundreds of ways to solve an algorithm problem, we are just always looking for solution that gets the problem solved the fastest. Therefore the best algorithm, is the one that gets to the solution in the shortest time frame, but also does it accurately, of course the best solution does not necessarily have to be the one that does it in the shortest time frame as it could possibly not give accurate results. So, you need to look at <em>cost and benefit approach</em> and pick the one that gets the solution, minimising errors and giving you the intended result.</p>\n<h1>Bottom Line</h1>\n<p>My bottom line is to put in the effort and constantly keep learning. This is the one thing that keeps evolving and so should you. Keep changing your approach to things, while maintaning your goal in mind and you will become an excellent front end developer and more. I suppose the best approach is to always evaluate and ask yourself, 'If I was going to use this program, what would I like to see?'. And then make it as simple as you can to people who are unfamiliar with programming and its fundamentals. Break it down completely, the user does not need to know how it fully works, they just need to know that it works well, and that is why front end development is crucial as it presents the best possible image of the program and allows the users to enjoy the full functionality of the program without fully knowing what is under the hood.</p>","id":"1018d58a-f37f-5645-8a02-a37e6aac950f","timeToRead":3,"frontmatter":{"title":"The Front End Development Journey.","subtitle":"The long and winding front-end development journey.","excerpt":"The front end development journey is a long one and it involves a lot of work. Requires effort, perserverence and sweat. Also, coffee, lack of sleep and frustrating arguments with your computer. Either way, it is still an exciting journey","path":"/design/front-end-journey","category":"design","date":"June 17, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":null,"thumbnail":null,"teaser":null,"credit":null,"creditlink":null},"tags":["front-end","User Experience","UX","UI","User interface","design"],"published":true}},"next":{"html":"<p>For a program to be said to be object oriented, some principles have to be followed. These principles are crucial to enable the said program to be effective in order to be able to meet the needs the program was designed for.\nThe four principles are:</p>\n<ul>\n<li>Encapsulation</li>\n<li>Abstraction</li>\n<li>Inheritance</li>\n<li>Polymorphism</li>\n</ul>\n<h2>Encapsulation</h2>\n<p>This is the hiding of data implementation by restricting access to <em>setters</em> and <em>getters</em> Getters are accessor methods that allows the <em>state</em> of an object to be retrieved, while setters are mutator methods that allows on objects state to be modified. This enables the original data (variables or fields) to be protected as they are not directly modified, rather they are accessed through these methods. This enables one to make changes to a class without the worry that they are going to break other code that is using and calling the same class for information. Here is a brief example:</p>\n<pre><code class=\"language-Java\">public class Person{\n  private String fName;\n  private String lName;\n  private String email;\n\n  //Constructor\n  public Person(String fName,String lName,String email){\n    this.fName = fName;\n    this.lName = lName;\n    this.email = email.\n  }\n\n  //Getter and setter methods for each field\n  public String getFname{\n    return fName;\n  }\n\n  public void setfName(String fName){\n    this.fName = fName;\n  }\n\n  public String getLname{\n    return lName;\n  }\n\n  public void setlName(String lName){\n    this.lName = lName;\n  }\n\n  public String getEmail{\n    return email;\n  }\n\n  public void setEmail(String email){\n    this.email = email;\n  }\n}\n</code></pre>\n<blockquote>\n<p>Above is a Person class that contains the persons first name(<code>fName</code>), last name(<code>lName</code>) and email(<code>email</code>)</p>\n</blockquote>\n<p>This Person class fields <code>fName</code>, <code>lName</code> and <code>email</code> are hidden from outside and can not be accessed directly. However, they can be accessed through getter and setter methods, i.e. <code>getFname</code>, <code>getLname</code>, <code>getEmail</code>, <code>setFname</code>, <code>setLname</code> and <code>setEmail</code>.</p>\n<pre><code class=\"language-Java\">import Person\npublic class Main{\n  public static void main(String args[]){\n    //creates a new Person object\n    Person john = new Person(\"John\",\"Hancock\",\"john@example.com\");\n    System.out.println(john.fName); //will return an error, as this field can not be directly accessed\n    System.out.println(john.getFname());//will return John\n  }\n}\n</code></pre>\n<blockquote>\n<p>Above is a simple demonstration of encapsulation. <code>john</code> object is created using a custom constructor, which initializes the fields (<code>fName</code>,<code>lName</code> and <code>email</code>). the <code>getFname</code> is used to access the first name John.</p>\n</blockquote>\n<h2>Abstraction</h2>\n<p>Abstract means a concept or an Idea which is not associated with any particular instance. Using abstract class/interface we express the intent of the class rather than the actual implementation. In a way, one class should not know the inner details of another in order to use it, just knowing the interfaces should be good enough. Abstraction denotes a model, a view, or some other focused representation for an actual item.</p>\n<p>When we think about it every noun in the language is a category. When we say \"a bird\", we are not referring to a specific bird, but to the category that contains all the birds in the world, and describe them. So when I say \"a bird\" most people have a general idea of what I mean, what information they will have about each individual object that will be in this category and what kind of action it could do.</p>\n<pre><code class=\"language-Java\">public class Bird{\n  private String name;\n  private float height;\n  private float weight;\n  private boolean fly;\n\n  //constructor\n  public Bird(String name,float height, float weight, boolean fly){\n    this.name = name;\n    this.height = height;\n    this.weight = weight\n    this.fly = fly;\n  }\n\n  //getters and setters\n  public String getName(){\n    return name;\n  }\n\n  public void setName(String name){\n    this.name = name;\n  }\n\n  public float getHeight(){\n    return height;\n  }\n\n  public void setHeight(float height){\n    this.height = height;\n  }\n\n  public float getWeight(){\n    return weight;\n  }\n\n  public void setWeight(float weight){\n    this.weight = weight;\n  }\n\n  public boolean getFly(){\n    return fly;\n  }\n\n  public void setFly(boolean fly){\n    this.fly = fly;\n  }\n\n  public boolean canFly(){\n    //code to determine if the bird can fly and returns a boolean value\n  }\n\n  public boolean canChirp(){\n    //code to determine if the bird can chirp and returns a boolean value\n  }\n}\n</code></pre>\n<blockquote>\n<p>Above is a simple class that has the states(fields) of a bird class.</p>\n</blockquote>\n<p>This is an example of an abstract type of what a bird object is to us outside of the software world. The abstract bird is defined by the operations that can be performed on it, and the information we can get from it and give to it.</p>\n<h2>Inheritance</h2>\n<p>This is the ability of a new class to be created, from an existing class by <em>extending</em> it. The parent class is referred to as the <strong>superclass</strong> or <strong>base class</strong> or <strong>parent class</strong> or <strong>ancestor class</strong>. The <em>superclass</em> is the class that defines all the properties and methods of the subclasses. Objects can relate to eachother with either a <strong>has a</strong>, <strong>uses a</strong> or an <strong>is a</strong> relationship. <em>Is a</em> is the inheritance way of object relationship. A proper example is a vehicle class. All cars are vehicles, but they do not have the same properties and behaviours. They all inherit from the vehicle class, but there are features that are not common in all, which makes every vehicle object unique from the other. A truck is not the same from a sedan and a motorbike is not the same as a trailer, despite the fact that they are all vehicles. Let us look at an example:</p>\n<pre><code class=\"language-Java\">public class Vehicle{\n  private String name;\n  private String model;\n  private int engineSize;\n  private int wheels;\n  private int doors;\n  pritave int seats;\n  int speed = 0;\n  int gear = 1;\n\n  //constructor\n  public Vehicle(String name, String model,int engineSize,int wheels,int doors,int seats){\n    this.name = name;\n    this.model = model;\n    this.engineSize = engineSize;\n    this.wheels = wheels;\n    this.doors = doors;\n    this.seats = seats;\n  }\n\n  //getters and setters\n  public String getName(){\n    return name;\n  }\n\n  public void setName(String name){\n    this.name = name;\n  }\n\n    public String getName(){\n    return name;\n  }\n\n  public void setName(String name){\n    this.name = name;\n  }\n\n  public String getModel(){\n    return model;\n  }\n\n  public void setModel(String model){\n    this.model = model;\n  }\n\n  public int getEngineSize(){\n    return engineSize;\n  }\n\n  public void setEngine(String engineSize){\n    this.engineSize = engineSize;\n  }\n\n  public String getWheels(){\n    return wheels;\n  }\n\n  public void setWheels(String wheels){\n    this.wheels = wheels;\n  }\n\n  public String getDoors(){\n    return doors;\n  }\n\n  public void setSeats(String seats){\n    this.seats = seats;\n  }\n\n  //behaviours of a typical Vehicle object\n  public void changeGear(int newValue) {\n         gear = newValue;\n  }\n\n  public void speedUp(int increment) {\n         speed = speed + increment;\n  }\n\n  public void applyBrakes(int decrement) {\n       speed = speed - decrement;\n  }\n\n  pulic void printStates() {\n   System.out.println(\" speed:\" + speed + \" gear:\" + gear);\n  }\n}\n</code></pre>\n<blockquote>\n<p><code>Vehicle</code> class that describes all the properties of a vehicle object. This is the superclass</p>\n</blockquote>\n<p>The class above can be extended as shown below</p>\n<pre><code class=\"language-Java\">public class Truck extends Vehicle{\n  //perform actions here specific to a Truck object\n}\n\npublic class MotorBike extends Vehicle{\n  //perform actions specific to a MotorBike Object\n}\n</code></pre>\n<blockquote>\n<p><code>Truck</code> class gets all the properties of the <code>Vehicle</code> class</p>\n</blockquote>\n<p>Importance of inheritance:</p>\n<ul>\n<li>Reuse of code</li>\n<li>Prevention of new bugs</li>\n<li>Reducing code size</li>\n<li>Code readability</li>\n</ul>\n<h2>Polymorphism</h2>\n<p>It means one name many forms. Polymorphism manifests itself by having multiple methods all with the same name, but slightly different functionality. It is further of two types:</p>\n<ul>\n<li><em>Static (or compile-time) polymorphism</em> is achieved using method overloading</li>\n<li><em>Dynamic(or runtime) polymorphism</em> using method overriding.</li>\n</ul>\n<h3>Static polymorphism (or compile-time)</h3>\n<p>A method having same name can have multiple implementations, depending upon the argument(s) passed to it. For example, there can be three methods called add(int x, int y), add(float x, float y) and add(String x,String y). The compiler decides at compile time which method will be called by looking at the signature of the called method.</p>\n<pre><code class=\"language-Java\">public class StaticPoly{\n  public static void main(String[] args){\n    int xInt = 5;\n    int yInt =4;\n    String xStr = \"5\";\n    String yStr = \"4\";\n    float xFloat = 5.0;\n    float yFloat = 4.0;\n\n    System.out.println(add(xInt, yInt)); //output 9\n    System.out.println(add(xFloat, yFloat)); // output 9.0\n    System.out.println(and add(xStr,yStr)); //output \"9\"\n  }\n\n  public static int add(int x, int y){\n    return x+y;\n  }\n  public static float add(float x, float y){\n    return x+y;\n  }\n  public static String add(String x,String y){\n    int result = Integer.parseInt(x) + Integer.parseInt(y);\n    return String.valueOf(result);\n  }\n}\n</code></pre>\n<blockquote>\n<p>Demonstration of static polymorphism or method overloading</p>\n</blockquote>\n<h3>Dynamic polymorphism</h3>\n<p>A subclass may override a superclass method for more specific behaviour. The decision of which method to call is made at runtime. The calling code may declare the object to be of parent type. At runtime, depending upon the actual type of the object, the correct method will be invoked. An example may be of open() method for superclass Document. The subclasses doc and xls both override open() method. But it may not be known beforehand which document will be opened. At runtime, depending upon the object on which open() is called, the correct Document object's open() method will be invoked.</p>\n<p>Method overriding allows a subclass to override a specific implementation of a method that is already provided by one of its super-classes.</p>\n<pre><code class=\"language-Java\">public class Complex\n{\n    private int real;\n    public int Real\n    private int imaginary;\n\n    public Complex(int real, int imaginary){\n        this.real = real;\n        this.imaginary = imaginary;\n    }\n    public int getReal(){\n      return real;\n    }\n\n    public int getImaginary(){\n      return imaginary;\n    }\n\n    public static Complex operator +(Complex c1, Complex c2){\n        return new Complex(c1.Real + c2.Real, c1.Imaginary + c2.Imaginary);\n    }\n\n    public override string ToString(){\n        return (String.Format(\"{0} + {1}i\", real, imaginary));\n    }\n}\n</code></pre>\n<blockquote>\n<p>This class has one overridden method named ToString, which overrides the default implementation of the standard ToString method to support the correct string conversion of a complex number.</p>\n</blockquote>\n<pre><code class=\"language-Java\">public class DyanamicPoly{\n  public static void main(String[] args){\n  Complex num1 = new Complex(5, 7);\n  Complex num2 = new Complex(3, 8);\n\n  // Add two Complex numbers using the overloaded plus operator\n  Complex sum = num1 + num2;\n\n  // Print the numbers and the sum using the overriden ToString method\n  System.out.println(\"({0}) + ({1}) = {2}\", num1, num2, sum);\n  }\n}\n</code></pre>\n<h1>Conclusion</h1>\n<p>A good objecto oriented software follows these principles to the letter. These principles make your code easier to read, understand and also are effective when it comes to debugging and upgrading. They also make your code smaller, as you end up writing less code.</p>","id":"54d943e7-ff13-5439-ae6c-7b6bee4f5f5a","timeToRead":7,"frontmatter":{"title":"The 4 Principles of OOP","subtitle":"Principles governing OOP","excerpt":"For a program to be said to be object oriented, some principles have to be followed. These principles are crucial to enable the said program to be effective in order to be able to meet the needs the program was designed for.","path":"/tech/principles-of-oop","category":"tech","date":"June 03, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"principles-of-oop.jpg","thumbnail":"principles-of-oop.jpg","teaser":"principles-of-oop.jpg","credit":null,"creditlink":null},"tags":["oop","oop principles","objects","encapsulation","abstraction","interfaces","polymorphism"],"published":true}}}}}