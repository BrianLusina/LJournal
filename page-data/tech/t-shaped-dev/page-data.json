{"componentChunkName":"component---src-templates-blogs-blog-post-jsx","path":"/tech/t-shaped-dev","result":{"data":{"markdownRemark":{"html":"<p>Gone are the days of clear definitions of responsibility, at least in terms of technology and developing software. These are not the times when companies and businesses have clearly defined roles for their employees such that everyone is only closed to the skill set that they deem to be the most proficient in. These are the times when one role for an employee is never going to be enough, or rather is never going to be the case, especially not with how the world is evolving.</p>\n<p>No more are the days where web developers, designers, application programmers and database administrators stick to one predefined role each sitting in their own little area worrying about only their little part of the puzzle with clear definitions of responsibility. This venerable model heralded the age of web and app development, but it also contained the seeds of its own destruction, creating a world of silos, isolated and closed knowledge – a world of “not my problem”.</p>\n<p>As these complex systems have matured the effort, and the risks, to change a product have become significant and difficult to achieve. As this era, and the solutions built around it, draws to an end, something new awaits.</p>\n<p>The web developer jobs of today, the trendsetters and game changers, do not push bottlenecks through waterfalls. From tech startup to large-scale enterprise, the skills to succeed and adapt require a different mindset.\nThe modern developer requires clear methodologies to work with, a supportive organisational culture and tools that automate the simple tasks. This cultural change does not just apply to software developers – business leaders drive this change and provide the tools for their organisation to thrive.</p>\n<p>To achieve this way of working you need a more rounded IT professional, or what the industry refers to as a 'T-shaped developer'. A T-shaped developer has one or more deep skill-sets of knowledge complemented with broad generalist knowledge across an entire solution.\nSometime known as full-stack developers, these rounded individuals are the most in-demand devs – in a modern world that wants staff who can do front end, can make middleware sing and utilise the terminal on their chosen operating system like a ninja, and knows how to test.</p>\n<p>This sounds like the perfect developer. I mean they can build anything with anything that solves anything and passes any test. Sounds like coding 'god'. However unreal this sounds this is becoming the new norm as the world of tech continually evolves demanding more and more developers to up their game and improve their knowledge base.</p>\n<p>Why these developers are called T-Shaped is becase the vertical line of the T represents the depth of expertise in a field while the horizontal line represents the breadth of knowledge.</p>\n<p>In as much as this may sound like being an expert in a particular programming language and knowing a ton of others as well, it actually may have different meanings to others.</p>\n<p>It could be a developer who has a specialty (backend, frontend, or a particular technology stack) but is comfortable doing a wide range of development work, product management and design thinking. A backend developer needs to know how their work interacts with a front-end developer's. Additionally, they need to empathize with designers and end users. Often certain kinds of skills are grouped together and people who are really truly good in a specific niche need to understand how their niche effects things holistically.</p>\n<p>This does sound like one heck of a developer to have on your team. The job would be done well as they would be able to picth in on every aspect of the product being built. However, there is a case against hiring a T-Shaped developer. Some managers would not do this.</p>\n<p>The argument.</p>\n<p>You don’t want a team of T-shaped developers for two reasons.</p>\n<ol>\n<li>They lack creativity. If there is one deep expert on each topic, they have nobody to bounce ideas off and nobody to pull them back on track if they fixate on a bad design.</li>\n<li>Communication bottlenecks. The deep expert on each topic has to simplify his communication to his teammates to an extent that he cannot properly articulate his reasoning.</li>\n</ol>\n<p>The solution offered is to hire V-shaped developers as they have a peak competency at the tip of the V but have adequate skills in a number of adjacent areas ensuring that there is one expert and a least one sufficiently knowledgeable team member in every area.</p>\n<p>Despite these two reasons (and possibly more), there are companies that have grown rapidly due to T-Shaped developers. Some even don’t focus on finding someone who is an expert in a particular subject (an iOS or Android developer for example) but rather a full-stack developer that can be successful in contributing to a project end to end. This allows creation of small product teams with high responsibility and the flexibility to remain technologically agnostic. It also tends to naturally let the developer grow in different areas while still maintaining certain expertise.</p>\n<p>This may be one of the main reasons that the T-shaped developer will be the new norm and standard. After all, aren't programming languages, frameworks and technologies here to create solutions? It will not matter whether you solve a problem in one language and someone solves it using some framework and creates a new business with some other new piece of technology. It is even better if you can do all three, or rather be able to have a wide knowledge base that lets you cut across and learn.</p>","frontmatter":{"title":"T-Shaped Developers, the new norm","subtitle":"The T-shaped developers, A new species of developers","date":"September, 28, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"t-shaped.jpg","thumbnail":"t-shaped.jpg","teaser":"t-shaped.jpg","credit":null,"creditlink":null},"path":"/tech/t-shaped-dev","tags":["software","development","tech"],"excerpt":"Gone are the days of clear definitions of responsibility, at least in terms of technology and developing software. These are not the times when companies and businesses have clearly defined roles for their employees such that everyone is only closed to the skill set that they deem to be the most proficient in. These are the times when one role for an employee is never going to be enough, or rather is never going to be the case, especially not with how the world is evolving"}}},"pageContext":{"prev":{"html":"<p>JavaScript is one of the most powerful languages in the current era and it is quickly gaining ground. What makes it powerful is its dynamic nature and ability to manipulate the DOM. This manipulation is at the heart of the modern, interactive web. Unfortunately, it is also a lot slower than most JavaScript operations.</p>\n<p>This is made worse by the fact that most JavaScript frameworks update the DOM much more than they have to.</p>\n<p>As an example, let's say that you have a list that contains ten items. You check off the first item. Most JavaScript frameworks would rebuild the entire list. That's ten times more work than necessary! Only one item changed, but the remaining nine get rebuilt exactly how they were before.</p>\n<p>Rebuilding a list is no big deal to a web browser, but modern websites can use huge amounts of DOM manipulation. Inefficient updating has become a serious problem. This could prove slow for the user and thus grant bad User experience, making it seem as if the website is slow.</p>\n<p>To address this problem, the people at React popularized something called the virtual DOM.</p>\n<h2>Virtual DOM</h2>\n<p>For every DOM object, there is a corresponding \"virtual DOM object.\" This is a representation of a DOM object, like a lightweight copy.</p>\n<p>This has the same properties as a real DOM object, but it lacks the power to directly change what's on the screen.</p>\n<p>Manipulating the DOM is slow, but manipulating the virtual DOM is much faster, because nothing gets drawn onscreen. Think of manipulating the virtual DOM as editing a blueprint, as opposed to moving rooms in an actual house.</p>\n<p>When you render a JSX element, every single virtual DOM object gets updated.</p>\n<p>This sounds incredibly inefficient, but the cost is insignificant because the virtual DOM can update so quickly because nothing is drawn onscreen.</p>\n<p>Once the virtual DOM has updated, then React compares the virtual DOM with a virtual DOM snapshot that was taken right before the update.</p>\n<p>By comparing the new virtual DOM with a pre-update version, React figures out exactly which virtual DOM objects have changed. This process is called <strong>diffing.</strong></p>\n<p>Once React knows which virtual DOM objects have changed, then React updates those objects, and only those objects, on the real DOM. In our example from earlier, React would be smart enough to rebuild your one checked-off list-item, and leave the rest of your list alone.</p>\n<p>This makes a big difference! React can update only the necessary parts of the DOM. React's reputation for performance comes largely from this innovation.</p>\n<p>In summary, here's what happens when you try to update the DOM in React:</p>\n<ol>\n<li>The entire virtual DOM gets updated.</li>\n<li>The virtual DOM gets compared to what it looked like before you updated it.</li>\n<li>React figures out which objects have changed.</li>\n<li>The changed objects, and the changed objects only, get updated on the real DOM</li>\n<li>Changes on the real DOM cause the screen to change.</li>\n</ol>","id":"da7d7200-350b-54d9-899e-2626c6dd06c6","timeToRead":2,"frontmatter":{"title":"The Virtual DOM with React","subtitle":"virtual DOM manipulation with ReactJS","excerpt":"JavaScript is one of the most powerful languages in the current era and it is quickly gaining ground. What makes it powerful is its dynamic nature and ability to manipulate the DOM. This manipulation is at the heart of the modern, interactive web. Unfortunately, it is also a lot slower than most JavaScript operations.","path":"/tech/virtualdom","category":"tech","date":"October 09, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"virtualdom.png","thumbnail":"virtualdom.png","teaser":"virtualdom.png","credit":"Slides.com","creditlink":"http://slides.com/brandonkonkle/exploring-virtual-dom/"},"tags":["virtualdom","reactjs","javascript"],"published":true}},"next":{"html":"<p>Android component is simply a piece of code that has a well defined life cycle. e.g. Activity, Reciever, Service. The core building blocks or fundamental components of Android are:</p>\n<ol>\n<li>Receivers</li>\n<li>Activities</li>\n<li>Views</li>\n<li>Intents</li>\n<li>Services</li>\n<li>Content Providers</li>\n<li>Fragments</li>\n<li>AndroidManifest.xml</li>\n</ol>\n<h2>Activity</h2>\n<p>This is simply a class that represents a single screen. They dictate the UI and handle user interaction to the smart phone screen.</p>\n<h2>Services</h2>\n<p>Background process that can run for a long time. They are of 2 types:</p>\n<ul>\n<li><strong>Local service</strong>: accessed from within the application.</li>\n<li>**Remote service **: accessed remotely from other applications running on the same device.</li>\n</ul>\n<p>A service might play music in the background while the user is in a different application, or it might fetch data over the network without blocking user interaction with an activity. A service is implemented as a subclass of <code>Service</code> class.</p>\n<h2>Broadcast Recievers</h2>\n<p>They handle communication between Android OS and applications. They simply respond to broadcast messages from other applications or from the system. For example, apps can initiate broadcasts to let other applications know that some data has been downloaded to the device and is available for them to use, so this is broadcast receiver which will intercept this communication and will initiate appropriate action.</p>\n<p>A broadcast receiver is implemented as a subclass of <code>BroadcastReceiver</code> class and each message is broadcaster as an <code>Intent</code> object.</p>\n<pre><code class=\"language-java\">    public class MyReciever extends BroadcastReceiver{\n        public void onReceive(context,intent){\n\n        }\n    }\n</code></pre>\n<h2>Content Provider</h2>\n<p>Content Providers provide content to applications by encapsulating data and provide it to applications through a single ContentResolver interface.\nThey are required if you need to share data between multiple applications, e.g. contacts data is used by multile applications and mist be stored in a content provider.</p>\n<h2>View</h2>\n<p>A view is the UI element such as button, lable, Text field, Image.</p>\n<h2>Intent</h2>\n<p>Used to invoke components. It is mainly used to:</p>\n<ul>\n<li>Start a service</li>\n<li>Launch an activity</li>\n<li>Display a web page</li>\n<li>Display a list of contacts</li>\n<li>Broadcast a message</li>\n<li>Dial a phone</li>\n</ul>\n<p>Basically they are messages wiring components together.</p>\n<h2>Fragment</h2>\n<p>These are like part of an Activity. An activity can display one or more fragments on the screen at the same time.</p>\n<h2>AndroidManifest.xml</h2>\n<p>Contains information about activites, content providers, permissions. It is the configuration file for the application.</p>\n<h2>Resources</h2>\n<p>External elements such as strings, constants and drawable pictures.</p>","id":"a6836208-9627-5e83-a886-07b5410227ab","timeToRead":2,"frontmatter":{"title":"Android Building Blocks","subtitle":"Android components and building Blocks","excerpt":"Android component is simply a piece of code that has a well defined life cycle. e.g. Activity, Reciever, Service. The core building blocks or fundamental components of Android","path":"/tech/building-blocks-android","category":"tech","date":"September 25, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"android-core-building-blocks.png","thumbnail":"android-core-building-blocks.png","teaser":"android-core-building-blocks.png","credit":null,"creditlink":null},"tags":["Android","Serializable","Parcelable"],"published":true}}}}}