{"componentChunkName":"component---src-templates-blogs-blog-post-jsx","path":"/tech/object-immutability-js","result":{"data":{"markdownRemark":{"html":"<p>What is immutabilty? I see this word being thrown around a lot, especially in the software industry, where other phrases such as <strong>clean code</strong> and <strong>code quality</strong> are constantly being emphasized. What is it? Why is it necessary to understand what it is and how to use it?</p>\n<p>In this post, I shall write briefly about what it is and how to use it. This will not use any JS framework, but will be pure JavaScript. This is because this is applicable in any JavaScript context(read framework). Frameworks and libraries come with their own rules of immutability. How do they creat these rules arround immutability?</p>\n<blockquote>\n<p>Immutability means <em>not capable or susceptible to change</em></p>\n</blockquote>\n<p>In other words, not capable of change. In object oriented programming and functional programming, this means that an immutable object is an <em>object whose state cannot be modified after it is created</em>. Objects in general have state and behaviour. When an object is immutable, the state and behaviour can not change.</p>\n<p>This has several benefits. First of all ensures this ensures that there are no intended side-effects and we know exactly what an object's state and behaviour is at any given time within the application's lifecycle. It makes us more confident when writing our code, as we know exactly what to expect from an immutable object.</p>\n<p>Of course, this also means that it's state can not be modified and can also be an issue in the case where we do need to alter it's current state. This is why we create a copy of the object and alter the state of the copy instead of the original object(A pattern that is used in <a href=\"http://redux.js.org\">Redux</a>).</p>\n<p>Before delving into that, let us see how to create object immutability in plain ol' JavaScript:</p>\n<pre><code class=\"language-javascript\">let johnDoe = {\n    firstName: \"John\",\n    lastName: \"Doe\",\n    email: \"johndoe@email.com\",\n    age: 50\n}\n\nconst frozenJohnDoe = Object.freeze(johnDoe);\n\nfrozenJohnDoe.age = 33;\n// Throws an error in strict mode\n\nfrozenJohnDoe.age;\n// expected output: 50\n</code></pre>\n<blockquote>\n<p>An example of immutabililty in JavaScript</p>\n</blockquote>\n<p>Above, we have a <code>johnDoe</code> object with some properties (<code>firstName</code>, <code>lastName</code>, <code>email</code> and <code>age</code>). These properties at time of create are mutable(can be changed). To make this object immutable, we use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\">Object.freeze</a>. A very handy function that <em>freezes</em> the object. Therefore, we can not alter any of its properties on the following lines.</p>\n<p>This means nothing can be added or removed from the frozen object. Our <code>johnDoe</code> object is now frozen and can never be able to alter his age, sorry John :(. This gives us a sense of what to always expect when we use the frozen object. We can always be guaranteed that his age will be 50 when we use it.</p>\n<p>It is important to note that when not running in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\">strict mode</a>, it will appear as if mutation of the object's properties can be done. Here is an example:</p>\n<pre><code class=\"language-javascript\">// still using our johnDoe object above\n> johnDoe.age = 5\n5\n> johnDoe\n{ firstName: 'John',\n  lastName: 'Doe',\n  email: 'johndoe@email.com',\n  age: 50 }\n</code></pre>\n<blockquote>\n<p>While running in a Node REPL</p>\n</blockquote>\n<p>While trying to set the age of the object to 5, no error is thrown and thus it will appear as if a successful mutation actually occured, but in reality, the properties remain the same, age has not been altered.</p>\n<p>Data properties of frozen objects can not be changed, configurable attributes are set to false. This is what sets the immutability of the object. There is a problem though. What if my object's properties' values were other objects? Are those immutable to? An example:</p>\n<pre><code class=\"language-javascript\">> let shoppingCart = {\n    fruits: {\n        banana: \"banana\",\n        apple: \"apple\",\n        oranges: \"oranges\"\n    },\n    bread: {\n        brown: \"brown bread\",\n        white: \"white bread\"\n    }\n    price: 50\n}\n// freeze our object, we do not need to save a copy of it. As the function returns our initial object and NOT a fronzen copy\n> Object.freeze(shoppingCart)\n\n// fruits remains as is\n> shoppingCart.fruits\n{\n    banana: \"banana\",\n    apple: \"apple\",\n    oranges: \"oranges\"\n}\n// attempt to mutate the fruits object's properties\n> shoppingCart.fruits.banana = \"very ripe banana\"\n'very ripe banana'\n\n> shoppingCart.fruits\n{\n    banana: \"very ripe banana\",\n    apple: \"apple\",\n    oranges: \"oranges\"\n}\n</code></pre>\n<blockquote>\n<p>Again, running in a Node REPL</p>\n</blockquote>\n<p>As, you can see from above, the <code>fruits</code> object's values can be mutated, yet it is in a frozen object <code>shoppingCart</code>. This is known as <strong>shallow freeze</strong>. This means that the immediate properties of <code>shoppingCart</code> have been made immutable, however, if the values of said properties are objects, they are not frozen.</p>\n<p>For the fruits object to also have the same level of immutability, they have to also be frozen:</p>\n<pre><code class=\"language-javascript\">> let fruits = {\n    banana: \"banana\",\n    apple: \"apple\",\n    oranges: \"oranges\"\n};\n> Object.freeze(fruits);\n\n> let bread = {\n    brown: \"brown bread\",\n    white: \"white bread\"\n}\n> Object.freeze(bread);\n\n> let shoppingCart = {\n    fruits,\n    bread,\n    price: 50\n};\n\n// freeze our object, we do not need to save a copy of it\n> Object.freeze(shoppingCart)\n\n// fruits remains as is\n> shoppingCart.fruits\n{\n    banana: \"banana\",\n    apple: \"apple\",\n    oranges: \"oranges\"\n}\n// attempt to mutate the fruits object's properties\n> shoppingCart.fruits.banana = \"very ripe banana\"\n'very ripe banana'\n\n> shoppingCart.fruits\n{\n    banana: \"banana\",\n    apple: \"apple\",\n    oranges: \"oranges\"\n}\n</code></pre>\n<blockquote>\n<p>Now we have immutability for our fruits :)</p>\n</blockquote>\n<p>Of course, this can be a pain when dealing with objects that have properties that have other objects and those objects have properties that have other objects and so forth. Creating a recursive function that freezes all properties of the object that are objects themselves will save us the time and ensure that we attain <strong>deep freeze</strong> on our object.</p>\n<p>We have to ensure that the recurstion does not end up in a cycle though.</p>\n<pre><code class=\"language-javascript\">const deepFreeze = object => {\n    // get the property names\n    let propNames = Object.getOwnPropertyNames(object);\n\n    // freeze properties before freezing self\n    for(let name of propNames){\n        let value = object[name]\n\n        object[name] = value &#x26;&#x26; typeof value === \"object\" ?\n            deepFreeze(value) : value\n    }\n\n    // freeze self\n    return Object.freeze(object);\n}\n</code></pre>\n<blockquote>\n<p>This function will recursively freeze all properties of an object that are objects.</p>\n</blockquote>\n<p>We can now use this function as below:</p>\n<pre><code class=\"language-javascript\">var collection = {\n    internal: {\n        a: null\n    }\n};\n\ndeepFreeze(collection);\n\n// fails silently in non-strict mode\ncollection.internal.a = 'anotherValue';\ncollection.internal.a; // null\n</code></pre>\n<p>You can check whether out objects are frozen with <code>Object.isFrozen</code>, this takes in an object and checks whether the configurable properties have been set to false and returns a boolean value (true, if the object is frozen, false otherwise).</p>\n<p><strong>Object.freeze</strong> also works on arrays:</p>\n<pre><code class=\"language-javascript\">let a = [0];\nObject.freeze(a); // The array cannot be modified now.\n\na[0]=1; // fails silently\na.push(2); // fails silently\n\n// In strict mode such attempts will throw TypeErrors\nfunction fail() {\n  \"use strict\"\n  a[0] = 1;\n  a.push(2);\n}\n\nfail();\n</code></pre>\n<h2>The End</h2>\n<p>Next time you are writing a Javascript module and you are exposing objects that other developers may use, make sure that they have the exact needed permissions to alter your objects, otherwise they may broke your code without even realising it. Make sure also to document it.</p>","frontmatter":{"title":"Object Immutability In JavaScript","subtitle":"Creating object immutability in JavaScript","date":"September, 18, 2018","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"object-freeze.png","thumbnail":"object-freeze.png","teaser":"object-freeze.png","credit":null,"creditlink":null},"path":"/tech/object-immutability-js","tags":["JavaScript","Objects"],"excerpt":"Creating object immutability in JavaScript has its advantages when it comes to programming, it ensures that objects retain their properties and has no unexpected side-effects. How to we create this immutability in JavaScript?"}}},"pageContext":{"prev":{"html":"<p>When I first met you, I didn't know how to talk to you, hell, I did not have any pick-up lines(I always found them dumb, I honestly still do). To me, you were a stranger, but I wanted to know you, get the chance to explore your thoughts, hates, likes, dislikes. Get to know who you truly were. I have to be honest, I did not know how to talk to girls, I tried so many tactics and I had always failed. It was almost as if I was studying for an exam. You never know what is coming in the test, but you know you want to pass it. Anyway, I digress. I first saw you and thought, wow, I want to actually just get to know you, just talk for hours and not feel any pressure for some grand gesture to win you over. Like those Hollywood movies. I hate them, honestly. They come with so many expectations on love, always as if love can be summed up in 2 hours of screen play.</p>\n<p>I always ran out of things to say, probably because I wanted to impress you and just said things over and over differently. You laughed and smiled slightly. You probably knew what was going on in my head, but, the calm face you kept was something else. It made me feel confident, not enough to go fight of bears for you, but enough to do silly things without a care in the world.</p>\n<p>Do I sometimes wonder whether life would have paired us differently? All the time. Every day, I ask myself(the universe, maybe), what is it that happened to make us meet? Star alignment? Cosmic disruption? Celestial bodies colliding? I did not know. What I did know, was that I was willing to give this a shot. Maybe I would fail horribly. You probably told your girlfriends about me and they just nodded their heads in response and asked you \"why him again?\". At least, that is how I hope it went.</p>\n<p>You remember the time we went for a picnic? I recall it like it was yesterday. I was nervous, sweaty and panicking on the inside. I did not know how to even act. But, somehow, all this was on the inside, including the sweating, thank God. That would have been embarassing. We laughed, smiled, made fun of each other and got lost in each other. I loved that day. It was away from all the noise of the city. All the struggles and doubt. I was happy. Probably, happier than I usually am.</p>\n<p>I was not only happy because I got a chance to spend the day with this wonderful human being that decided to block out her day just for me, but also happy that despite my numerous flaws, you picked me out of a bunch of guys, and I know there were a bunch of guys, I mean who would not have wanted to get a chance to be with you? I was not the smartest in a room, there are times I asked(still ask) the dumbest questions. I tend to be a bit slow to react to some things happening around me. Maybe, because I overthink the situation and start drawing parallel posibilities. You would not want to be in my head actually. And that is not something that I would ever boast about. I even almost lost you because I was in too deep in my head instead of being in the present. Honestly, that is my biggest flaw and for a long time, I have been working on that. Thank you for being so patient with me. You always have been. But, there was a time you were not always as patient and I get that. You were so mad at me. And for some reason that made me realize that I wanted to fight for you even more. It was at that moment that I realized I want to only be with you and only you.</p>\n<p>I guess what I am saying here is that no matter what happens, I hope you know how deeply I care. How much love I have for you. I would fight for you even when I stood no chance of winning, the thought of losing you would be more devastating than actually losing the fight. As I said, I am no poet, so probably around here, would be a simile or metaphor to something that would communicate better what I feel on the inside. Regardless, I will be here for you, on your side till time ends.</p>","id":"56869d7b-2031-5bdc-b0ac-8778c73b7b7f","timeToRead":3,"frontmatter":{"title":"An open letter to my wife","subtitle":"Dear beloved,","excerpt":"Ah, my beloved, that is how I would start my letter if I were in the 60s, but modern society has us all thinking differently. I probably would not have written a letter(I am no poet). This would have come in the form of a text message probably. But, let us be a little old school.","path":"/life/open_letter_to_my_wife","category":"life","date":"May 06, 2019","author":{"name":"Brian Lusina","link":null,"avatar":"brian_lusina.jpg"},"image":{"feature":null,"thumbnail":null,"teaser":null,"credit":null,"creditlink":null},"tags":["Live","Love","Life"],"published":true}},"next":{"html":"<p>Learning to code is never an easy endevour, especially in the world of technology, where there always seems to be something new that you must learn or know in order to keep up with the trends of the 21st century. It is such a fluid and ever changing world that you can find yourself lost in the pursuit of knowledge.</p>\n<p>Despite this, it is still a pursuit that keeps one growing and learning. These are the most important things when starting out on a journey to learn technology and dive into its depths. Sometimes the journey is full of twists and turns, long nights and early mornings, short weekends and long weekdays, even rough days and good ones, but overall, what makes me most happy is the ability to be able to create something that betters other people's lives. Makes them easier, makes them focus on what is most important in life instead of focusing on the menial tasks that we have the ability to automate.</p>\n<p>I remember when I wrote my first lines of code. I had just finished high school and had a lot of free time on my hands before joining campus (8 months). With this amount of time at one's disposal, it is easy to get lost in all that is happening around without proper planning. I enrolled for the usual classes everyone enrolled for after finishing high shool; Computer classes(Computer package classes, Driving classes, Accounting classes, etc.). I wanted to keep busy, so this gave me the chance to stay out of the house and not lose my mind. Of course all these classes only lasted 4 months, so the extra 4 months was spent attending bootcamps that span 3 weeks or less. It is during that time, that I discovered that one could actually create programs with code.</p>\n<p>The irony of it all was that my curiosity for technology was not inspired at all by attending computer classes, it was in fact inspired by a program that taught people how to type (mostly used by secretaries to train and improve their typing speed). I was curious as to how this simple program knew the keys I typed in and how it measured the speed at which I typed words. It was magic to me. I wanted to understand how it was built, I was <em>waay</em> beyond the why of it all (Improve people's typing speed), I wanted to know <strong>how</strong>.</p>\n<p>So, I dove into Google and typed in <em>how to build a computer program</em>, and waited for the search results to guide me to an answer. Of course, then, there were now sites like <a href=\"https://www.udemy.com/\">Udemy</a>, <a href=\"https://www.udacity.com\">Udacity</a>, <a href=\"http://www.codecademy.com\">Codecademy</a>, etc, so the search was even more difficult. I stumbed upon <a href=\"https://en.wikipedia.org/wiki/Visual_Basic\">Visual Basic</a> and I began downloading all the required tutorials I needed to understand <strong>how</strong> one builds a program, how to start, what you need, all the required tools that should be at your disposal and I just started.</p>\n<p>Fast forward 3 weeks later, after a lot of trial and error and the first program I built was a simple Trivia which was basically a bunch of <em>if else</em> statements that checked for your answer. I didn't care that it was horrible, looked bad or was slow, I just wanted to build something, to see it used and to understand what it took to build a program that did something and made someone's life better (in this case help you become better at trivia questions). It worked! My first ever program! Too bad there was no way of sharing it with the world (because I had no idea how to). So I explored further into how do people share what they create and how do other people then download and install these programs and that lead me to networking and how the internet works(for some reason also lead me to how viruses work, go figure).</p>\n<p>All this digging around for information made me realize how technology had the potential to change my life as well. I was learning, growing, hungry...for knowledge. I simply wanted to understand, I wanted to know the <strong>why</strong> of it all.</p>\n<p>Technology has had a major positive impact ever since. Being part of teams that build highly scalable applications has not only brought out the best in me, but has also shown me what I still need to learn and what I still need to do to get better.</p>\n<p>A couple of things that I have learned along the way:</p>\n<ol>\n<li><strong>Have zero tolerance for the victim mentality</strong>. I have learned to become deliberate about regularly upskiling myself through reading books, learning new skills, meeting and interacting with new people in different fields and industry. Of course, you will not learn everything all at once. There are times where you will fail and will fail hard, it is okay. It is part of the journey. Instead of complaining that it is difficult and hard to understant algorithms and data structures, design patterns and frameworks, take the time to deliberately want to learn and understand that patience is key in this journey.</li>\n<li><strong>Be very deliberate about where you are and understand the opportunity cost of where you are</strong>. Understand your true value including your weaknesses. Focus on up-scaling yourself. Realize that by choosing this, you have foregone other opportunities, that this is the journey you want to be on, this means that you need to make an effort to understand all that comes with it; beyond the code. This means understanding your user(who you are building for) and why you are building it.</li>\n<li><strong>Where you work has a major impact on your work-life harmony</strong>. If you work for a company that re-inforces you and you konow your work will create value, you will remain satisfied and extremely motivated that you hardly feel burn out. This is important especially in a tech field, where there is an ever changing need for how products serve customers, you need to be in a place that gives you the opportunity to balance your work and life in a way that does not sacrfice one for the other. This will leave you wanting and yearning more and will make you happier.</li>\n<li><strong>Realize that technologies are tools used to build products and they are not to be mistaken with the actual product</strong>. A lot of times, developers tend to argue and debate over what is the most popular tool/language to use out there and will tend to make this the most important thing when building an actual product. I understand that developers have their preferences and for good reasons (I included). However, what I have learnt is that treating these preferences as tools instead of an actual product helps you move much more quickly in the industry. Realize that tools are used based on the use-case. You would not use a hammer to cut down a tree, right? Or use a chainsaw sandpaper. Even though you like your hammers, you know you can't use them all the time. So, pick the best tool for the job. The sooner you realize this the faster you can learn and build better products. This will help you to become more diverse and help in exploring posibilities of even building your own tools.</li>\n</ol>","id":"effd9339-9e25-527f-9de7-e29bfd76b0db","timeToRead":5,"frontmatter":{"title":"Influence learning tech has had on my life and career","subtitle":"Learning technology and its impact on my life and career","excerpt":"Technology has been a part of my life for a very long time, not only making it better and easier, but also giving me an opportunity to learn new things. Being able to create, build and innovate using technology makes it have an even bigger impact on my life and career.","path":"/life/influence-tech-on-career","category":"life","date":"August 21, 2018","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"influence_learning_tech.jpg","thumbnail":null,"teaser":"influence_learning_tech.jpg","credit":"Unsplash","creditlink":"https://unsplash.com/@alesnesetril"},"tags":["Career","Technology","Life"],"published":true}}}}}