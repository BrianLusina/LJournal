{"componentChunkName":"component---src-templates-blogs-blog-post-jsx","path":"/tech/virtualdom","result":{"data":{"markdownRemark":{"html":"<p>JavaScript is one of the most powerful languages in the current era and it is quickly gaining ground. What makes it powerful is its dynamic nature and ability to manipulate the DOM. This manipulation is at the heart of the modern, interactive web. Unfortunately, it is also a lot slower than most JavaScript operations.</p>\n<p>This is made worse by the fact that most JavaScript frameworks update the DOM much more than they have to.</p>\n<p>As an example, let's say that you have a list that contains ten items. You check off the first item. Most JavaScript frameworks would rebuild the entire list. That's ten times more work than necessary! Only one item changed, but the remaining nine get rebuilt exactly how they were before.</p>\n<p>Rebuilding a list is no big deal to a web browser, but modern websites can use huge amounts of DOM manipulation. Inefficient updating has become a serious problem. This could prove slow for the user and thus grant bad User experience, making it seem as if the website is slow.</p>\n<p>To address this problem, the people at React popularized something called the virtual DOM.</p>\n<h2>Virtual DOM</h2>\n<p>For every DOM object, there is a corresponding \"virtual DOM object.\" This is a representation of a DOM object, like a lightweight copy.</p>\n<p>This has the same properties as a real DOM object, but it lacks the power to directly change what's on the screen.</p>\n<p>Manipulating the DOM is slow, but manipulating the virtual DOM is much faster, because nothing gets drawn onscreen. Think of manipulating the virtual DOM as editing a blueprint, as opposed to moving rooms in an actual house.</p>\n<p>When you render a JSX element, every single virtual DOM object gets updated.</p>\n<p>This sounds incredibly inefficient, but the cost is insignificant because the virtual DOM can update so quickly because nothing is drawn onscreen.</p>\n<p>Once the virtual DOM has updated, then React compares the virtual DOM with a virtual DOM snapshot that was taken right before the update.</p>\n<p>By comparing the new virtual DOM with a pre-update version, React figures out exactly which virtual DOM objects have changed. This process is called <strong>diffing.</strong></p>\n<p>Once React knows which virtual DOM objects have changed, then React updates those objects, and only those objects, on the real DOM. In our example from earlier, React would be smart enough to rebuild your one checked-off list-item, and leave the rest of your list alone.</p>\n<p>This makes a big difference! React can update only the necessary parts of the DOM. React's reputation for performance comes largely from this innovation.</p>\n<p>In summary, here's what happens when you try to update the DOM in React:</p>\n<ol>\n<li>The entire virtual DOM gets updated.</li>\n<li>The virtual DOM gets compared to what it looked like before you updated it.</li>\n<li>React figures out which objects have changed.</li>\n<li>The changed objects, and the changed objects only, get updated on the real DOM</li>\n<li>Changes on the real DOM cause the screen to change.</li>\n</ol>","frontmatter":{"title":"The Virtual DOM with React","subtitle":"virtual DOM manipulation with ReactJS","date":"October, 09, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"virtualdom.png","thumbnail":"virtualdom.png","teaser":"virtualdom.png","credit":"Slides.com","creditlink":"http://slides.com/brandonkonkle/exploring-virtual-dom/"},"path":"/tech/virtualdom","tags":["virtualdom","reactjs","javascript"],"excerpt":"JavaScript is one of the most powerful languages in the current era and it is quickly gaining ground. What makes it powerful is its dynamic nature and ability to manipulate the DOM. This manipulation is at the heart of the modern, interactive web. Unfortunately, it is also a lot slower than most JavaScript operations."}}},"pageContext":{"prev":{"html":"<p>No one likes errors, especially when they occur frequently and unchecked. As developers we constantly check for errors and not that the program is running as expected, but rather it is handling the errors as it should. There is not perfect program that will never encounter errors, the best programs are the ones that handle <strong>exceptions</strong> really well and keep the user happy and oblivous of the errors being handled. It is important that errors are handled appropriately and also that they give the user a meaningful message. Unfortunately, you never know that kind of errors you may encounter in your program. Some are caused by the code you write, others by external factors that your program has nothing to do with, like a poor internet connection or hardware malfunction. In both cases, your program should be able to handle these exceptions and keep running or exit, whichever suits you need at the time.</p>\n<p>Of course, before delving deeper into the exceptions, we should all be on the same page as to what exceptions are.</p>\n<p><strong>Exceptions</strong> as defined by Java Documentation is an event, which occurs during the execution of a program, that disrupts the normal flow of the program's instructions. This disruption of the normal flow of the program should be handled with care and enable the user to keep interacting with the program despite this interruption, otherwise you will have poor ratings, no one wants that.</p>\n<p>I will not delve into details about how a program determines an error and normal flow of a program. I will dive immediately into which type of exceptions we should look out for.</p>\n<ol>\n<li>\n<p>Checked Exception</p>\n<p>Say, you are creating a program that requires user input, such as their name, phone number, email and such, for validation purposes. Maybe you need these inputs for authorization or for sign up to your platform. It is possible that the user will provide an invalid email address and as such you will need to validate these parameters before passing them to a function or class that will handle the authentication. Normally, if you are developing for Android it will be easy to validate this field in the XML layout, but what if you are checking with a server and you have to fetch a response in order to proceed. If the response returns <em>Null</em> then you need to be able to handle such a response.</p>\n<p>A well-written program will catch this exception and notify the user of the mistake, possibly prompting for a correct email address if the email does not exist in the system's database.</p>\n</li>\n<li>\n<p>Error</p>\n<p>These are the kind of errors that will occur that are outside the application's scope of handling. These kind of errors may involve poor internet connection on the part of the user or maybe they are experiencing hardware failure. The application can not anticipate that it will happen as it may occur randomly. However, it should be able to catch this exception and notify the user of the failure to execute the program. In the example above, maybe in the middle of execution of request to ther server, after having validate the user credentials, the internet connection is abruptly cut and the user is not properly authenticated with the system, it is at this point that the application should notify the user of the problem, catch this expection and try again at a late time. It may make sense in some instances to print a stacktrace and exit the program.</p>\n</li>\n<li>\n<p>Runtime Exception</p>\n<p>These are exceptional conditions that are internal to the application, and that the application usually cannot anticipate or recover from. These type of errors are usually because of an improper use of an API or a logic error. If we use the abov example still, if a logic error causes <code>null</code> to be passed instead of a <code>username</code> then the method handling authentication will throw a <strong>NullPointerException</strong>. Now normally it may make sense to catch this exception and notify the user, but it makes even more sense to eliminate this bug completely and not pass null to the method or constructor of a class.</p>\n</li>\n</ol>\n<p>Now, you may have noticed something similar about the last two types of exceptions. Errors and runtime exceptions are collectively known as <strong>unchecked exceptions</strong> and this is because they do not need to be <em>caught</em> as much as the 1st type. This is normally because they could be caused by external factors that the app can not manage and it will reduce complexity and make more sense for the application to terminate and inform the user of the same. In other instances like in the third example about the logic error, it makes more sense to not pass in null to a constructor or method.</p>\n<p>Either way, it is important to give your user the best possible experience with your program and thus keep the user notified of any errors that may occur and thus give them the best experience.</p>","id":"19d640e0-9b50-5692-88e1-9f0410ad4fcb","timeToRead":3,"frontmatter":{"title":"Exception Handling and why you should care.","subtitle":"Try and catch that exception, keeping your user happy","excerpt":"No one likes errors, especially when they occur frequently and unchecked. As developers we constantly check for errors and not that the program is running as expected, but rather it is handling the errors as it should. There is not perfect program that will never encounter errors, the best programs are the ones that handle **exceptions** really well and keep the user happy and oblivous of the errors being handled","path":"/tech/exceptions","category":"tech","date":"October 26, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"exceptions-vs-errors.png","thumbnail":"exceptions-vs-errors.png","teaser":"exceptions-vs-errors.png","credit":"http://rypress.com","creditlink":"http://rypress.com/tutorials/objective-c/exceptions"},"tags":["exceptions","error-handling"],"published":true}},"next":{"html":"<p>Gone are the days of clear definitions of responsibility, at least in terms of technology and developing software. These are not the times when companies and businesses have clearly defined roles for their employees such that everyone is only closed to the skill set that they deem to be the most proficient in. These are the times when one role for an employee is never going to be enough, or rather is never going to be the case, especially not with how the world is evolving.</p>\n<p>No more are the days where web developers, designers, application programmers and database administrators stick to one predefined role each sitting in their own little area worrying about only their little part of the puzzle with clear definitions of responsibility. This venerable model heralded the age of web and app development, but it also contained the seeds of its own destruction, creating a world of silos, isolated and closed knowledge – a world of “not my problem”.</p>\n<p>As these complex systems have matured the effort, and the risks, to change a product have become significant and difficult to achieve. As this era, and the solutions built around it, draws to an end, something new awaits.</p>\n<p>The web developer jobs of today, the trendsetters and game changers, do not push bottlenecks through waterfalls. From tech startup to large-scale enterprise, the skills to succeed and adapt require a different mindset.\nThe modern developer requires clear methodologies to work with, a supportive organisational culture and tools that automate the simple tasks. This cultural change does not just apply to software developers – business leaders drive this change and provide the tools for their organisation to thrive.</p>\n<p>To achieve this way of working you need a more rounded IT professional, or what the industry refers to as a 'T-shaped developer'. A T-shaped developer has one or more deep skill-sets of knowledge complemented with broad generalist knowledge across an entire solution.\nSometime known as full-stack developers, these rounded individuals are the most in-demand devs – in a modern world that wants staff who can do front end, can make middleware sing and utilise the terminal on their chosen operating system like a ninja, and knows how to test.</p>\n<p>This sounds like the perfect developer. I mean they can build anything with anything that solves anything and passes any test. Sounds like coding 'god'. However unreal this sounds this is becoming the new norm as the world of tech continually evolves demanding more and more developers to up their game and improve their knowledge base.</p>\n<p>Why these developers are called T-Shaped is becase the vertical line of the T represents the depth of expertise in a field while the horizontal line represents the breadth of knowledge.</p>\n<p>In as much as this may sound like being an expert in a particular programming language and knowing a ton of others as well, it actually may have different meanings to others.</p>\n<p>It could be a developer who has a specialty (backend, frontend, or a particular technology stack) but is comfortable doing a wide range of development work, product management and design thinking. A backend developer needs to know how their work interacts with a front-end developer's. Additionally, they need to empathize with designers and end users. Often certain kinds of skills are grouped together and people who are really truly good in a specific niche need to understand how their niche effects things holistically.</p>\n<p>This does sound like one heck of a developer to have on your team. The job would be done well as they would be able to picth in on every aspect of the product being built. However, there is a case against hiring a T-Shaped developer. Some managers would not do this.</p>\n<p>The argument.</p>\n<p>You don’t want a team of T-shaped developers for two reasons.</p>\n<ol>\n<li>They lack creativity. If there is one deep expert on each topic, they have nobody to bounce ideas off and nobody to pull them back on track if they fixate on a bad design.</li>\n<li>Communication bottlenecks. The deep expert on each topic has to simplify his communication to his teammates to an extent that he cannot properly articulate his reasoning.</li>\n</ol>\n<p>The solution offered is to hire V-shaped developers as they have a peak competency at the tip of the V but have adequate skills in a number of adjacent areas ensuring that there is one expert and a least one sufficiently knowledgeable team member in every area.</p>\n<p>Despite these two reasons (and possibly more), there are companies that have grown rapidly due to T-Shaped developers. Some even don’t focus on finding someone who is an expert in a particular subject (an iOS or Android developer for example) but rather a full-stack developer that can be successful in contributing to a project end to end. This allows creation of small product teams with high responsibility and the flexibility to remain technologically agnostic. It also tends to naturally let the developer grow in different areas while still maintaining certain expertise.</p>\n<p>This may be one of the main reasons that the T-shaped developer will be the new norm and standard. After all, aren't programming languages, frameworks and technologies here to create solutions? It will not matter whether you solve a problem in one language and someone solves it using some framework and creates a new business with some other new piece of technology. It is even better if you can do all three, or rather be able to have a wide knowledge base that lets you cut across and learn.</p>","id":"399df0bd-b79b-5e5a-954d-2cd937b2efca","timeToRead":4,"frontmatter":{"title":"T-Shaped Developers, the new norm","subtitle":"The T-shaped developers, A new species of developers","excerpt":"Gone are the days of clear definitions of responsibility, at least in terms of technology and developing software. These are not the times when companies and businesses have clearly defined roles for their employees such that everyone is only closed to the skill set that they deem to be the most proficient in. These are the times when one role for an employee is never going to be enough, or rather is never going to be the case, especially not with how the world is evolving","path":"/tech/t-shaped-dev","category":"tech","date":"September 28, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"t-shaped.jpg","thumbnail":"t-shaped.jpg","teaser":"t-shaped.jpg","credit":null,"creditlink":null},"tags":["software","development","tech"],"published":true}}}}}