{"componentChunkName":"component---src-templates-blogs-blog-post-jsx","path":"/tech/big-o-notation","result":{"data":{"markdownRemark":{"html":"<p>Big O notation is used in Computer Science to describe the performance or complexity of an algorithm. Big O specifically describes the worst-case scenario, and can be used to describe the execution time required or the space used (e.g. in memory or on disk) by an algorithm.</p>\n<p>A function's Big-O notation is determined by how it responds to different inputs. How much slower is it if we give it a list of 1000 things to work on instead of a list of 1 thing?</p>\n<p>Consider this code:</p>\n<pre><code class=\"language-python\">def item_in_list(to_check, the_list):\n    for item in the_list:\n        if to_check == item:\n          return True\n    return False\n</code></pre>\n<p>If we call this function like <code>item_in_list(2, [1,2,3])</code>, it should be quick. We loop over each thing in the list and if we find the first argument to our function, return True. If we get to the end and we didn't find it, return False.</p>\n<p>The <em>\"complexity\"</em> of this function is <strong>O(n)</strong>. O(n) is read <em>\"Order of N\"</em> because the O function is also known as the Order function. which deals in <em>orders of magnitude</em>.</p>\n<p>\"Orders of magnitude\" is basically tells the difference between classes of numbers. The difference between 1,000 and 10,000 is pretty big (in fact, its the difference between a junker car and a lightly used one). It turns out that in approximation, as long as you're within an order of magnitude, you're pretty close.</p>\n<p>If we were to graph the time it takes to run this function above with different sized inputs (e.g. an array of 1 item, 2 items, 3 items, etc), we'd see that it approximately corresponds to the number of items in the array. This is called a <code>linear graph</code>. This means that the line is basically straight if you were to graph it.</p>\n<p>If, in the code sample above, our item was always the first item in the list, our code would be really fast! This is true, but Big-O is all about the <strong>approximate worst-case performance of doing something</strong>. The worst case for the code above is that the thing we're searching for isn't in the list at all. (Note: The math term for this is \"upper bound\", which means its talking about the mathematic limit of awfulness).</p>\n<p><img src=\"https://justin.abrah.ms/static/images/o_n__plot.png\" alt=\"image\" title=\"Run Time Characteristics of an O(n) function\"></p>\n<blockquote>\n<p>Run Time characteristics of an O(n) function</p>\n</blockquote>\n<p>Consider this next code snippet:</p>\n<pre><code class=\"language-python\">def is_none(item):\n    return item is None\n</code></pre>\n<p>This function is called <code>O(1)</code> which is called <strong>\"constant time\"</strong>. What this means is no matter how big our input is, it always takes the same amount of time to compute things.</p>\n<p><img src=\"https://justin.abrah.ms/static/images/o_1__plot.png\" alt=\"o1_charactersitics\" title=\"Run time characteristics of O(1) function\"></p>\n<blockquote>\n<p>Run time charactersitics of O(1) function</p>\n</blockquote>\n<p>Consider this next example.</p>\n<pre><code class=\"language-python\">def combinations(the_list):\n   results = []\n   for item in the_list:\n       for inner_item in the_list:\n           results.append((item, inner_item))\n   return results\n</code></pre>\n<p>This matches every item in the list with every other item in the list. If we gave it an array <code>[1,2,3]</code>, we'd get back <code>[(1,1) (1,2), (1,3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)]</code>. This is part of the field of <strong>combinatorics</strong>, which is the mathematical field which studies combinations of things. This function is considered <strong>O(n^2)</strong>. This is because for every item in the list we have to do n more operations. So n * n == n^2.</p>\n<p>Below is a comparison of each of these graphs, for reference. You can see that an O(n^2) function will get slow very quickly where as something that operates in constant time will be much better. This is particularly useful when it comes to data structures.</p>\n<p><img src=\"https://justin.abrah.ms/static/images/runtime_comparison.png\" alt=\"comparison\"></p>\n<blockquote>\n<p>Comparison of O(n), O(1) and O(n^2) functions</p>\n</blockquote>\n<p>Another Big O notation term is <strong>O(2^N)</strong> denotes an algorithm whose growth doubles with each additon to the input data set. The growth curve of an O(2^N) function is exponential - starting off very shallow, then rising meteorically. An example of an O(2^N) function is the recursive calculation of Fibonacci numbers:</p>\n<p>An example:</p>\n<pre><code class=\"language-python\">def fibonacci(number):\n    if number &#x3C;=1 :\n        return number\n    return fibonacci(number - 2) + fibonacci(number - 1);\n}\n</code></pre>","frontmatter":{"title":"Big-O-Notation","subtitle":"The Big Deal with the Big-O Notation and algorithms","date":"August, 02, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"big-o-notation-post.png","thumbnail":"big-o-notation-post.png","teaser":"big-o-notation-post.png","credit":"NuuNoel","creditlink":"http://www.nuuneoi.com"},"path":"/tech/big-o-notation","tags":["algorithms"],"excerpt":"Big O notation is used in Computer Science to describe the performance or complexity of an algorithm. Big O specifically describes the worst-case scenario, and can be used to describe the execution time required or the space used (e.g. in memory or on disk) by an algorithm."}}},"pageContext":{"prev":{"html":"<p>Following my <a href=\"https://brianlusina.github.io/Paper-Rabbit/articles/usability-and-code/\">previous</a> article, I think it best to write about how many users are the optimal number to conduct a usability test with. Most would argue that you need hundreds to come up with an optimal number, say, 100? However, this would be wrong, very wrong. In fact, based on my own personal research the number is 5, except when it is not. This means the optimal number is 5, but then again depends on a couple of factors.</p>\n<p>Why 5 though? This lets you find almost as many usability problems as you'd find using many more test participants. With 5 users, you almost always get close to user testing's maximum benefit-cost ratio.</p>\n<p>There are exceptions to the rule of course.</p>\n<ul>\n<li><strong>Quantitative studies aim at statistics more than on insights</strong>. In this case test at least 20 users to get statistically significant numbers; tight confidence intervals require even more users.</li>\n<li><strong>Card Sorting</strong> test at least 15 users.</li>\n<li><strong>Eyetracking</strong> Test 39 users if you want stable heatmaps.</li>\n</ul>\n<p>These exceptions shouldn't worry you much. The vast majority of your user research should be qualitative, aimed at collecting insights to drive your design, not numbers to impress people in PowerPoint.</p>\n<p>The main argument for small tests is simply <strong>return on investment</strong>. Testing costs increase with each additional study participant, yet the number of findings quickly reaches the point of diminishing returns. There's little additional benefit to running more than 5 people through the same study; ROI drops like a stone with a bigger number.</p>\n<p>And if you have a big budget? Spend it on additional studies, not more users in each study.</p>\n<h2>Arguments for more Test participants</h2>\n<ol>\n<li><strong>A big website has tons of users.</strong> Doesn't matter for the sample size, even if you were doing statistics. The variance in statistical sampling is determined by the sample size, not the size of the full population from which the sample was drawn. In user testing, we focus on a website's functionality to see which design elements are easy or difficult to use. The evaluation of a design element's quality is independent of how many people use it. (Conversely, the decision about whether to fix a design flaw should certainly consider how much use it'll get: it might not be worth the effort to improve a feature that has few users; better to spend the effort recoding something with millions of users.).</li>\n<li><strong>A big website has tons of features</strong> This is an argument for running several different tests — each focusing on a smaller set of features — not for having more users in each test. You can't ask any individual to test more than a handful of tasks before the poor user is tired out. Yes, you'll need more users overall for a feature-rich design, but you need to spread these users across many studies, each focusing on a subset of your research agenda.</li>\n<li>\n<p><strong>We have several different target audiences.</strong> This can actually be a legitimate reason for testing a larger user set because you'll need representatives of each target group. However, this argument holds <strong>only if</strong> the different users are actually going to behave in completely different ways. Some examples of projects may include:</p>\n<ul>\n<li>Medical site targeting both doctors and patients, and</li>\n<li>Auction site where you can either sell stuff or buy stuff.</li>\n</ul>\n<p>When the users and their tasks are this different, you're essentially running a new test for each target audience, and you'll need close to 5 users per group. Typically, you can get away with 3–4 users per group because the user experience will overlap somewhat between the two groups. With, say, a financial site that targets novice, intermediate, and experienced investors, you might test 3 of each, for a total of 9 users — you won't need 15 users total to assess the site's usability.</p>\n</li>\n<li>\n<p><strong>The site makes so much money that even the smallest usability problem is unacceptable.</strong> Rich companies certainly have an ROI case to spend more on usability. Even if they spend \"too much\" on each quality improvement, they'll make even more back because of the vast amounts of money flowing through the user interface. However, even the highest-value design projects will still optimize their ROI by keeping each study small and conducting many more studies than a lower-value project could afford.</p>\n<p>The basic point is that it's okay to leave usability problems behind in any one version of the design as long as you're employing an iterative design process where you'll design and test additional versions. Anything not fixed now will be fixed next time. If you have many things to fix, simply plan for a lot of iterations. The end result will be higher quality (and thus higher business value) due to the additional iterations than from testing more users each time.</p>\n</li>\n</ol>\n<p>True answer to \"how many users\" can sometimes be much smaller than 5. If you have an Agile-style UX process with very low overhead, your investment in each study is so trivial that the cost–benefit ratio is optimized by a smaller benefit. (It might seem counterintuitive to end up with more money by making less money from each study, but this occurs because the smaller overhead lets you run so many more studies that the sum of numerous small benefits becomes a big number.)</p>\n<p>For really low-overhead projects, it's often optimal to test as little as 2 users per study. For some other projects, 8 users — or sometimes even more — might be better. For most projects, however, you should stay with the tried-and-true: 5 users per usability test.</p>\n<h2>Conclusion</h2>\n<p>Performing these usability studies is necessary to determing usability of your software. However, one should note that sometimes less is more.</p>","id":"4064e2d1-4d16-5d0c-a605-028cc50d76d8","timeToRead":4,"frontmatter":{"title":"Test Users and Usability","subtitle":"How many users do you need to test usability of your software?","excerpt":"How many users do you need to test usability of your software?","path":"/design/test-users-usabilty-studies","category":"design","date":"August 04, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"test-users-and-usability.jpg","thumbnail":"test-users-and-usability.jpg","teaser":"test-users-and-usability.jpg","credit":null,"creditlink":null},"tags":["Usability","User Experience","UX","Design"],"published":true}},"next":{"html":"<p>A lot of people associate designing stellar applications with skill alone. That it just takes one brilliant out of the blue idea to create something that everyone will suddenly realize they need. Sometimes this happens, but more often than not it does not. A lot of applications are built to fill a gap that people have craved to be filled. To find this gap you need to first know that it is there, you need to identify if people acknowledge it is a gap as well and also you need to be able to determine if said people need a complex technology to fill this gap or do they simply need a pen and paper. Not all problems need technology to get solved.</p>\n<p>Now, say that you find a problem that can be solved with technology. Say, your particular software can help provide a particular solution to the problem. This is always good to identify, that it helps to solve the problem. The question breaks down to is it something the users can use with ease and can they learn easily to use it or do they need the whole documentation you used to build it?</p>\n<p>This brings me to <strong>usability</strong>. A term that is so rarely used, but a term I think is necessary and important in the world of designing technology.</p>\n<h2>Usability</h2>\n<p>Usability is a quality attribute that assesses how easy user interfaces are to use. The word <em>usability</em> also refers to methods for improving ease-of-use during the design process.</p>\n<p>The 5 components associated with usability:</p>\n<ul>\n<li><strong>Learnability</strong> Is it easy for users to accomplish basic tasks the first time they encounter the design?</li>\n<li><strong>Efficiency</strong> Once users have learned the design, how quickly can they perform tasks?</li>\n<li><strong>Memorability</strong> When users return to the design after a period of not using it, how easily can they reestablish proficiency?</li>\n<li><strong>Errors</strong> How many errors do users make, how severe are these errors, and how easily can they recover from the errors?</li>\n<li><strong>Satisfaction</strong> How pleasant is it to use the design?</li>\n</ul>\n<p>Another key attribute is <strong>utility</strong>, which refers to the design's functionality: <em>Does it do what users need?</em></p>\n<p>Usability and utility are equally important and together determine whether something is useful: It matters little that something is easy if it's not what you want. It's also no good if the system can hypothetically do what you want, but you can't make it happen because the user interface is too difficult. To study a design's utility, you can use the same user research methods that improve usability.</p>\n<p>So, utility is simply whether it provides the features you need. Usability is how easy &#x26; pleasant these features are to use. Combining the two leads to a product being <em>useful</em>.</p>\n<h2>Importance of Usability</h2>\n<p>The first law of e-commerce is that if users cannot find the product, they cannot buy it either. This means that if a user can not clearly understand your site and get all the information they need from the get go, they <strong>leave</strong>.</p>\n<blockquote>\n<p>On the Web, usability is a necessary condition. If a website is difficult to use, people exit. If the homepage fails to clearly state what a company offers and what users can do on the site, people leave. If users get lost on a website, they leave. If a website's information is hard to read or doesn't answer users' key questions, they leave. Note a pattern here? There's no such thing as a user reading a website manual or otherwise spending much time trying to figure out an interface. There are plenty of other websites available; leaving is the first line of defense when users encounter a difficulty.</p>\n</blockquote>\n<h2>Improving usability</h2>\n<p>The most basic and useful way to improve usability is <strong>user testing</strong>, which has 3 components:</p>\n<ul>\n<li><strong>Get hold of some representative users</strong>, such as customers for an e-commerce site.</li>\n<li>Ask the users to <strong>perform representative</strong> tasks with the design.</li>\n<li><strong>Observe what the users do</strong>, where they succeed, and where they have difficulties with the user interface. Shut up and let the users do the talking.</li>\n</ul>\n<p>It's important to test users individually and let them solve any problems on their own. If you help them or direct their attention to any particular part of the screen, you have contaminated the test results.\nTo identify a design's most important usability problems, testing 5 users is typically enough. Rather than run a big, expensive study, it's a better use of resources to run many small tests and revise the design between each one so you can fix the usability flaws as you identify them. Iterative design is the best way to increase the quality of user experience. The more versions and interface ideas you test with users, the better.</p>\n<p>User testing is different from focus groups, which are a poor way of evaluating design usability. Focus groups have a place in market research, but to evaluate interaction designs you must closely observe individual users as they perform tasks with the user interface. Listening to what people say is misleading: you have to watch what they actually do.</p>\n<h2>When to Work on Usability</h2>\n<p>Usability plays a role in each stage of the design process. The resulting need for multiple studies is the reason individual studies should be fast and cheap. Here are the main steps:</p>\n<ul>\n<li>Before starting the new design, <strong>test the old design</strong> to identify the good parts that you should keep or emphasize, and the bad parts that give users trouble.</li>\n<li><strong>Test your competitors' designs</strong> to get cheap data on a range of alternative interfaces that have similar features to your own.</li>\n<li><strong>Conduct a field study</strong> to see how users behave in their natural habitat.</li>\n<li>Make <strong>paper prototypes</strong> of one or more new design ideas and test them. The less time you invest in these design ideas the better, because you'll need to change them all based on the test results.</li>\n<li><strong>Refine the design ideas</strong> that test best through multiple iterations, gradually moving from low-fidelity prototyping to high-fidelity representations that run on the computer. Test each iteration.</li>\n<li><strong>Inspect the design relative to established usability guidelines</strong> whether from your own earlier studies or published research.\nOnce you decide on and implement the final design, test it again. Subtle usability problems always creep in during implementation.</li>\n<li><strong>Don't defer user testing until you have a fully implemented design</strong>. If you do, it will be impossible to fix the vast majority of the critical usability problems that the test uncovers. Many of these problems are likely to be structural, and fixing them would require major rearchitecting.</li>\n</ul>\n<p>The only way to a high-quality user experience is to start user testing early in the design process and to keep testing every step of the way.</p>\n<h2>Testing, 1, 2, 3</h2>\n<p>If you run at least one user study per week, it's worth building a dedicated usability laboratory. For most companies, however, it's fine to conduct tests in a conference room or an office — as long as you can close the door to keep out distractions. What matters is that you get hold of real users and sit with them while they use the design. A notepad is the only equipment you need.</p>\n<h2>Conclusion</h2>\n<p>Usability is just as important as the design and it goes a long way in creating software that not only solves a particular problem but also allows the user to enjoy using it the software at the same time.</p>","id":"c0c83668-0a16-535c-bd36-ee669b6c7952","timeToRead":5,"frontmatter":{"title":"Usability, Design and Code","subtitle":"Usability 101, a brief introduction into design","excerpt":"Usability 101, a brief introduction into design","path":"/design/usability-and-code","category":"design","date":"August 01, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"usability-design.png","thumbnail":"usability-design.png","teaser":"usability-design.png","credit":null,"creditlink":null},"tags":["Usability","User Experience","UX","Design"],"published":true}}}}}