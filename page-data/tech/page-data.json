{"componentChunkName":"component---src-pages-tech-index-jsx","path":"/tech/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"Harmony in Chaos Engineering","subtitle":"Making chaos work for you at scale","excerpt":"Chaos is often depicted as negative and literally means \"complete disorder and confusion\". What if we can use this complete lack of organization in our production environment to bring stability and confidence in our systems and completely change the meaning of chaos? Let us explore the possible ways in which we can get harmony from chaos engineering.","path":"/tech/chaos-engineering","date":"October 13, 2019","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"chaos-engineering.jpeg","thumbnail":"chaos-engineering.jpeg","teaser":"chaos-engineering.jpeg","credit":null,"creditlink":null},"tags":["Engineering","Chaos","Testing"]},"excerpt":"Chaos is often depicted as negative and literally means \"complete disorder and confusion\". What if we can use this complete lack of…","timeToRead":5,"html":"<p>Chaos is often depicted as negative and literally means \"complete disorder and confusion\". What if we can use this complete lack of organization in our production environment to bring stability and confidence in our systems and completely change the meaning of chaos? Let us explore the possible ways in which we can get harmony from chaos engineering.</p>\n<p>So, if chaos is a lack of organization, complete disfunction and confusion &#x26; engineering is about precision &#x26; using scientific principles to design and build machines, structures, tools and other items. How do these 2 principles exactly come together to bring harmony through chaos engineering?</p>\n<p>First of all, let's start with a bit of a history lesson. Chaos engineering was initially thought of by Greg Orzell in 2011 while Netflix was moving to the cloud. His intent was to move from a development model that assumed zero downtimes and breakdowns to  a model where such breakdowns were inevitable. This stemmed from the fact that during development we often assume the best case scenerios where no breakdowns happen or we control how they happen and can immediately fix these issues. However, that is not the case in the real world as we all know breakdowns could happen at any time. His intention was to drive engineers to consider resilience as an obligation rather than an option.</p>\n<p>In order to achieve this, Neflix came up with a tool known as  <em>Chaos Monkey</em> whose purpose was to randomly choose servers in a production environment and turn them off during business hours. Of course this is a very unpopular opinion and not many would attempt to do this in their production environment that actively serves customers.</p>\n<blockquote>\n<p>\"Imagine a monkey entering a \"data center\", these \"farms\" of servers that host all the critical functions of our online activities. The monkey randomly rips cables, destroys devices and returns everything that passes by the hand [i.e. flings excrement]. The challenge for IT managers is to design the information system they are responsible for so that it can work despite these monkeys, which no one ever knows when they arrive and what they will destroy.\"</p>\n</blockquote>\n<p>In practice this is how chaos engineering can be achieved:</p>\n<p><img src=\"/images/posts/chaos-engineering-flow.png\" alt=\"chaos-engineering-flow\"></p>\n<p>The harder it is to disrupt the steady state, the more confident we are the system can withstand random breakdowns. If a weakness is uncovered, we now have a target for improvement before that behavior manifests in the system at large.</p>\n<h2>Build  a hypothesis around steady state behaviour</h2>\n<p> Focus on the measurable output of a system instead of the internal attributes. By focusing on systemic behavior patterns during experiments, Chaos verifies that the system does work, rather than trying to validate how it works.</p>\n<h2>Vary Real world events</h2>\n<p>Chaos variables reflect real-world events. Prioritize events either by potential impact or estimated frequency. Consider events that correspond to hardware failures like servers dying, software failures like malformed responses, and non-failure events like a spike in traffic or a scaling event. Any event capable of disrupting steady state is a potential variable in a Chaos experiment.</p>\n<h2>Run experiments in production</h2>\n<p>Systems behave differently depending on environment and traffic patterns. Since the behavior of utilization can change at any time, sampling real traffic is the only way to reliably capture the request path. To guarantee both authenticity of the way in which the system is exercised and relevance to the current deployed system, Chaos strongly prefers to experiment directly on production traffic.</p>\n<h2>Automate Experiments to run continuously</h2>\n<p>Running experiments manually is labor-intensive and ultimately unsustainable. Automate experiments and run them continuously. Chaos Engineering builds automation into the system to drive both orchestration and analysis.</p>\n<h2>Minimize the blast radius</h2>\n<p>Experimenting in production has the potential to cause unnecessary customer pain. While there must be an allowance for some short-term negative impact, it is the responsibility and obligation of the Chaos Engineer to ensure the fallout from experiments are minimized and contained.</p>\n<h3>Limitations</h3>\n<p>Despite the buzz and the hype around chaos engineering, there are some drawbacks to it:</p>\n<ol>\n<li>\n<p><strong>Means to an end</strong>.</p>\n<p>It's important to note that it is a <em>means to an end and not an end in itself</em> . What matters most is the production service that is provided at the end. Whatever findings that you discover from perform chaos engineering from your system, must be fed back to the system - in terms of fixing bugs, training people - otherwise it will count as a waste of time.</p>\n</li>\n<li>\n<p><strong>One step forward two steps back</strong></p>\n<p>Who’s to say that being able to uncover weaknesses will automatically lead to positive outcomes, like improved customer experience? As software developers know, identifying a bug and fixing it are two different challenges. Indeed, your optimization efforts in one area might increase brittleness in other areas.</p>\n</li>\n<li>\n<p><strong>One among many</strong></p>\n<p>  Chaos Engineering is not a remedy for all of your reliability concerns, and it never will be. It’s merely one of many approaches used to gain confidence in system correctness (typically in the face of perturbation). Consider it required but not sufficient. And by no means is it – or should it be – the only way to learn from failure.</p>\n</li>\n<li>\n<p><strong>Systems will continue to fail</strong></p>\n<p>  It may sound overly pessimistic, but while Chaos Engineering surely is a net plus, impermanence makes sure that all complex systems will fail no matter how hard we try to avoid it (which is exactly why postmortems are so important). The Holy Grail of Automation – introducing faults automatically instead of manually – won’t change that fact a bit. Don’t fool yourself and set realistic expectations.</p>\n</li>\n<li>\n<p><strong>No Rollback button</strong></p>\n<p>  The rollback button is a lie. That’s not only true for application deployments but also for fault injection, as both face the same fundamental problem: state. Yes, you might be able to revert the direct impact of non-destructive faults, which can be as simple as stopping to generate CPU/memory/disk load or deleting traffic rules created to simulate network conditions. But no, you can’t roll back what has been inflicted on everything else in the system – the targeted application and everything that interacts with it. A prime example is corrupt or incorrect data stored in a database/queue/cache due to a program crash.</p>\n</li>\n</ol>\n<h2>Conclusion</h2>\n<p>This is but a brief introduction about chaos engineering, to just showcase that this is a new paradigm and shift into how products are now built at scale and to ensure that the end user always has the best esperience despite the system experiencing heavy storms. I would recommend using chaos engineering as an everyday tool to ensure that whatever you build will always work at scale and work consistently. Of course this is not everyone's cup of tea and that is acceptable. At certain levels of scale, this just becomes a pain to setup and get to work properly. Remember, the ultimate goal is to bring the best experience to the customer and measuer the overal output of your product and not how it works internally.</p>\n<p>With that I shall leave you with a quote.</p>\n<blockquote>\n<p>But behind all the beauty lies madness and chaos.</p>\n</blockquote>"}},{"node":{"frontmatter":{"title":"Object Immutability In JavaScript","subtitle":"Creating object immutability in JavaScript","excerpt":"Creating object immutability in JavaScript has its advantages when it comes to programming, it ensures that objects retain their properties and has no unexpected side-effects. How to we create this immutability in JavaScript?","path":"/tech/object-immutability-js","date":"September 18, 2018","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"object-freeze.png","thumbnail":"object-freeze.png","teaser":"object-freeze.png","credit":null,"creditlink":null},"tags":["JavaScript","Objects"]},"excerpt":"What is immutabilty? I see this word being thrown around a lot, especially in the software industry, where other phrases such as clean code…","timeToRead":5,"html":"<p>What is immutabilty? I see this word being thrown around a lot, especially in the software industry, where other phrases such as <strong>clean code</strong> and <strong>code quality</strong> are constantly being emphasized. What is it? Why is it necessary to understand what it is and how to use it?</p>\n<p>In this post, I shall write briefly about what it is and how to use it. This will not use any JS framework, but will be pure JavaScript. This is because this is applicable in any JavaScript context(read framework). Frameworks and libraries come with their own rules of immutability. How do they creat these rules arround immutability?</p>\n<blockquote>\n<p>Immutability means <em>not capable or susceptible to change</em></p>\n</blockquote>\n<p>In other words, not capable of change. In object oriented programming and functional programming, this means that an immutable object is an <em>object whose state cannot be modified after it is created</em>. Objects in general have state and behaviour. When an object is immutable, the state and behaviour can not change.</p>\n<p>This has several benefits. First of all ensures this ensures that there are no intended side-effects and we know exactly what an object's state and behaviour is at any given time within the application's lifecycle. It makes us more confident when writing our code, as we know exactly what to expect from an immutable object.</p>\n<p>Of course, this also means that it's state can not be modified and can also be an issue in the case where we do need to alter it's current state. This is why we create a copy of the object and alter the state of the copy instead of the original object(A pattern that is used in <a href=\"http://redux.js.org\">Redux</a>).</p>\n<p>Before delving into that, let us see how to create object immutability in plain ol' JavaScript:</p>\n<pre><code class=\"language-javascript\">let johnDoe = {\n    firstName: \"John\",\n    lastName: \"Doe\",\n    email: \"johndoe@email.com\",\n    age: 50\n}\n\nconst frozenJohnDoe = Object.freeze(johnDoe);\n\nfrozenJohnDoe.age = 33;\n// Throws an error in strict mode\n\nfrozenJohnDoe.age;\n// expected output: 50\n</code></pre>\n<blockquote>\n<p>An example of immutabililty in JavaScript</p>\n</blockquote>\n<p>Above, we have a <code>johnDoe</code> object with some properties (<code>firstName</code>, <code>lastName</code>, <code>email</code> and <code>age</code>). These properties at time of create are mutable(can be changed). To make this object immutable, we use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\">Object.freeze</a>. A very handy function that <em>freezes</em> the object. Therefore, we can not alter any of its properties on the following lines.</p>\n<p>This means nothing can be added or removed from the frozen object. Our <code>johnDoe</code> object is now frozen and can never be able to alter his age, sorry John :(. This gives us a sense of what to always expect when we use the frozen object. We can always be guaranteed that his age will be 50 when we use it.</p>\n<p>It is important to note that when not running in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\">strict mode</a>, it will appear as if mutation of the object's properties can be done. Here is an example:</p>\n<pre><code class=\"language-javascript\">// still using our johnDoe object above\n> johnDoe.age = 5\n5\n> johnDoe\n{ firstName: 'John',\n  lastName: 'Doe',\n  email: 'johndoe@email.com',\n  age: 50 }\n</code></pre>\n<blockquote>\n<p>While running in a Node REPL</p>\n</blockquote>\n<p>While trying to set the age of the object to 5, no error is thrown and thus it will appear as if a successful mutation actually occured, but in reality, the properties remain the same, age has not been altered.</p>\n<p>Data properties of frozen objects can not be changed, configurable attributes are set to false. This is what sets the immutability of the object. There is a problem though. What if my object's properties' values were other objects? Are those immutable to? An example:</p>\n<pre><code class=\"language-javascript\">> let shoppingCart = {\n    fruits: {\n        banana: \"banana\",\n        apple: \"apple\",\n        oranges: \"oranges\"\n    },\n    bread: {\n        brown: \"brown bread\",\n        white: \"white bread\"\n    }\n    price: 50\n}\n// freeze our object, we do not need to save a copy of it. As the function returns our initial object and NOT a fronzen copy\n> Object.freeze(shoppingCart)\n\n// fruits remains as is\n> shoppingCart.fruits\n{\n    banana: \"banana\",\n    apple: \"apple\",\n    oranges: \"oranges\"\n}\n// attempt to mutate the fruits object's properties\n> shoppingCart.fruits.banana = \"very ripe banana\"\n'very ripe banana'\n\n> shoppingCart.fruits\n{\n    banana: \"very ripe banana\",\n    apple: \"apple\",\n    oranges: \"oranges\"\n}\n</code></pre>\n<blockquote>\n<p>Again, running in a Node REPL</p>\n</blockquote>\n<p>As, you can see from above, the <code>fruits</code> object's values can be mutated, yet it is in a frozen object <code>shoppingCart</code>. This is known as <strong>shallow freeze</strong>. This means that the immediate properties of <code>shoppingCart</code> have been made immutable, however, if the values of said properties are objects, they are not frozen.</p>\n<p>For the fruits object to also have the same level of immutability, they have to also be frozen:</p>\n<pre><code class=\"language-javascript\">> let fruits = {\n    banana: \"banana\",\n    apple: \"apple\",\n    oranges: \"oranges\"\n};\n> Object.freeze(fruits);\n\n> let bread = {\n    brown: \"brown bread\",\n    white: \"white bread\"\n}\n> Object.freeze(bread);\n\n> let shoppingCart = {\n    fruits,\n    bread,\n    price: 50\n};\n\n// freeze our object, we do not need to save a copy of it\n> Object.freeze(shoppingCart)\n\n// fruits remains as is\n> shoppingCart.fruits\n{\n    banana: \"banana\",\n    apple: \"apple\",\n    oranges: \"oranges\"\n}\n// attempt to mutate the fruits object's properties\n> shoppingCart.fruits.banana = \"very ripe banana\"\n'very ripe banana'\n\n> shoppingCart.fruits\n{\n    banana: \"banana\",\n    apple: \"apple\",\n    oranges: \"oranges\"\n}\n</code></pre>\n<blockquote>\n<p>Now we have immutability for our fruits :)</p>\n</blockquote>\n<p>Of course, this can be a pain when dealing with objects that have properties that have other objects and those objects have properties that have other objects and so forth. Creating a recursive function that freezes all properties of the object that are objects themselves will save us the time and ensure that we attain <strong>deep freeze</strong> on our object.</p>\n<p>We have to ensure that the recurstion does not end up in a cycle though.</p>\n<pre><code class=\"language-javascript\">const deepFreeze = object => {\n    // get the property names\n    let propNames = Object.getOwnPropertyNames(object);\n\n    // freeze properties before freezing self\n    for(let name of propNames){\n        let value = object[name]\n\n        object[name] = value &#x26;&#x26; typeof value === \"object\" ?\n            deepFreeze(value) : value\n    }\n\n    // freeze self\n    return Object.freeze(object);\n}\n</code></pre>\n<blockquote>\n<p>This function will recursively freeze all properties of an object that are objects.</p>\n</blockquote>\n<p>We can now use this function as below:</p>\n<pre><code class=\"language-javascript\">var collection = {\n    internal: {\n        a: null\n    }\n};\n\ndeepFreeze(collection);\n\n// fails silently in non-strict mode\ncollection.internal.a = 'anotherValue';\ncollection.internal.a; // null\n</code></pre>\n<p>You can check whether out objects are frozen with <code>Object.isFrozen</code>, this takes in an object and checks whether the configurable properties have been set to false and returns a boolean value (true, if the object is frozen, false otherwise).</p>\n<p><strong>Object.freeze</strong> also works on arrays:</p>\n<pre><code class=\"language-javascript\">let a = [0];\nObject.freeze(a); // The array cannot be modified now.\n\na[0]=1; // fails silently\na.push(2); // fails silently\n\n// In strict mode such attempts will throw TypeErrors\nfunction fail() {\n  \"use strict\"\n  a[0] = 1;\n  a.push(2);\n}\n\nfail();\n</code></pre>\n<h2>The End</h2>\n<p>Next time you are writing a Javascript module and you are exposing objects that other developers may use, make sure that they have the exact needed permissions to alter your objects, otherwise they may broke your code without even realising it. Make sure also to document it.</p>"}},{"node":{"frontmatter":{"title":"Continuous Integration and Deployment with Android, the right way.","subtitle":"Continuous Deployment in Android","excerpt":"Continuous Integration has become an essential part of any software project in recent times. With how fast technology keeps changing and how quickly libraries and dependencies get re-written, it becomes essential for your application code to be maintained, tested and delivered to users quickly and efficiently. This will usually involve you re-writing some old code, testing your new feature and then deploying to users for them to enjoy your new feature in your application.","path":"/tech/ci-with-android","date":"October 21, 2017","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"cicd_android_feature.png","thumbnail":"cicd_android_thumb.jpg","teaser":"cicd_android_thumb.jpg","credit":null,"creditlink":null},"tags":["Android","kotlin","CI","Continuous Integration","Continuous Deployment"]},"excerpt":"Continuous Integration has become an essential part of any software project in recent times. With how fast technology keeps changing and how…","timeToRead":16,"html":"<p>Continuous Integration has become an essential part of any software project in recent times. With how fast technology keeps changing and how quickly libraries and dependencies get re-written, it becomes essential for your application code to be maintained, tested and delivered to users quickly and efficiently. This will usually involve you re-writing some old code, testing your new feature and then deploying to users for them to enjoy your new feature in your application.</p>\n<p>Obviously this is not usually easy in Android development as the ecosystem is vast and development can be sometimes slow, especially when you have to deal with recompiling and rebuilding a project every time there is a change you have made to your code (honestly, do not like this part of the job). The even bigger challenge comes when you have to create a release, sign it and manually deploy it on PlayStore. This process becomes even more tedious!</p>\n<p>The good thing is there are many Continuous Integration and Deployment providers that take away the manual process of things and make it more automatic, so that you only deal with the writing of code and they deal with the deployment of the product.</p>\n<p>You will find a lot of these tools used for web projects, OS images servers, but not so much for mobile applications, yet the delivery is more or less the same. Luckily these same tools can be used to deploy your mobile applications and today you shall learn how.</p>\n<h3>A couple of things</h3>\n<p>There are a couple of things that I need to mention before I proceed.</p>\n<p>First, the examples I shall use will be referencing <a href=\"https://circleci.com/\">CircleCI</a>, but does not mean that they can only be used with CircleCI, any CI provider will do the trick.</p>\n<p>Secondly, I assume that you already have a test setup for you Android application and also an Android application you are working on.</p>\n<p>Third, I also assume that you have a PlayStore developer account where you will deploy your application.</p>\n<p>Whether you have these setup or not, the following will prove to be helpful for you down the line.</p>\n<h3>Getting started and setting up.</h3>\n<p>Assuming you already have a working Android project with which you need to automate the boring stuff of testing and deployment, there are a couple of things you will need to have to make the process even smoother.</p>\n<ol>\n<li><strong>Gradle properties file</strong></li>\n</ol>\n<p>Think of this as a file you, your team and your CI should only know about. This is normally labelled as <code>gradle.properties</code> file and contains API keys, Secret Keys and Base URls that your application uses when communicating with a service provider.</p>\n<p>This file should not be checked into a VCS(Github, Gitlab, Bitbucket, etc) as you do not want to expose these secret keys to the public. But if they are not checked into a VCS, then how will your CI know how to build your application properly?</p>\n<pre><code class=\"language-properties\">DEV_API_BASE_URL=&#x3C;YOUR_DEV_BASE_URL>\nAPI_BASE_URL=&#x3C;YOUR_BASE_URL>\nAPI_KEY=&#x3C;YOUR_API_KEY>\nGITHUB_TOKEN=&#x3C;YOUR_GITHUB_TOKEN>\nSERVICE_ACCOUNT_EMAIL=&#x3C;YOUR_SERVICE_ACCOUNT_EMAIL>\nVERSION_NAME=1.0.0\nVERSION_CODE=1\nRELEASE_TRACK=beta\n</code></pre>\n<blockquote>\n<p>A typical generic <code>gradle.properties</code> file with secret keys and what not.</p>\n</blockquote>\n<p>These configurations assume you have such values in your application. The only values that will really be essential to your build environment are <code>VERSION_CODE</code>, <code>VERSION_NAME</code> and <code>RELEASE_TRACK</code>.</p>\n<p>Version code and name are used as unique identifiers for your application when deploying on playstore while release track is used to identify which track your current release will be published on(either beta, alpha or production).</p>\n<p>I prefer setting the track to beta, so as to enable the current release to be first pushed to beta testers before it is upgraded to production. Also beta track is what I use when building from <code>develop</code> or <code>staging</code> branch, which ensures that the master branch will only be used for <code>production</code> releases.</p>\n<p>Here is how we can generate the <code>RELEASE_TRACK</code> value dynamically:</p>\n<pre><code class=\"language-properties\">/**\n * Gets the release track to use for deployment\n * Release tracks are either \"alpha\", \"beta\", \"production\", \"rollout\"\n * */\ndef getReleaseTrack = { ->\n    try{\n        Properties properties = new Properties()\n        properties.load(new FileInputStream(\"gradle.properties\"))\n        return Integer.parseInt(properties.getProperty(\"RELEASE_TRACK\"))\n    }catch (ignored){\n        return \"alpha\"\n    }\n}\n</code></pre>\n<blockquote>\n<p>This will get the release track from the properties file and if it can not get that from the file, then the default is alpha release track. This ensure that we do not touch the production/rollout tracks and leave that up to the CI to handle when the build and tests succeeds.</p>\n</blockquote>\n<p>And to even make it more dynamic we can create a shell script that the CI handles before building the application</p>\n<pre><code class=\"language-bash\"># updates the version code based on the current branch\nfunction updateVersionCodeAndTrack(){\n    versionCode=$(git rev-list --first-parent --count origin/${CIRCLE_BRANCH})\n    versionName=$(git describe --dirty)\n\n#    if [\"${versionName}\" == \"fatal: No names found, cannot describe anything.\"]; then\n#        major=$(expr ${CIRCLE_BUILD_NUM} - ${CIRCLE_PREVIOUS_BUILD_NUM})\n#        versionName=${major}.0.0\n#    fi\n\n    if [\"${versionName}\" == \"fatal: No names found, cannot describe anything.\"]; then\n        versionName=1.0.0\n    fi\n\n    if [ \"${CIRCLE_BRANCH}\" == \"develop\" ]; then\n        echo \"VERSION_NAME=${versionName}\" >> ${GRADLE_PROPERTIES}\n        echo \"VERSION_CODE=${versionCode}\" >> ${GRADLE_PROPERTIES}\n        echo \"RELEASE_TRACK=\\\"beta\\\"\" >> ${GRADLE_PROPERTIES}\n\n    elif [ \"${CIRCLE_BRANCH}\" == \"master\" ] ; then\n        echo \"VERSION_NAME=${versionName}\" >> ${GRADLE_PROPERTIES}\n        echo \"VERSION_CODE=${versionCode}\" >> ${GRADLE_PROPERTIES}\n        echo \"RELEASE_TRACK=\\\"production\\\"\" >> ${GRADLE_PROPERTIES}\n    fi\n}\n</code></pre>\n<blockquote>\n<p>As you can see, the release track is updated according to the branch the CI is running on. ${GRADLE_PROPERTIES} is simply the location of the <code>gradle.properties</code> file.</p>\n</blockquote>\n<ol start=\"2\">\n<li><strong>KeyStore</strong></li>\n</ol>\n<p>Android applications have to be signed in order for PlayStore to accept your release APK. This is a simple file (with a .jks extension) that authenticates your application with PlayStore. It is a MUST have when creating releases, otherwise PlayStore will not let your application into the <em>Pearly Gates</em> that is Google PlayStore.</p>\n<p>To create a KeyStore file, simply follow instructions outlined <a href=\"https://developer.android.com/studio/publish/app-signing.html#generate-key\">here</a> and when you are done, come back here with your new shiny keystore file and we can proceed.</p>\n<p>Once you have your File in place, we can now automate the signing of the application easily.</p>\n<p>This file is not pushed to Github and as such means that your CI has be be aware of its <code>existence</code> and build your application as you would locally. but how would it go about this process?</p>\n<p>We start off by creating a <code>keystore.properties</code> file. The contents of this will are simple.</p>\n<pre><code class=\"language-properties\">keyAlias=&#x3C;KEY_ALIAS>\nkeyPassword=&#x3C;KEY_PASSWORD>\nstoreFile=&#x3C;STORE_FILE>\nstorePassword=&#x3C;STORE_PASSWORD>\n</code></pre>\n<blockquote>\n<p>keystore.properties file contents, note the &#x3C;> brackets are where you place your values you used when creating your keystore file.</p>\n</blockquote>\n<p>This file can be placed anywhere in your project tree, but, I advice placing this file at the root of your project tree for easier retrieval.</p>\n<p><em>NB: This file is not pushed to Github</em> as it contains your sensitive information for creating your keystore file.</p>\n<p>Once that is in place we can now update your project level <code>build.gradle</code> file. This will be found at the root of your project tree. The update we make will be used to extract information from your <code>keystore.properties</code> file and be used to sign your application</p>\n<pre><code class=\"language-properties\">/**\n * Get version code from git history\n * This will dynamically increase the version code\n * If it fails to get from git, it will get it from the properties file, ensure that there is a properties\n * file at root of project\n * */\ndef getVersionCode = { ->\n    try{\n        def stdout = new ByteArrayOutputStream()\n        exec {\n            commandLine \"git\", \"rev-list\", \"--first-parent\", \"--count\", \"origin/master\"\n            standardOutput = stdout\n        }\n        Random random = new Random()\n\n        // this ensures that the version code remains unique for every build\n        def number = random.nextInt(10) + random.nextInt(5) * random.nextInt(7) + random.nextInt(4)\n        return Integer.parseInt(stdout.toString().trim()) + number\n    }catch (ignored){\n        Properties properties = new Properties()\n        properties.load(new FileInputStream(\"gradle.properties\"))\n        return Integer.parseInt(properties.getProperty(\"VERSION_CODE\"))\n    }\n}\n\n/**\n * Get version name will ensure that the version name of the application remains unique and ever changing\n * for easier tracking. This will pull the information from git\n * */\ndef getVersionName = { ->\n    try {\n        def stdout = new ByteArrayOutputStream()\n        exec {\n            commandLine \"git\", \"describe\" \"--dirty\"\n            standardOutput = stdout\n        }\n        return stdout.toString().trim()\n    }catch (ignored){\n        Properties properties = new Properties()\n        properties.load(new FileInputStream(\"gradle.properties\"))\n        return properties.getProperty(\"VERSION_NAME\")\n    }\n}\n\n\n/**\n * Gets the  service account email gradle.properties file, Ensure that you have a\n * gradle.properties file in root project directory\n * */\ndef getServiceAccountKey = { ->\n    try {\n        Properties properties = new Properties()\n        properties.load(new FileInputStream(\"gradle.properties\"))\n        return properties.getProperty(\"SERVICE_ACCOUNT_EMAIL\")\n    } catch (Exception ignored) {\n        return \"\"\n    }\n}\n\next {\n    // configurations to send to Play Store for automated publishing\n    pk12KeyFile = rootProject.file(\"keystores/moja_publish_key.p12\")\n    pJsonKeyFile = rootProject.file(\"keystores/moja_publish_key.json\")\n    serviceAccountEmail = getServiceAccountKey()\n\n    debugKeystorePropertiesFile = rootProject.file(\"keystores/debug.keystore.properties\")\n    debugKeystoreProperties = new Properties()\n    debugKeystoreProperties.load(new FileInputStream(ext.debugKeystorePropertiesFile))\n\n    keystorePropertiesFile = rootProject.file(\"keystores/keystore.properties\")\n    keystoreProperties = new Properties()\n    keystoreProperties.load(new FileInputStream(ext.keystorePropertiesFile))\n\n    // ...........\n}\n</code></pre>\n<blockquote>\n<p>A section of project level <code>build.gradle</code> file</p>\n</blockquote>\n<p>A couple of new things you have probably noticed.</p>\n<ul>\n<li><strong>getVersionCode</strong> function</li>\n</ul>\n<p>This, as the name suggests, builds a version code number for your application. This makes sure that you do not have to manually update it every single time you want to upload a new release of your application to PlayStore.</p>\n<p>Let us have a look at it again:</p>\n<pre><code class=\"language-properties\">/**\n * Get version code from git history\n * This will dynamically increase the version\n code\n * If it fails to get from git, it will get it from the properties file, ensure that there is a properties\n * file at root of project\n * */\ndef getVersionCode = { ->\n    try{\n        def stdout = new ByteArrayOutputStream()\n        exec {\n            commandLine \"git\", \"rev-list\", \"--first-parent\", \"--count\", \"origin/master\"\n            standardOutput = stdout\n        }\n        Random random = new Random()\n\n        // this ensures that the version code remains unique for every build\n        def number = random.nextInt(10) + random.nextInt(5) * random.nextInt(7) + random.nextInt(4)\n        return Integer.parseInt(stdout.toString().trim()) + number\n    }catch (ignored){\n        Properties properties = new Properties()\n        properties.load(new FileInputStream(\"gradle.properties\"))\n        return Integer.parseInt(properties.getProperty(\"VERSION_CODE\"))\n    }\n}\n</code></pre>\n<blockquote>\n<p>This randomizes the version code to ensure that it is unique on every build. This removes the pain point of having to update the version code every single time.</p>\n</blockquote>\n<ul>\n<li><strong>getVersionName</strong> function</li>\n</ul>\n<p>This is used to get the version name, nothing fancy about this, but what is unique about it is how it gets the version name.</p>\n<pre><code class=\"language-properties\">/**\n * Get version name will ensure that the version name of the application remains unique and ever changing\n * for easier tracking. This will pull the information from git\n * */\ndef getVersionName = { ->\n    try {\n        def stdout = new ByteArrayOutputStream()\n        exec {\n            commandLine \"git\", \"describe\" \"--dirty\"\n            standardOutput = stdout\n        }\n        return stdout.toString().trim()\n    }catch (ignored){\n        Properties properties = new Properties()\n        properties.load(new FileInputStream(\"gradle.properties\"))\n        return properties.getProperty(\"VERSION_NAME\")\n    }\n}\n</code></pre>\n<blockquote>\n<p>This will get the version name from the tags you have pushed to Github. Check <a href=\"https://git-scm.com/book/en/v2/Git-Basics-Tagging\">here</a> for how to create tags on Github. This will then build a unique version name for you to use when identifying to users the version they are downloading or updating.</p>\n</blockquote>\n<ul>\n<li><strong>getServiceAccountKey</strong> Function</li>\n</ul>\n<pre><code class=\"language-properties\">/**\n * Gets the service account email gradle.properties file, Ensure that you have a\n * gradle.properties file in root project directory\n * */\ndef getServiceAccountKey = { ->\n    try {\n        Properties properties = new Properties()\n        properties.load(new FileInputStream(\"gradle.properties\"))\n        return properties.getProperty(\"SERVICE_ACCOUNT_EMAIL\")\n    } catch (Exception ignored) {\n        return \"\"\n    }\n}\n</code></pre>\n<blockquote>\n<p>This gets the service account email that you will have to create on Google Play Services account to enable automated deployment of your application. Check <a href=\"https://github.com/codepath/android_guides/wiki/Automating-Publishing-to-the-Play-Store\">here</a> for more information on that</p>\n</blockquote>\n<p>Once that is setup, we add the following lines in your <code>app</code> module <code>build.gradle</code> file:</p>\n<pre><code class=\"language-gradle\">android {\n\n  // other configuration ....\n    signingConfigs {\n        release {\n            keyAlias rootProject.ext.keystoreProperties['keyAlias']\n            keyPassword rootProject.ext.keystoreProperties['keyPassword']\n            storeFile rootProject.file(rootProject.ext.keystoreProperties['storeFile'])\n            storePassword rootProject.ext.keystoreProperties['storePassword']\n        }\n    }\n\n    buildTypes {\n        release {\n            minifyEnabled true\n            shrinkResources true\n            debuggable false\n            zipAlignEnabled true\n            signingConfig signingConfigs.release\n            //proguardFiles 'proguard-android-optimize.txt', getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n\n        debug {\n            debuggable true\n            minifyEnabled false\n            applicationIdSuffix \".debug\"\n            testCoverageEnabled true\n        }\n    }\n</code></pre>\n<blockquote>\n<p>Notice the <code>rootProject.ext.&#x3C;VALUE>.</code>\nThis is referencing the values we set in the ext block in our gradle.properties file at the root\nlevel of the project.\nThis will be used to setup the signing of the apk when creating a release build.</p>\n</blockquote>\n<ol start=\"3\">\n<li><strong>Github Triplet Plugin</strong></li>\n</ol>\n<p>This plugin automates the deplyoment to PlayStore when CI tests pass. This includes release notes, screenshots, whats new section, version name, icons etc.\nOne caveat is that you will have to manually upload the APK to PlayStore the first time, but after that this plugin will handle the automation so that all you have to do is focus on the code and features you create. More on this plugin can be found <a href=\"https://github.com/Triple-T/gradle-play-publisher\">here</a>. This includes setup and how to use it. I advice you read through it and understand before proceeding.</p>\n<h3>CI configuration</h3>\n<p>Once we have all this configured, we can then configure Circle CI config file to automate the process. This will run the build, test the application and deploy to PlayStore based on your configuration settings above.</p>\n<p>There are a couple of scripts that may need to be included to make it much easier for deployment of the application. Remember how I mentioned that it is not good practice for the <code>jks</code> file to be pushed to Github or any VCS you use? Yes, these scripts ensure that the automation is seamless as if it were running on your development machine. I will start off with a couple of things you will need to setup.</p>\n<ul>\n<li><strong>Circle CI environment variables</strong></li>\n</ul>\n<p>Start off by setting Circle CI environment variables, These will be used to setup values that are specific for the project and also that will be used by the scripts we will write up. Some of the environment variables you may need to setup:</p>\n<pre><code class=\"language-plain\">DEV_API_BASE_URL=&#x3C;YOUR_DEV_BASE_URL>\nAPI_BASE_URL=&#x3C;YOUR_BASE_URL>\nAPI_KEY=&#x3C;YOUR_API_KEY>\nGITHUB_TOKEN=&#x3C;YOUR_GITHUB_TOKEN>\nSERVICE_ACCOUNT_EMAIL=&#x3C;YOUR_SERVICE_ACCOUNT_EMAIL>\nVERSION_NAME=1.0.0\nVERSION_CODE=1\nRELEASE_TRACK=beta\nPUBLISH_JSON_KEY=&#x3C;JSON_FILE>\nKEY_STORE_URI=&#x3C;KEY_STORE_URI>\nSTORE_FILE=&#x3C;STORE_FILE>\n</code></pre>\n<blockquote>\n<p>You may notice that the values are somewhat the same as the ones in your <code>gradle.properties</code> file, with 3 new additions.</p>\n</blockquote>\n<p><code>PUBLISH_JSON_KEY</code>, this is a unique key that you will use to verify you are the authorized account when publishing to PlayStore. Refer to <a href=\"https://github.com/codepath/android_guides/wiki/Automating-Publishing-to-the-Play-Store\">this</a> for more information on this.</p>\n<p>Once you have your JSON file, copy and paste that information as an env variable.</p>\n<p><code>KEY_STORE_URI</code> is, as the suffix suggests, uri location of your keystore file. Considering that you can not (and should not) push this to Github, you should be able to still access this somehow right?</p>\n<p>There is an easy way to do this using DropBox, yes, DropBox. A very simple hack is to upload your keystore file there and create a shareable link for the keystore file. With this, then you should be able to use that link to download the file and create a key store on your CI.</p>\n<pre><code class=\"language-bash\">export STORE_FILE_LOCATION=$HOME\"/app-dir/app.jks\"\n\n# download key store file from remote location\n# keystore URI will be the location uri for the *.jks file for signing application\nfunction downloadKeyStoreFile {\n    # use curl to download a keystore from $KEYSTORE_URI, if set,\n    # to the path/filename set in $KEYSTORE.\n    echo \"Looking for $STORE_FILE_LOCATION ...\"\n\n    if [ ! -f ${STORE_FILE_LOCATION} ] ; then\n        echo \"Keystore file is missing, performing download\"\n        # we're using curl instead of wget because it will not\n        # expose the sensitive uri in the build logs:\n        curl -L -o ${STORE_FILE} ${KEY_STORE_URI}\n    else\n            echo \"Keystore uri not set.  .APK artifact will not be signed.\"\n    fi\n}\n</code></pre>\n<blockquote>\n<p>This is a sample of the function you can use to download the keystore file in your project root and set up for successful builds.</p>\n</blockquote>\n<ul>\n<li><strong>Circle CI config.yml file</strong></li>\n</ul>\n<p>Configuring the <code>config.yml</code> file should be painless and easy, considering all the workload will be done by the scripts (will include in a few minutes).</p>\n<p>Some of the scripts you can use for deployment:</p>\n<pre><code class=\"language-bash\">#!/usr/bin/env bash\n\n# 1. http://deathstartup.com/?p=81\n# 2. https://gist.github.com/KioKrofovitch/716e6a681acb33859d16\n# 3. https://stackoverflow.com/questions/35440907/can-circle-ci-reference-gradle-properties-credentials\n\nexport GRADLE_PROPERTIES=$HOME\"/app-dir/gradle.properties\"\nexport KEYSTORE_PROPERTIES=$HOME\"/app-dir/keystores/keystore.properties\"\nexport PUBLISH_KEY_FILE=$HOME\"/app-dir/keystores/publish_key.json\"\nexport STORE_FILE_LOCATION=$HOME\"/app-dir/app.jks\"\n\nfunction copyEnvVarsToProperties {\n\n    echo \"Gradle Properties should exist at $GRADLE_PROPERTIES\"\n    echo \"Keystore Properties should exist at $KEYSTORE_PROPERTIES\"\n\n    if [ ! -f \"$KEYSTORE_PROPERTIES\" ]\n    then\n        echo \"${KEYSTORE_PROPERTIES} does not exist...Creating file\"\n\n        touch ${KEYSTORE_PROPERTIES}\n\n        echo \"keyAlias=$KEY_ALIAS\" >> ${KEYSTORE_PROPERTIES}\n        echo \"keyPassword=$KEY_PASSWORD\" >> ${KEYSTORE_PROPERTIES}\n        echo \"storeFile=$STORE_FILE\" >> ${KEYSTORE_PROPERTIES}\n        echo \"storePassword=$STORE_PASSWORD\" >> ${KEYSTORE_PROPERTIES}\n    fi\n\n    if [ ! -f \"$GRADLE_PROPERTIES\" ]\n    then\n        echo \"${GRADLE_PROPERTIES} does not exist...Creating Properties file\"\n\n    echo \"API_BASE_URL=$API_BASE_URL\" >> ${GRADLE_PROPERTIES}\n    echo \"DEV_API_BASE_URL=$DEV_API_BASE_URL\" >> ${GRADLE_PROPERTIES}\n    echo \"API_KEY=$API_KEY\" >> ${GRADLE_PROPERTIES}\n    echo \"SERVICE_ACCOUNT_EMAIL=$SERVICE_ACCOUNT_EMAIL\" >> ${GRADLE_PROPERTIES}\n\n    fi\n\n    if [ ! -f \"$PUBLISH_KEY_FILE\" ]\n    then\n        echo \"${PUBLISH_KEY_FILE} does not exist...creating properties file\"\n\n        touch ${PUBLISH_KEY_FILE}\n\n        echo \"$PUBLISH_JSON_KEY\" >> ${PUBLISH_KEY_FILE}\n    fi\n}\n\n\n# download key store file from remote location\n# keystore URI will be the location uri for the *.jks file for signing application\nfunction downloadKeyStoreFile {\n    # use curl to download a keystore from $KEYSTORE_URI, if set,\n    # to the path/filename set in $KEYSTORE.\n    echo \"Looking for $STORE_FILE_LOCATION ...\"\n\n    if [ ! -f ${STORE_FILE_LOCATION} ] ; then\n        echo \"Keystore file is missing, performing download\"\n        # we're using curl instead of wget because it will not\n        # expose the sensitive uri in the build logs:\n        curl -L -o ${STORE_FILE} ${KEY_STORE_URI}\n    else\n            echo \"Keystore uri not set.  .APK artifact will not be signed.\"\n    fi\n}\n\n# updates the version code based on the current branch\nfunction updateVersionCodeAndTrack(){\n    versionCode=$(git rev-list --first-parent --count origin/${CIRCLE_BRANCH})\n    versionName=$(git describe --dirty)\n\n#    if [\"${versionName}\" == \"fatal: No names found, cannot describe anything.\"]; then\n#        major=$(expr ${CIRCLE_BUILD_NUM} - ${CIRCLE_PREVIOUS_BUILD_NUM})\n#        versionName=${major}.0.0\n#    fi\n\n    if [\"${versionName}\" == \"fatal: No names found, cannot describe anything.\"]; then\n        versionName=1.0.0\n    fi\n\n    if [ \"${CIRCLE_BRANCH}\" == \"develop\" ]; then\n        echo \"VERSION_NAME=${versionName}\" >> ${GRADLE_PROPERTIES}\n        echo \"VERSION_CODE=${versionCode}\" >> ${GRADLE_PROPERTIES}\n        echo \"RELEASE_TRACK=\\\"beta\\\"\" >> ${GRADLE_PROPERTIES}\n\n    elif [ \"${CIRCLE_BRANCH}\" == \"master\" ] ; then\n        echo \"VERSION_NAME=${versionName}\" >> ${GRADLE_PROPERTIES}\n        echo \"VERSION_CODE=${versionCode}\" >> ${GRADLE_PROPERTIES}\n        echo \"RELEASE_TRACK=\\\"production\\\"\" >> ${GRADLE_PROPERTIES}\n    fi\n}\n\n# execute functions\ncopyEnvVarsToProperties\ndownloadKeyStoreFile\nupdateVersionCodeAndTrack\n</code></pre>\n<blockquote>\n<p>A sample script for CircleCI to use in build and deployment circleci<em>env</em>setup.sh</p>\n</blockquote>\n<p>Now onto the part where magic happens! The <code>config.yml</code> file!</p>\n<p>CircleCI made version 2.0 of their build tool easy and intuitive to use, making creating a proper workflow easy. Here is a sample <code>config.yml</code> file with all the bells and whistles that allow for continuous integration and deployment of and Android application.</p>\n<pre><code class=\"language-yaml\">version: 2\njobs:\n       build:\n                working_directory: ~/appp-dir\n                docker:\n                        - image: circleci/android:api-26-alpha\n                environment:\n                        # Customize the JVM maximum heap limit\n                        _JAVA_OPTIONS: \"-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap\"\n                        JVM_OPTS: -Xmx3200m\n                        TERM: dumb\n\n                steps:\n                        # checkout onto repo\n                        - checkout\n\n                        # setup environment for downloading necessary assets to use for deployment\n                        - run:\n                                name: Setup environment\n                                command: ./scripts/circleci_env_setup.sh\n\n                        # Download and cache dependencies\n                        - restore_cache:\n                                key: App-{{ checksum \"build.gradle\" }}-{{ .Branch }}\n                                keys:\n                                      - app-{{ checksum \"app/build.gradle\" }}\n\n                        # download dependencies\n                        - run:\n                               name: Download dependencies\n                               command: ./gradlew androidDependencies\n\n                        - save_cache:\n                                key: App-{{ checksum \"build.gradle\" }}-{{ .Branch }}\n                                paths: ~/.gradle\n                                keys:\n                                      - app-{{ checksum \"app/build.gradle\" }}\n\n                        - persist_to_workspace:\n                                root: .\n                                paths: .\n\n       test:\n               docker:\n                       - image: circleci/android:api-26-alpha\n               working_directory: ~/moja-dir\n               steps:\n                       - attach_workspace:\n                              at: .\n\n                       - restore_cache:\n                              key: App-{{ checksum \"build.gradle\" }}-{{ .Branch }}\n                              keys:\n                                      - app-{{ checksum \"app/build.gradle\" }}\n\n                       - run:\n                               name: Run Tests\n                               command: ./gradlew test\n\n                       - store_test_results:\n                               path: ~/app-dir/app/build/test-results/\n\n                       - store_artifacts:\n                               path: ~/app-dir/app/build/reports/tests/\n                               destination: /app/reports/\n\n                       - persist_to_workspace:\n                               root: .\n                               paths: .\n\n       deployBeta:\n               docker:\n                       - image: circleci/android:api-26-alpha\n\n               working_directory: ~/app-dir\n               steps:\n                       - attach_workspace:\n                              at: .\n\n                       - restore_cache:\n                              key: App-{{ checksum \"build.gradle\" }}-{{ .Branch }}\n                              keys:\n                                      - app-{{ checksum \"app/build.gradle\" }}\n\n                       - run:\n                              name: Assemble APKs and distribute to Beta Testing\n                              command: ./scripts/circleci_beta_setup.sh\n\n                       - store_artifacts:\n                               path: ~/app-dir/app/build/outputs/apk/\n                               destination: /app/apks/\n\n                       - deploy:\n                               name: Deploy to Play Store\n                               command: ./gradlew :app:publishApkRelease\n\n       deployProd:\n               docker:\n                       - image: circleci/android:api-26-alpha\n\n               working_directory: ~/app-dir\n               steps:\n                       - attach_workspace:\n                              at: .\n\n                       - restore_cache:\n                              key: App-{{ checksum \"build.gradle\" }}-{{ .Branch }}\n                              keys:\n                                      - app-{{ checksum \"app/build.gradle\" }}\n\n                       - run:\n                               name: Create Apk(s)\n                               command: ./gradlew :app:assembleRelease\n\n                       - store_artifacts:\n                               path: ~/app-dir/app/build/outputs/apk/release/\n                               destination: /app/apks/\n\n                       - store_artifacts:\n                               path: ~/app-dir/app/build/outputs/mapping/\n                               destination: /app/mapping/\n\n                       - deploy:\n                               name: Deploy to Play Store\n                               command: ./gradlew :app:publishApkRelease\n\n# define work flows\nworkflows:\n        version: 2\n        build-test-distribute-deploy:\n                jobs:\n                        - build\n\n                        - test:\n                                requires:\n                                        - build\n\n                        # deploys to Beta\n                        - deployBeta:\n                                requires:\n                                        - test\n                                filters:\n                                        branches:\n                                                only:\n                                                        - staging\n                                                ignore:\n                                                        - /^dev-.*/\n                                                        - develop\n                                                        - master\n                                                        - /^feature-.*/\n                                                        - /^feature/.*/\n                                                        - /^bugfix-.*/\n                                                        - /^bugfix/.*/\n                                                        - /^hotfix/.*/\n\n                        # will only deploy if on master and release branches\n                        - deployProd:\n                                requires:\n                                        - test\n                                filters:\n                                        branches:\n                                                only:\n                                                        - master\n                                                ignore:\n                                                        - /^dev-.*/\n                                                        - develop\n                                                        - staging\n                                                        - /^feature-.*/\n                                                        - /^feature/.*/\n                                                        - /^bugfix-.*/\n                                                        - /^bugfix/.*/\n                                                        - /^hotfix/.*/\n</code></pre>\n<blockquote>\n<p><code>config.yml</code> file for building, tesing and deploying to PlayStore.</p>\n</blockquote>\n<p>That pretty much wraps it up for CI and CD with CircleCI for Android. Give it a try and automate the process, the only thing that you will need to do is:</p>\n<ul>\n<li>write tests</li>\n<li>write code to pass tests</li>\n<li>git add .</li>\n<li>git commit</li>\n<li>git push</li>\n<li>Deploy</li>\n<li>Pray (just kidding)</li>\n<li>No, really. Pray!</li>\n<li>Win</li>\n</ul>\n<p>Hope this is helpful, until next time Droids!</p>"}},{"node":{"frontmatter":{"title":"My Journey in Kotlin thus far","subtitle":"Kotlin adventures","excerpt":"It has been a while since my last blog post. And since my last blog post I set out on a journey to learn and grow in learning new technologies and understanding how they work. What really made my adventure exciting was when I discovered a little jewel called Kotlin.","path":"/tech/kotlin-adventures","date":"September 10, 2017","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"kotlin_feature.png","thumbnail":"kotlin_thumb.jpg","teaser":"kotlin_thumb.jpg","credit":"Kotlinlang.org","creditlink":null},"tags":["Android","Java","language","kotlin"]},"excerpt":"It has been a while since my last blog post. And since my last blog post I set out on a journey to learn and grow in learning new…","timeToRead":7,"html":"<p>It has been a while since my last blog post. And since my last blog post I set out on a journey to learn and grow in learning new technologies and understanding how they work. What really made my adventure exciting was when I discovered a little jewel called Kotlin.\nNow, I know it has become a hot topic with almost everyone talking about Kotlin, especially in the Android developer circles and community. Everyone is talking about the new kid on the block (despite the language not actually being that new).</p>\n<p>Its recent adoption into creation of mobile applications changes how Android applications are being created, introducing functional programming, extension functions and a huge amount in number of lines written, I can understand why people are ready to jump straight into Kotlin development.</p>\n<p>Personally, I am not a Java developer and I always had a bit of a struggle from time to time when it came to Java, especially the verbosity of the language. I appreciate the strictness of the language because it means you have to explicit about what you are trying to achieve and not expect the compiler to read your thoughts. This is quite handy when it comes to building robust applications that will <em>\"stand the test of time\"</em>. Kotlin strives to be less verbose and still perform just as well as Java in the JVM. The fact that it is 100% interroperable with Java means that it can be used side by side and your users will be none the wiser as there will be no difference in how the application performs.</p>\n<p>The reason I joined the <em>Kotlin bandwagon</em> was because I was hungering to learn something new and Kotlin happened to just land in my radar. Admittedly, I started learning Ruby before Kotlin and what caught my eye with Kotlin was how it brought aspects that I was already familiar with in Python, JavaScript, Java and a bit of Ruby. It made me happy when writing code for Android applications again, I did not cringe when I would think of the number of lines of code I had to write in Java to create an application.</p>\n<p>This is not to say that Java is going anywhere, it is still a fantastic language that many systems and organisations still use and will not be abandoned just because there is a new shiny toy that comes with all the fantastic features of a modern language.</p>\n<p>What really intrigued me with Kotlin was how I felt like I had more control and flexibility as to how I wrote code for Android. I have to say that I have not tried writing Kotlin code to be used for server side work or front end work (Kotlin can be compiled to JavaScript, read <a href=\"https://kotlinlang.org/docs/reference/js-overview.html\">here</a> for more), considering that that is what it was intended for in the very beginning, this is because I prefer doing that in Python(<a href=\"http://flask.pocoo.org/\">Flask</a>) and front end work in JavaScript(<a href=\"https://facebook.github.io/react/\">ReactJs</a> for that matter). Just because I love the seperation in my head.</p>\n<p>On to my point, there are subtle (or not so subtle) differences when it comes to Kotlin and Java, and there are too many to highlight here, so I shall highlight only those which I felt really helped me write much more concise, readable and extensible code for Android.</p>\n<h3>Extension functions</h3>\n<p>This for me is a huge win when it comes to writing Android applications in Kotlin. It not only reduces boilerplate code, but also greatly makes code much much more readable. I shall give a use-case:</p>\n<p>Say, you want to create a rotation animation for an image, which will be a progress spinner of sorts. To do this, you will need to do the following in Java.</p>\n<pre><code class=\"language-java\">ImageView progressImg = findViewById&#x3C;ImageView>(R.id.rotateImag)\nRotateAnimation rotateAnimation = RotateAnimation(0F, 360f, Animation.RELATIVE_TO_SELF,\n            0.5f, Animation.RELATIVE_TO_SELF, 0.5f)\nrotateAnimation.setInterpolator(new LinearInterpolator())\nrotateAnimation.setDuration(800)\nrotateAnimation.setRepeatCount(Animation.INFINITE)\nprogressImg.setAnimation(rotateAnimation)\n</code></pre>\n<blockquote>\n<p>Java implementation for a Rotation Animation</p>\n</blockquote>\n<pre><code class=\"language-kotlin\">fun View.createRotateAnimation(duration: Long) {\n    val rotateAnimation = RotateAnimation(0F, 360f, Animation.RELATIVE_TO_SELF,\n                0.5f, Animation.RELATIVE_TO_SELF, 0.5f)\n    rotateAnimation.interpolator = LinearInterpolator()\n    rotateAnimation.duration = duration\n    rotateAnimation.repeatCount = Animation.INFINITE\n    this.startAnimation(rotateAnimation)\n}\n</code></pre>\n<blockquote>\n<p>Kotlin implementation for creating a rotation animation on a View</p>\n</blockquote>\n<p>Now, it may not seem like much, but think about how many times you will have to create the rotation implementation in Java. You may end up creating a static method in a final class just to reduce the boilerplate code written.</p>\n<pre><code class=\"language-java\">final class AnimUtils{\n    public static RotateAnimation createRotationAnimation(){\n        RotateAnimation rotateAnimation = RotateAnimation(0F, 360f, Animation.RELATIVE_TO_SELF,\n                    0.5f, Animation.RELATIVE_TO_SELF, 0.5f);\n        rotateAnimation.setInterpolator(new LinearInterpolator());\n        rotateAnimation.setDuration(800);\n        rotateAnimation.setRepeatCount(Animation.INFINITE);\n        return rotateAnimation;\n    }\n}\n\n//... somewhere in your code\nprogressImg.setAnimation(AnimUtils.createRotationAnimation)\n</code></pre>\n<blockquote>\n<p>Now, this may not be an issue per-say, I mean you have created an easily accessible method to all classes that may need to use it.</p>\n</blockquote>\n<p>Now, how about Kotlin?\nThe fact that we can create extension functions, which in essence is just adding a function to a class that we do not own. In this case we are simply adding a rotation animation to the View class and this allows use to animate any View by simply calling this function as if it belongs to the Android SDK.</p>\n<p>A simple use case</p>\n<pre><code class=\"language-kotlin\">//... assuming you have already initialized your ImageView/ or view\nprogressImg.createRotateAnimation(800)\n</code></pre>\n<p>And that is all! Now with this you do not have to reference a class' static method in order to run a function. This allows more cleaner and clearer code and of course means you can add much more to the function if the need ever arose.</p>\n<h3>Data Classes</h3>\n<p>Now this for me is another big win. In Java, we usually need to create POJO(Plain Old Java Objects or Java Beans) to represent certain data items or objects in data structures of applications. Usually they could end up being 100s of lines of code involving <code>hashCodes()</code>, <code>toString()</code> and getter and setter methods. Say for example we want to create a data structure involving a Person object</p>\n<pre><code class=\"language-java\">class Person{\n    private String firstName;\n    private String lastName;\n    private int age;\n    private String gender;\n\n    public Person(String firstName, String lastName, int age, String gender){\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.age = age;\n        this.gender = gender;\n    }\n\n    public String getFirstName(){\n        return firstName;\n    }\n\n    public void setFirstName(String name){\n        this.firstName = name;\n    }\n\n    public String getLastName(){\n        return lastName;\n    }\n\n    public void setlastName(name){\n        this.lastName = name\n    }\n\n    public int getAge(){\n        return age;\n    }\n\n    public void setAge(age){\n        this.age = age;\n    }\n\n    public String getGender(){\n        return gender;\n    }\n\n    public void setGender(gender){\n        this.gender = gender;\n    }\n\n    // hashCodes and toString methods\n}\n</code></pre>\n<blockquote>\n<p>Person object in Java</p>\n</blockquote>\n<p>Now, the same in Kotlin is executed in 1 line of code</p>\n<pre><code class=\"language-kotlin\">data class Person(var firstName : String, var lastName : String, var age : Int, var gender : String)\n// the toString, errorCode, hashCode and even copy are autogenerated\n</code></pre>\n<blockquote>\n<p>Person object in Kotlin</p>\n</blockquote>\n<p>This not only reduces boiler plate code, but ensures that I concentrate on how this object will be used, instead of constantly thinking whether I correctly implemented a getter/setter method to the class or whether there is a <code>toString()</code> method implemented so I do not get an odd looking memory location hex String.</p>\n<h3>Named and Optional Arguments</h3>\n<p>Now this will be the final thing I shall write about in this post. Named arguments in functions are common in languages such as <code>Python</code>. This allows us to, for example refer to a specific argument for a given parameter instead of trying to mentally remember if position two takes a <code>Double</code> or a <code>Long</code> given that there are 5 parameters to pass in into the given function.</p>\n<p>I shall write a simple Kotlin function that allows optional arguments and which in turn will deal with named arguments. Say, you are writing a function that has 5 arguments of which 2 are optional(have default values)</p>\n<pre><code class=\"language-kotlin\">// calculates distance of object from another object given its coordinates and the speed in which it is moving\nfun calculateDistance(x : Int, y: Int, z: Int, speed: Double = 0.0, other : Any) : Int{\n    val dx = other.x - x\n    val dy = other.y - y\n    val dz = other.z - z\n    val ds = if(speed != 0.0) other.speed - speed else speed\n    // some awesome distance calculating algorithm\n\n    return distance\n}\n\n// usage, PositionElement is a simple class that randomly places the object on a plane\n// given its x, y and z co-ordinates and its speed\nval A = PositionElement(5, 6, 15, 8.5)\nval B = PositionElement(3, 8, 1, 19.5)\n\n// calculate the distance of A from B\ndistanceForAFromB = calculateDistance(x = A.x, y = A.y, z = A.z, speed = A.speed, other = B)\n\n// assuming that A has no speed\nval A = PositionElement(5, 6, 15, 0.0)\ndistanceForAFromB = calculateDistance(x = A.x, y = A.y, z = A.z, other = B)\n</code></pre>\n<p>As you can see above, the named arguments help in determining what parameter is being passed where in a function invocation and allows for easier calculation and making your code much much more readable and also of course allows you to not keep switching files to make sure the correct parameter is passed.</p>\n<h4>Conclusion</h4>\n<p>I am still on this Kotlin journey and I have to say that I am so far pleased with the fact I have been able to write much much more concise code as compare to before. There is so much more to Kotlin than meets the eye and I am so far please with the language and how it brings a sense of happiness when writing code in Kotlin.</p>"}},{"node":{"frontmatter":{"title":"Bottom up algorithms","subtitle":"A short description on bottom up algorithms","excerpt":"Going bottom-up is a way to avoid recursion, saving the memory cost that recursion incurs when it builds up the call stack.","path":"/tech/bottom-up-algorithms","date":"May 18, 2017","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":null,"thumbnail":"bottom-up.png","teaser":"bottom-up.png","credit":null,"creditlink":null},"tags":["data-structures","algorithms"]},"excerpt":"Going bottom-up is a way to avoid recursion, saving the memory cost that recursion incurs when it builds up the call stack. Put simply, a…","timeToRead":1,"html":"<p>Going bottom-up is a way to avoid recursion, saving the memory cost that recursion incurs when it builds up the call stack.</p>\n<p>Put simply, a bottom-up algorithm \"starts from the beginning,\" while a recursive algorithm often \"starts from the end and works backwards.\"</p>\n<p>For example, if we wanted to multiply all the numbers in the range 1...n1...n, we could use this cute, top-down, recursive one-liner:</p>\n<pre><code class=\"language-python\">def product_1_to_n(n):\n    # we assume n >= 1\n    return n * product_1_to_n(n-1) if n > 1 else 1\n</code></pre>\n<p>This approach has a problem: it builds up a call stack of size O(n)O(n), which makes our total memory cost O(n)O(n). This makes it vulnerable to a stack overflow error, where the call stack gets too big and runs out of space.</p>\n<p>To avoid this, we can instead go bottom-up:</p>\n<pre><code class=\"language-python\">def product_1_to_n(n):\n    # we assume n >= 1\n\n    result = 1\n    for num in range(1, n+1):\n        result *= num\n\n    return result\n</code></pre>\n<p>This approach uses O(1)O(1) space (O(n)O(n) time).</p>\n<blockquote>\n<p>Some compilers and interpreters will do what's called tail call optimization (TCO), where it can optimize some recursive functions to avoid building up a tall call stack. Python and Java decidedly do not use TCO. Some Ruby implementations do, but most don't. Some C implementations do, and the JavaScript spec recently allowed TCO. Scheme is one of the few languages that guarantee TCO in all implementations. In general, best not to assume your compiler/interpreter will do this work for you.</p>\n</blockquote>\n<p>Going bottom-up is a common strategy for dynamic programming problems, which are problems where the solution is composed of solutions to the same problem with smaller inputs (as with the fibonacci problem, above). The other common strategy for dynamic programming problems is memoization.</p>"}},{"node":{"frontmatter":{"title":"Binary Trees Heights","subtitle":"Relationship between a binary tree's height and its number of nodes","excerpt":"A binary tree is a tree where every node has two or fewer children. The children are usually called left and right.","path":"/tech/binary-tree-heights","date":"May 17, 2017","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":null,"thumbnail":"binary_tree_depth.svg","teaser":"binary_tree_depth.svg","credit":null,"creditlink":null},"tags":["data-structures","binary-tree"]},"excerpt":"A binary tree is a tree where every node has two or fewer children. The children are usually called left and right. This lets us build a…","timeToRead":3,"html":"<p>A binary tree is a tree where every node has two or fewer children. The children are usually called left and right.</p>\n<pre><code class=\"language-python\">class BinaryTreeNode(object):\n\n    def __init__(self, value):\n        self.value = value\n        self.left  = None\n        self.right = None\n</code></pre>\n<p>This lets us build a structure like this:</p>\n<p><img src=\"https://www.interviewcake.com/images/svgs/binary_tree__depth_5.svg?bust=145\"></p>\n<blockquote>\n<p>A tree represented by cirlces connected with lines.</p>\n</blockquote>\n<p>The root node is on top, and connects to 2 children below it. Each of those children connect to 2 children below them, which all connect to their own 2 children, which all connect to their own 2 children.</p>\n<p>That particular example is special because every level of the tree is completely full. There are no \"gaps.\" We call this kind of tree \"perfect.\"</p>\n<p>Binary trees have a few interesting properties when they're perfect:</p>\n<ol>\n<li><strong>Property 1: the number of total nodes on each \"level\" doubles as we move down the tree.</strong></li>\n</ol>\n<p><img src=\"https://www.interviewcake.com/images/svgs/binary_tree__depth_5_with_number_of_nodes_labelled.svg?bust=145\"></p>\n<p>A binary tree with 5 rows of nodes. The root node is on top, and every node has 2 children in the row below. Each row is labelled with the number of nodes in the row, which doubles from the top down: 1, 2, 4, 8, 16.</p>\n<ol start=\"2\">\n<li><strong>Property 2: the number of nodes on the last level is equal to the sum of the number of nodes on all other levels (plus 1).</strong></li>\n</ol>\n<p>In other words, about half of our nodes are on the last level.</p>\n<p>Let's call the number of nodes <strong>n</strong>, and the height of the tree <strong>h</strong>. <strong>h</strong> can also be thought of as the \"number of levels.\"</p>\n<p>If we had <em>h</em>, how could we calculate <em>n</em>?</p>\n<p>Let's just add up the number of nodes on each level! How many nodes are on each level?</p>\n<p>If we zero-index the levels, the number of nodes on the <em>x<sup>th</sup></em> level is exactly 2<sup>x</sup></p>\n<ol>\n<li>Level 0: 2<sup>0</sup> nodes,</li>\n<li>Level 1: 2<sup>1</sup> nodes,</li>\n<li>Level 2: 2<sup>2</sup> nodes,</li>\n<li>Level 3: 2<sup>3</sup> nodes,</li>\n<li>etc</li>\n</ol>\n<p>So our total number of nodes is:</p>\n<p>n = 2<sup>0</sup> + 2<sup>1</sup> + 2<sup>2</sup> + 2<sup>3</sup> + ... + 2<sup>{h-1}</sup></p>\n<blockquote>\n<p>Why only up to 2<sup>{h-1}</sup>? Notice that we started counting our levels at 0. So if we have h levels in total, the last level is actually the \"h-1\"-th level. That means the number of nodes on the last level is 2<sup>{h-1}</sup>.</p>\n</blockquote>\n<p>But we can simplify. <em>Property 2</em> tells us that the number of nodes on the last level is (1 more than) half of the total number of nodes, so we can just take the number of nodes on the last level, multiply it by 2, and subtract 1 to get the number of nodes overall. We know the number of nodes on the last level is 2<sup>h-1</sup>, So:</p>\n<pre>\nn = 2<sup>h-1</sup> * 2 - 1\n\nn = 2<sup>h-1</sup> * 2 - 1\n\nn = 2<sup>h-1</sup> * 2^1 - 1\n\nn = 2<sup>h-1+1</sup>- 1\n\nn = 2<sup>h</sup> - 1\n</pre>\n<p>So that's how we can go from h to n. What about the other direction?</p>\n<p>We need to bring the h down from the exponent. That's what logs are for!</p>\n<p>First, some quick review. log<sub>10</sub>(100) simply means, <strong>What power must you raise 10 to in order to get 100?</strong>. Which is 2, because 10<sup>2</sup> = 100</p>\n<p>We can use logs in algebra to bring variables down from exponents by exploiting the fact that we can simplify log<sub>10</sub>(10<sup>2</sup>)</p>\n<p>What power must we raise 10 to in order to get 10<sup>2</sup>? That's easy—it's 2.</p>\n<p>So in this case we can take the log<sub>2</sub> of both sides:</p>\n<pre>\nn = 2<sup>h</sup> - 1\nn + 1 = 2<sup>h</sup>\nlog<sub>2</sub>((n+1)) = log<sub>2</sub>(2<sup>h</sup>)\nlog<sub>2</sub>(n+1) = h\n</pre>\n<p>So that's the relationship between height and total nodes in a perfect binary tree.</p>"}},{"node":{"frontmatter":{"title":"Concept of Memoize","subtitle":"A gentle introduction to memoize","excerpt":"Memoization ensures that a function doesn't run for the same inputs more than once by keeping a record of the results for given inputs (usually in a dictionary).","path":"/tech/memoize-python","date":"May 17, 2017","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":null,"thumbnail":"memoize.png","teaser":"memoize.png","credit":null,"creditlink":null},"tags":["data-structures","python","algorithms","memoize"]},"excerpt":"Memoization ensures that a function doesn't run for the same inputs more than once by keeping a record of the results for given inputs…","timeToRead":2,"html":"<p>Memoization ensures that a function doesn't run for the same inputs more than once by keeping a record of the results for given inputs (usually in a dictionary).</p>\n<p>For example, a simple recursive function for computing the n<sup>th</sup> fibonacci number:</p>\n<pre><code class=\"language-python\">def fib_recursive(n):\n    if n &#x3C; 0:\n        raise IndexError('Index was negative. No such thing as a negative index in a series.')\n\n    # base cases\n    if n in [0, 1]:\n        return n\n\n    print \"computing fib_recursive(%i)\" % n\n    return fib_recursive(n - 1) + fib_recursive(n - 2)\n</code></pre>\n<p>This will run the same input a couple of times</p>\n<pre><code class=\"language-bash\">>>> fib_recursive(8)\ncomputing fib_recursive(8)\ncomputing fib_recursive(7)\ncomputing fib_recursive(6)\ncomputing fib_recursive(5)\ncomputing fib_recursive(4)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(2)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(4)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(2)\ncomputing fib_recursive(5)\ncomputing fib_recursive(4)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(2)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(6)\ncomputing fib_recursive(5)\ncomputing fib_recursive(4)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(2)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(4)\ncomputing fib_recursive(3)\ncomputing fib_recursive(2)\ncomputing fib_recursive(2)\n21\n</code></pre>\n<p>We can imagine the recursive calls of this function as a tree, where the two children of a node are the two recursive calls it makes. We can see that the tree quickly branches out of control:</p>\n<p><img src=\"https://www.interviewcake.com/images/svgs/fibonacci__binary_tree_recursive.svg?bust=145\"></p>\n<p>To avoid the duplicate work caused by the branching, we can wrap the function in a class that stores an instance variable, memo, that maps inputs to outputs. Then we simply:</p>\n<ol>\n<li>Check memo to see if we can avoid computing the answer for any given input, and</li>\n<li>Save the results of any calculations to memo.</li>\n</ol>\n<pre><code class=\"language-python\">class Fibber:\n    def __init__(self):\n        self.memo = {}\n\n    def fib(self, n):\n\n        if n &#x3C; 0:\n            raise Exception(\"Index was negative. No such thing as a negative index in a series.\")\n\n        # base cases\n        elif n in [0, 1]:\n            return n\n\n        # see if we've already calculated this\n        if n in self.memo:\n            print \"grabbing memo[%i]\" % n\n            return self.memo[n]\n\n        print \"computing fib(%i)\" % n\n        result = self.fib(n - 1) + self.fib(n - 2)\n\n        # memoize\n        self.memo[n] = result\n\n        return result\n</code></pre>\n<p>We save a bunch of calls by checking the memo:</p>\n<pre><code class=\"language-python\">>>> Fibber().fib(8)\ncomputing fib(8)\ncomputing fib(7)\ncomputing fib(6)\ncomputing fib(5)\ncomputing fib(4)\ncomputing fib(3)\ncomputing fib(2)\ngrabbing memo[2]\ngrabbing memo[3]\ngrabbing memo[4]\ngrabbing memo[5]\ngrabbing memo[6]\n21\n</code></pre>\n<p>Now in our recurrence tree, no node appears more than twice:</p>\n<p><img src=\"https://www.interviewcake.com/images/svgs/fibonacci__binary_tree_memoized.svg?bust=145\"></p>\n<p>Memoization is a common strategy for dynamic programming problems, which are problems where the solution is composed of solutions to the same problem with smaller inputs (as with the fibonacci problem, above). The other common strategy for dynamic programming problems is going bottom-up, which is usually cleaner and often more efficient.</p>"}},{"node":{"frontmatter":{"title":"Raspberry Pi Hotspot configuration","subtitle":"A small demo of configuring a hotspot for your Raspberry Pi","excerpt":"Configuring a Raspberry Pi is fun especially when you delve into IoT and start tinkering around with making machines talk to each other. This tool is perfect for such fun. It is even better when you can get it connected to the internet and perform even more functions such as make your coffee before you wake up or turn off your lights from wherever you are.","path":"/tech/raspberry-pi-hotspot","date":"March 19, 2017","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":null,"thumbnail":"raspberrypi.png","teaser":"raspberrypi.png","credit":null,"creditlink":null},"tags":["iot","raspberry-pi","wifi"]},"excerpt":"Configuring a Raspberry Pi is fun especially when you delve into IoT and start tinkering around with making machines talk to each other…","timeToRead":9,"html":"<p>Configuring a Raspberry Pi is fun especially when you delve into IoT and start tinkering around with making machines talk to each other. This tool is perfect for such fun. It is even better when you can get it connected to the internet and perform even more functions such as make your coffee before you wake up or turn off your lights from wherever you are.</p>\n<p>Most of these functions may require an internet connection and this means that your Pi(I will start calling it Pi for short from now on, not to be confused with the Math constant), may have to be able to generate its own hotspot. This is limiting considering Pis do not essentially come with their own <strong>WiFi dongles</strong> and you will be required to buy your own or always have the Pi set up where there will always be an internet connection.</p>\n<p>For today, we shall configure a Pi to generate its own hotspot when it can not find any known hotspots in its vicinity and also have the added benefit of connecting to a hotspot when there is a known network.</p>\n<h3>Aim</h3>\n<p>Raspberry Pi searches for known router's (SSID)</p>\n<p>If the router is not found then it creates a hotspot so tablets, phones and computers can connect to the Raspberry Pi's WiFi hotspot, which is not routed to the internet but allows a connection via SSH, VNC etc.</p>\n<h3>Requirements</h3>\n<p>For this, all you will need:</p>\n<ul>\n<li>Raspberry Pi 3 or other Raspberry Pi set up with a WiFi dongle</li>\n<li>Internet connection</li>\n<li>WiFi connection set up on your router</li>\n</ul>\n<h3>Step 1</h3>\n<p>This step will mostly be for settin up tools we need for the Pi. To start off hostapd hotspot client and dnsmasq lightweight dns server need to be installed.</p>\n<p>Open a Terminal session in your Pi and update Raspbian with the latest updates by entering the commands:</p>\n<pre><code class=\"language-sh\">$ sudo apt-get update\n$ sudo apt-get upgrade\n</code></pre>\n<p>This will update the packages on the Rasberry Pi</p>\n<p>Now, install hostapd. Enter the command:</p>\n<pre><code class=\"language-sh\">$ sudo apt-get install hostapd\n</code></pre>\n<p>enter Y when prompted.</p>\n<p>Install dnsmasq with the command:</p>\n<pre><code class=\"language-sh\">sudo apt-get install dnsmasq\n</code></pre>\n<p>enter Y when prompted</p>\n<p>The installers will have set up the programme so they run when the pi is started. For this setup they only need to be started if the home router is not found. So automatic startup needs to be disabled. This is done with the following commands:</p>\n<pre><code class=\"language-sh\">sudo systemctl disable hostapd\n\nsudo systemctl disable dnsmasq\n</code></pre>\n<p>Now the hostspot configuration file can be setup. This contains the name of the WiFi signal you will need to connect to (SSID) and the security password.</p>\n<h4>Hostapd Configuration</h4>\n<p>Using a text editor edit the hostapd configuration file. This file won't exist at this stage so it will be blank.</p>\n<pre><code class=\"language-sh\">sudo nano /etc/hostapd/hostapd.conf\n</code></pre>\n<p>This will create the hostapd.conf</p>\n<p>enter or paste the settings:</p>\n<pre><code class=\"language-plain\">interface=wlan0\ndriver=nl80211\nssid=RPI3WiFi\nhw_mode=g\nchannel=6\nwmm_enabled=0\nmacaddr_acl=0\nauth_algs=1\nignore_broadcast_ssid=0\nwpa=2\nwpa_passphrase=1234567890\nwpa_key_mgmt=WPA-PSK\nwpa_pairwise=TKIP\nrsn_pairwise=CCMP\n</code></pre>\n<p>A brief breakdown of what the above means:</p>\n<ul>\n<li>interface will be wlan0</li>\n<li>driver nl80211 works with the Raspberry Pi 3 onboard WiFi but you will need to check that your wifi dongle is compatable and can use AP mode.</li>\n</ul>\n<p>For more information on wifi dongles check <a href=\"elinux.org/RPi_USB_Wi-Fi_Adapters\">here</a></p>\n<ul>\n<li>The SSID is the name of the WiFi signal broadcast from the RPi, which you will connect to with your Tablet or phones WiFi settings.</li>\n<li>channel can be set between 1 and 13. If you are having trouble connection because of to many wifi signals in your area are using channel 6 then try another channel.</li>\n<li>wpa_passphrase is the password you will need to enter when you first connect a device to your Raspberry Pi's hotspot. This should be at least 8 characters and a bit more difficult to guess than my example.</li>\n</ul>\n<p>To save the config file press ctrl &#x26; o and to exit nano press Ctrl &#x26; x</p>\n<p>Now the default file for hostapd needs to be updated to point to where the config file is stored.</p>\n<p>In terminal enter the command</p>\n<pre><code class=\"language-sh\">sudo nano /etc/default/hostapd\n</code></pre>\n<p>Change:</p>\n<pre><code class=\"language-plain\">#demon_conf=\"\"\n</code></pre>\n<p>to</p>\n<pre><code class=\"language-plain\">demon_conf=\"/etc/hostapd/hostapd.conf\"\n</code></pre>\n<p>And save.</p>\n<h4>dnsmasq configuration</h4>\n<p>Next dnsmasq need to be configured to allow the PI to act as a router and issue IP addresses.</p>\n<pre><code class=\"language-sh\">$ sudo nano /etc/dnsmasq.conf\n</code></pre>\n<p>Go to the bottom of the file and add the following lines</p>\n<pre><code class=\"language-plain\">#Pi3Hotspot Config\n#stop DNSmasq from using resolv.conf\nno-resolv\n#Interface to use\ninterface=wlan0\nbind-interfaces\ndhcp-range=192.168.40.5,192.168.40.100,255.255.255.0,12h\n</code></pre>\n<p>And then save (ctrl &#x26; o) and exit (ctrl &#x26; x)</p>\n<h3>Step 2</h3>\n<p>Now that <strong>hostapd</strong> and <strong>dnsmasq</strong> are configured we now need to make some changes to the interfaces file and then add a script that will detect if you are at home or not.</p>\n<p>Next we need to edit the interfaces file. There will be several entries already in the file. Look for references to <em>wlan0</em> and alter them as below. Any reference to <em>wpa</em>conf_ for wlan0 should be disabled by putting a # at the start of the line.</p>\n<p>Open the interfaces file with the command</p>\n<pre><code class=\"language-sh\">$ sudo nano /etc/network/interfaces\n</code></pre>\n<p>edit the following lines as below</p>\n<pre><code class=\"language-plain\">auto lo wlan0\niface lo inet loopback\n\nallow-hotplug wlan0\niface wlan0 inet manual\n# wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf\n</code></pre>\n<p>now save (ctrl &#x26; o) and exit (ctrl &#x26; x)</p>\n<p>Note: Due to the constants updates to Linux the Wifi login details have moved, if your home routers SSID and password was listed in this file then the hotspot will probably not get generated.</p>\n<p>You will need to put a # infront of each line</p>\n<pre><code class=\"language-plain\">#iface wlan0 inet dhcp\n#       wpa-ssid \"mySSID\"\n#       wpa-psk \"Router Pasword\"\n</code></pre>\n<p>These details need to be in the <strong>wpa_supplicant.conf</strong> file to work with this setup.</p>\n<p>Add your router details to the wpa_supplicant.conf file with</p>\n<pre><code class=\"language-sh\">$ sudo nano /etc/wpa_supplicant/wpa_supplicant.conf\n</code></pre>\n<p>and add the following commands to the bottom of the file.</p>\n<pre><code class=\"language-plain\">network={\n        ssid=\"mySSID\"\n        psk=\"Router Password\"\n        key_mgmt=WPA-PSK\n}\n</code></pre>\n<h3>Step 3</h3>\n<p>This is the final setup where we write the script that will start up when the RPi is first started. We will need to add the startup script to the <code>rc.local</code> file.</p>\n<p>This is an altered version of the \"Rpi Network conf Bootstrapper\" script by Lasse Christiansen</p>\n<p>This script will check what routers are available when the RPi is started in the order of <code>mySSID1</code>, <code>mySSID2</code> etc.\nThe first router found in the list will be connected to using existing configured WiFi settings. If none of the listed SSIDs are in range then a WiFi hotspot is created.</p>\n<pre><code class=\"language-sh\">$ sudo nano /etc/rc.local\n</code></pre>\n<p>Your rc.local file will look like this if it has not previously been edited.</p>\n<pre><code class=\"language-sh\">#!/bin/sh\n# rc.local\n# This script is executed at the end of each multiuser runlevel.\n# Make sure that the script will \"exit 0\" on success or any other\n# value on error.\n# In order to enable or disable this script just change the execution\n# bits.\n# By default this script does nothing.\n# Print the IP address\n_IP=$(hostname -I) || true\nif [ \"$_IP\" ]; then\nprintf \"My IP address is %s\\n\" \"$_IP\"\nFi\nexit 0\n</code></pre>\n<p>First of all change the top line from <code>#!/bin/sh</code> to <code>#!/bin/bash</code></p>\n<p>The line \"exit 0\" need to be at the bottom of the file so add the bootstrapper script between</p>\n<pre><code class=\"language-plain\">printf \"My IP address is %s\\n\" \"$_IP\"\nFi\n</code></pre>\n<p>and</p>\n<pre><code class=\"language-plain\">exit 0\n</code></pre>\n<p>The script to add is this:</p>\n<pre><code class=\"language-sh\">#Wifi config - if no prefered Wifi generate a hotspot\n#RPi Network Conf Bootstrapper\n\ncreateAdHocNetwork()\n{\n    echo \"Creating RPI Hotspot network\"\n    ifconfig wlan0 down\n    ifconfig wlan0 192.168.40.5 netmask 255.255.255.0 up\n    service dnsmasq start\n    service hostapd start\n    echo \" \"\n    echo \"Hotspot network created\"\n    echo \" \"\n}\n\necho \"=================================\"\necho \"RPi Network Conf Bootstrapper\"\necho \"=================================\"\necho \"Scanning for known WiFi networks\"\nssids=(mySSID1 mySSID2)\nconnected=false\nfor ssid in \"${ssids[@]}\"\ndo\n    echo \" \"\n    echo \"checking if ssid available:\" $ssid\n   echo \" \"\n    if iwlist wlan0 scan | grep $ssid > /dev/null\n    then\n        echo \"First WiFi in range has SSID:\" $ssid\n        echo \"Starting supplicant for WPA/WPA2\"\n        wpa_supplicant -B -i wlan0 -c /etc/wpa_supplicant/wpa_supplicant.conf > /dev/null 2>&#x26;1\n        echo \"Obtaining IP from DHCP\"\n        if dhclient -1 wlan0\n        then\n            echo \"Connected to WiFi\"\n            connected=true\n            break\n        else\n            echo \"DHCP server did not respond with an IP lease (DHCPOFFER)\"\n            wpa_cli terminate\n            break\n        fi\n    else\n        echo \"Not in range, WiFi with SSID:\" $ssid\n    fi\ndone\n\nif ! $connected; then\n    createAdHocNetwork\nfi\n</code></pre>\n<p>bootstrapper script to start up RPi hotspot on boot</p>\n<p>And finally save (ctrl &#x26; o) and exit (ctrl &#x26; x)</p>\n<p>In the line ssids=(mySSID1 mySSID2) change mySSID1 to the SSID name of your home router,</p>\n<p>if you connect your Rpi to other routers then these can be added separated by a space.\nRemove mySSID2 if you only want to search for one router as this will speed up the startup process.</p>\n<p>You should now be able to reboot and if all has gone ok your Raspberry Pi will start and connect to your router as normal.</p>\n<p>The final <code>rc.local</code> file should look like this</p>\n<pre><code class=\"language-sh\">#!/bin/bash\n# rc.local\n# This script is executed at the end of each multiuser runlevel.\n# Make sure that the script will \"exit 0\" on success or any other\n# value on error.\n# In order to enable or disable this script just change the execution\n# bits.\n# By default this script does nothing.\n# Print the IP address\n_IP=$(hostname -I) || true\nif [ \"$_IP\" ]; then\nprintf \"My IP address is %s\\n\" \"$_IP\"\nFi\n\n#Wifi config - if no prefered Wifi generate a hotspot\n#RPi Network Conf Bootstrapper\n\ncreateAdHocNetwork()\n{\n    echo \"Creating RPI Hotspot network\"\n    ifconfig wlan0 down\n    ifconfig wlan0 10.0.0.5 netmask 255.255.255.0 up\n    service dnsmasq start\n    service hostapd start\n    echo \" \"\n    echo \"Hotspot network created\"\n    echo \" \"\n}\n\necho \"=================================\"\necho \"RPi Network Conf Bootstrapper\"\necho \"=================================\"\necho \"Scanning for known WiFi networks\"\nssids=(mySSID1 mySSID2)\nconnected=false\nfor ssid in \"${ssids[@]}\"\ndo\n    echo \" \"\n    echo \"checking if ssid available:\" $ssid\n   echo \" \"\n    if iwlist wlan0 scan | grep $ssid > /dev/null\n    then\n        echo \"First WiFi in range has SSID:\" $ssid\n        echo \"Starting supplicant for WPA/WPA2\"\n        wpa_supplicant -B -i wlan0 -c /etc/wpa_supplicant/wpa_supplicant.conf > /dev/null 2>&#x26;1\n        echo \"Obtaining IP from DHCP\"\n        if dhclient -1 wlan0\n        then\n            echo \"Connected to WiFi\"\n            connected=true\n            break\n        else\n            echo \"DHCP server did not respond with an IP lease (DHCPOFFER)\"\n            wpa_cli terminate\n            break\n        fi\n    else\n        echo \"Not in range, WiFi with SSID:\" $ssid\n    fi\ndone\n\nif ! $connected; then\n    createAdHocNetwork\nfi\n\nexit 0\n</code></pre>\n<p>final rc.local file</p>\n<h3>Conclusion</h3>\n<p>If all has gone well you should still be able to connect the Pi to your home router when it boots up. In case you want to check whether the setup works if there is not hotspot around. You can switch off your router and reboot your Raspberry Pi and watch at startup as the above <code>rc.local</code> script runs as it searches for a hotspot and since there will not be one it will generate its own hotspot and you should be able to connect to it with either your mobile, laptop, tablet etc.</p>\n<p>Furthermore, you can open an ssh connection to the Pi using this command</p>\n<pre><code class=\"language-sh\">$ ssh pi@192.168.40.5\n</code></pre>\n<p>This will prompt you for a password. This password will be for the Raspberry Pi</p>\n<p>That is about it! You should now have a hotspot on your Raspberry Pi. Although it is important to note that this hotspot connection will not have any internet connection and thus you can't connect to the web with it, however any other device can connect to it via an ssh connection.</p>"}},{"node":{"frontmatter":{"title":"Perfect Binary Tree","subtitle":"A gentle introduction to perfect binary trees","excerpt":"Binary trees are part of a data structure known as `Trees`, yeah, I know, the forefathers of computer science and software engineering were quite creative. They were quite observant. Trees, more or less, look like trees, like the literal trees in nature. Now, that we have the most basic and almost worst analogy out there, what are binary trees?","path":"/tech/binary-tree","date":"January 26, 2017","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"binary_tree.png","thumbnail":"binary_tree.png","teaser":"binary_tree.png","credit":"Quora","creditlink":null},"tags":["algorithms","data-structures","binary-tree"]},"excerpt":"Binary trees are part of a data structure known as Trees, yeah, I know, the forefathers of computer science and software engineering were…","timeToRead":4,"html":"<p>Binary trees are part of a data structure known as <code>Trees</code>, yeah, I know, the forefathers of computer science and software engineering were quite creative. They were quite observant. Trees, more or less, look like trees, like the literal trees in nature. Now, that we have the most basic and almost worst analogy out there, what are binary trees?</p>\n<p>I shall give a basic and brief introduction into <code>binary trees</code>, this will assume that you have knowledge on tree data structures. Even if you don't, you can still read on, they are all pretty much related, so the knowledge is transferable.</p>\n<p>A binary tree is a <code>tree</code> where every node has 2 or fewer children. The children are usually called <code>left</code> and <code>right</code>.\nA simple implementation in <code>Python</code>:</p>\n<pre><code class=\"language-python\">class BinaryTreeNode(object):\n    def __init__(self, value):\n        self.value = value\n         self.left = None\n         self.right = None\n</code></pre>\n<blockquote>\n<p>A class definition for a Binary Tree Node in Python</p>\n</blockquote>\n<p>In JavaScript:</p>\n<pre><code class=\"language-javascript\">function BinaryTreeNode(value) {\n  this.value = value\n  this.left = null\n  this.right = null\n}\n</code></pre>\n<blockquote>\n<p>An object definition in JavaScript</p>\n</blockquote>\n<p>In Java:</p>\n<pre><code class=\"language-java\">public class &#x3C;T> BinaryTreeNode{\n    public T value;\n    public BinaryTreeNode left;\n    public BinaryTreeNode right;\n\n    public BinaryTreeNode(T value){\n        this.value = value;\n    }\n}\n</code></pre>\n<blockquote>\n<p>Binary Tree node implementation of Binary Tree node in Java, this uses T to define objects.</p>\n</blockquote>\n<p>And finally in Ruby:</p>\n<pre><code class=\"language-ruby\">class BinaryTreeNode\n\n    attr_accessor :value, :left, :right\n\n    def initialize(value)\n        @value = value\n        @left  = nil\n        @right = nil\n    end\nend\n</code></pre>\n<p>Why these languages? Well, because I am familiar with them and also to show that it does not matter the language, the implementation of a data structure is usually the same.</p>\n<p><img src=\"https://www.interviewcake.com/images/svgs/binary_tree__depth_5.svg?bust=138\" alt=\"binary tree\"></p>\n<blockquote>\n<p>Binary tree data structure, you will notice, it pretty much looks like a tree.</p>\n</blockquote>\n<p>This particular example is special because every level of the tree is completely full. There are no \"gaps.\" We call this kind of tree \"perfect.\"</p>\n<p>Binary trees have a few interesting properties when they're perfect:</p>\n<ol>\n<li>The number of total nodes on <em>each</em> doubles as we move down the tree\n<img src=\"https://www.interviewcake.com/images/svgs/binary_tree__depth_5_with_number_of_nodes_labelled.svg?bust=138\" alt=\"perfectBinaryTree\"></li>\n<li>\n<p>The number of nodes on the last level is equal to the sum of all the nodes on other levels(plus 1)\nLet's call the number of nodes <code>n</code>, and the height of the tree <code>h</code>. <code>h</code> can also be thought of as the <em>number of levels</em>. If we had <code>h</code>, how could we calculate <code>n</code>?\nLet's just add up the number of nodes on each level! How many nodes are on each level?\nIf we zero-index the levels, the number of nodes on the <code>x</code>th level is exactly <code>2^x</code>!</p>\n<ul>\n<li>Level 0: 2^0 nodes</li>\n<li>Level 1: 2^1 nodes,</li>\n<li>Level 2: 2^2 nodes,</li>\n<li>Level 3: 2^3 nodes,</li>\n<li>etc</li>\n</ul>\n<p>So our total number of nodes is:\n$$n= 2^0 + 2^1 +2^2 +2^3 +...+2^{h−1}$$ > Why only up to 2^{h-1} ? Notice that we started counting our levels at 0. So if > we have h levels in total, the last level is actually the \"h−1\"-th level. > That means the number of nodes on the last level is 2^{h-1}.</p>\n<p>But we can simplify. Property 2 tells us that the number of nodes on the last level is (1 more than) half of the total number of nodes, so we can just take the number of nodes on the last level, multiply it by 2, and subtract 1 to get the number of nodes overall.\nWe know the number of nodes on the last level is 2^{h-1}, So:</p>\n<p>$$ n = 2^{h-1} * 2 - 1$$\n$$n = 2^{h−1}∗2^{1}−1$$\n$$n = 2^{h-1+1}- 1$$\n$$n = 2^{h} - 1$$</p>\n<p>So that's how we can go from <code>h</code> to <code>n</code>. What about the other direction?</p>\n<p>We need to bring the <code>h</code> down from the exponent. That's what logs are for!</p>\n<p>First, some quick review on Algebra. $$log<em>{10}(100)$$ simply means, \"What power must you raise 10 to in order to get 100?\". Which is 2, because $$10^2 = 100$$.\nWe can use logs in algebra to bring variables down from exponents by exploiting the fact that we can simplify $$log</em>{10}(10^2)$$. What power must we raise 10 to in order to get $$10^2$$?\nThat's easy — it's 2.</p>\n<p>So in this case we can take the $$log_{2}$$ of both sides:</p>\n<p>$$n = 2^{h} - 1$$\n$$n + 1 = 2^{h}$$\n$$log<em>{2}{((n+1))} = log</em>{2}{(2^{h})}$$\n$$log_{2}{(n+1)} = h$$</p>\n</li>\n</ol>\n<h3>Conclusion</h3>\n<p>So that's the relationship between height and total nodes in a perfect binary tree.\nI know it involved a bit of Math, which you did not want nor expect, however, this will make the programs you write faster and better and of course easier to maintain and debug.</p>\n<p>Let us plant more trees!</p>"}},{"node":{"frontmatter":{"title":"Abstraction and interfaces","subtitle":"When to use abstraction and when to use interfaces","excerpt":"Abstraction and interfaces are common words that most programmers will come across when desigining systems and platforms. They are very useful concepts that any programmer who knows about Object Oriented Programming (OOP) should grasp and know like the back of their hand. They not only make code readable and testable, but also make your life a hell of a lot easier.","path":"/tech/abstraction-and-interfaces","date":"October 28, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"abstract_class_interfaces.png","thumbnail":"abstract_class_interfaces.png","teaser":"abstract_class_interfaces.png","credit":"Agile Code","creditlink":"http://agile-code.com"},"tags":["abstraction","interfaces","oop"]},"excerpt":"Abstraction and interfaces are common words that most programmers will come across when desigining systems and platforms. They are very…","timeToRead":3,"html":"<p>Abstraction and interfaces are common words that most programmers will come across when desigining systems and platforms. They are very useful concepts that any programmer who knows about Object Oriented Programming (OOP) should grasp and know like the back of their hand. They not only make code readable and testable, but also make your life a hell of a lot easier.</p>\n<p>Alright,let us get to it, so, I shall write about abstraction and interface in the Java programming language. However these very concepts can be applied to any OOP language out there.</p>\n<h2>Abstract classes</h2>\n<p>These are classes that contain one or more abstract methods. An abstract method is one that is declared but contains no implementation (without braces and followed by a semi-colon).</p>\n<pre><code class=\"language-java\">abstract void drive(double speed);\n</code></pre>\n<p>If a class contains abstract methods then the class <strong>must</strong> be declared abstract. When an abstract class is subclassed, the subclass usually provides implementations for all of the abstract methods in its parent class. However, if it does not, then the subclass must also be declared abstract.</p>\n<pre><code class=\"language-java\">abstract class Car{\n\n    abstract void changeGear(int number);\n}\n</code></pre>\n<p>Take for example we are modelling animals, we may start the hierachy with a base class of <em>Animal</em>. Animals are capable of several things, flying, running, swimming, crawling. They are also capable of sleeping, eating, dreaming. In this regard, the many types of animals have similar characteristics, like eating and sleeping. So the common operations performed by animals, but in a different way is a good candidate for abstraction which will force the subclasses (or child classes) to provide their own implementation. Let us take the following example.</p>\n<pre><code class=\"language-java\">    abstract class Animal {\n\n        /**Types of food the animals eat*/\n        public abstract void eat(String food);\n\n        /**How long the anima will sleep*/\n        public void sleep(int hours){\n            try{\n                // 1000 milliseconds * 60 seconds * 60 minutes * hours\n                Thread.sleep(1000 * 60 *60 *hours);\n            }catch (InterruptedException ie){\n                ie.printStackTrace();\n            }\n        }\n\n        /**The sound the animals make*/\n        public abstract void makeNoise();\n    }\n</code></pre>\n<p>The <strong>abstract</strong> keyword is used in both the class and the method to declare that the class and the method are abstract. Any class that subclasses <code>Animal</code> must implement the <code>makeNoise</code> and the <code>eat</code> functions.</p>\n<pre><code class=\"language-java\">    public class Cat extends Animal{\n        @Override\n        public void eat(String food) {\n            System.out.println(\"Cats eat \" + food);\n        }\n\n        @Override\n        public void makeNoise() {\n            System.out.println(\"Cats meow a lot\");\n        }\n    }\n</code></pre>\n<p>Alternatively we could declare Animal as an interface instead of using an abstract class, and have the Cat implement the interface. You could - but you'd also need to implement the sleep method. By using abstract classes, you can inherit the implementation of other (non-abstract) methods. You can't do that with interfaces - an interface cannot provide any method implementations.</p>\n<h2>Abstract classes and Interfaces</h2>\n<p>Now, that we have a basic understanding of abstraction, we shal compare that to interfaces. What is the difference? They are similar in a way, but are obviously not the same. You <strong>can't</strong> instantiate an abstract class and they may contain a mix of methods containing a mix of methods declared with or without an implementation. With abstract classes, you can declare fields that are not static and final, and define public, protected, and private concrete methods. With interfaces on the other hand, all fields are automatically public, static, and final, and all methods that you declare or define (as default methods) are public. In addition, you can extend only one class, whether or not it is abstract, whereas you can implement any number of interfaces (basics of OOP).</p>\n<h2>Instances to use Abstract classes and Interfaces.</h2>\n<p>Abstract classes are best used in such scenarios:</p>\n<ul>\n<li>You want to share code among several closely related classes.</li>\n<li>You expect that classes that extend your abstract class have many common methods or fields, or require access modifiers other than public (such as protected and private).</li>\n<li>You want to declare non-static or non-final fields. This enables you to define methods that can access and modify the state of the object to which they belong.</li>\n</ul>\n<p>Interfaces on the other hand are best used in such scenarios:</p>\n<ul>\n<li>You expect that unrelated classes would implement your interface.</li>\n<li>You want to specify the behavior of a particular data type, but not concerned about who implements its behavior.</li>\n<li>You want to take advantage of multiple inheritance of type.</li>\n</ul>\n<p>These obviously are not the only scenarios, they are just but examples. A real practical example of Abstraction is found <a href=\"https://github.com/BrianLusina/Java-Playground/tree/master/AbstractionInterfaces/MotorVehicles\">here</a>.</p>"}},{"node":{"frontmatter":{"title":"Exception Handling and why you should care.","subtitle":"Try and catch that exception, keeping your user happy","excerpt":"No one likes errors, especially when they occur frequently and unchecked. As developers we constantly check for errors and not that the program is running as expected, but rather it is handling the errors as it should. There is not perfect program that will never encounter errors, the best programs are the ones that handle **exceptions** really well and keep the user happy and oblivous of the errors being handled","path":"/tech/exceptions","date":"October 26, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"exceptions-vs-errors.png","thumbnail":"exceptions-vs-errors.png","teaser":"exceptions-vs-errors.png","credit":"http://rypress.com","creditlink":"http://rypress.com/tutorials/objective-c/exceptions"},"tags":["exceptions","error-handling"]},"excerpt":"No one likes errors, especially when they occur frequently and unchecked. As developers we constantly check for errors and not that the…","timeToRead":3,"html":"<p>No one likes errors, especially when they occur frequently and unchecked. As developers we constantly check for errors and not that the program is running as expected, but rather it is handling the errors as it should. There is not perfect program that will never encounter errors, the best programs are the ones that handle <strong>exceptions</strong> really well and keep the user happy and oblivous of the errors being handled. It is important that errors are handled appropriately and also that they give the user a meaningful message. Unfortunately, you never know that kind of errors you may encounter in your program. Some are caused by the code you write, others by external factors that your program has nothing to do with, like a poor internet connection or hardware malfunction. In both cases, your program should be able to handle these exceptions and keep running or exit, whichever suits you need at the time.</p>\n<p>Of course, before delving deeper into the exceptions, we should all be on the same page as to what exceptions are.</p>\n<p><strong>Exceptions</strong> as defined by Java Documentation is an event, which occurs during the execution of a program, that disrupts the normal flow of the program's instructions. This disruption of the normal flow of the program should be handled with care and enable the user to keep interacting with the program despite this interruption, otherwise you will have poor ratings, no one wants that.</p>\n<p>I will not delve into details about how a program determines an error and normal flow of a program. I will dive immediately into which type of exceptions we should look out for.</p>\n<ol>\n<li>\n<p>Checked Exception</p>\n<p>Say, you are creating a program that requires user input, such as their name, phone number, email and such, for validation purposes. Maybe you need these inputs for authorization or for sign up to your platform. It is possible that the user will provide an invalid email address and as such you will need to validate these parameters before passing them to a function or class that will handle the authentication. Normally, if you are developing for Android it will be easy to validate this field in the XML layout, but what if you are checking with a server and you have to fetch a response in order to proceed. If the response returns <em>Null</em> then you need to be able to handle such a response.</p>\n<p>A well-written program will catch this exception and notify the user of the mistake, possibly prompting for a correct email address if the email does not exist in the system's database.</p>\n</li>\n<li>\n<p>Error</p>\n<p>These are the kind of errors that will occur that are outside the application's scope of handling. These kind of errors may involve poor internet connection on the part of the user or maybe they are experiencing hardware failure. The application can not anticipate that it will happen as it may occur randomly. However, it should be able to catch this exception and notify the user of the failure to execute the program. In the example above, maybe in the middle of execution of request to ther server, after having validate the user credentials, the internet connection is abruptly cut and the user is not properly authenticated with the system, it is at this point that the application should notify the user of the problem, catch this expection and try again at a late time. It may make sense in some instances to print a stacktrace and exit the program.</p>\n</li>\n<li>\n<p>Runtime Exception</p>\n<p>These are exceptional conditions that are internal to the application, and that the application usually cannot anticipate or recover from. These type of errors are usually because of an improper use of an API or a logic error. If we use the abov example still, if a logic error causes <code>null</code> to be passed instead of a <code>username</code> then the method handling authentication will throw a <strong>NullPointerException</strong>. Now normally it may make sense to catch this exception and notify the user, but it makes even more sense to eliminate this bug completely and not pass null to the method or constructor of a class.</p>\n</li>\n</ol>\n<p>Now, you may have noticed something similar about the last two types of exceptions. Errors and runtime exceptions are collectively known as <strong>unchecked exceptions</strong> and this is because they do not need to be <em>caught</em> as much as the 1st type. This is normally because they could be caused by external factors that the app can not manage and it will reduce complexity and make more sense for the application to terminate and inform the user of the same. In other instances like in the third example about the logic error, it makes more sense to not pass in null to a constructor or method.</p>\n<p>Either way, it is important to give your user the best possible experience with your program and thus keep the user notified of any errors that may occur and thus give them the best experience.</p>"}},{"node":{"frontmatter":{"title":"The Virtual DOM with React","subtitle":"virtual DOM manipulation with ReactJS","excerpt":"JavaScript is one of the most powerful languages in the current era and it is quickly gaining ground. What makes it powerful is its dynamic nature and ability to manipulate the DOM. This manipulation is at the heart of the modern, interactive web. Unfortunately, it is also a lot slower than most JavaScript operations.","path":"/tech/virtualdom","date":"October 09, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"virtualdom.png","thumbnail":"virtualdom.png","teaser":"virtualdom.png","credit":"Slides.com","creditlink":"http://slides.com/brandonkonkle/exploring-virtual-dom/"},"tags":["virtualdom","reactjs","javascript"]},"excerpt":"JavaScript is one of the most powerful languages in the current era and it is quickly gaining ground. What makes it powerful is its dynamic…","timeToRead":2,"html":"<p>JavaScript is one of the most powerful languages in the current era and it is quickly gaining ground. What makes it powerful is its dynamic nature and ability to manipulate the DOM. This manipulation is at the heart of the modern, interactive web. Unfortunately, it is also a lot slower than most JavaScript operations.</p>\n<p>This is made worse by the fact that most JavaScript frameworks update the DOM much more than they have to.</p>\n<p>As an example, let's say that you have a list that contains ten items. You check off the first item. Most JavaScript frameworks would rebuild the entire list. That's ten times more work than necessary! Only one item changed, but the remaining nine get rebuilt exactly how they were before.</p>\n<p>Rebuilding a list is no big deal to a web browser, but modern websites can use huge amounts of DOM manipulation. Inefficient updating has become a serious problem. This could prove slow for the user and thus grant bad User experience, making it seem as if the website is slow.</p>\n<p>To address this problem, the people at React popularized something called the virtual DOM.</p>\n<h2>Virtual DOM</h2>\n<p>For every DOM object, there is a corresponding \"virtual DOM object.\" This is a representation of a DOM object, like a lightweight copy.</p>\n<p>This has the same properties as a real DOM object, but it lacks the power to directly change what's on the screen.</p>\n<p>Manipulating the DOM is slow, but manipulating the virtual DOM is much faster, because nothing gets drawn onscreen. Think of manipulating the virtual DOM as editing a blueprint, as opposed to moving rooms in an actual house.</p>\n<p>When you render a JSX element, every single virtual DOM object gets updated.</p>\n<p>This sounds incredibly inefficient, but the cost is insignificant because the virtual DOM can update so quickly because nothing is drawn onscreen.</p>\n<p>Once the virtual DOM has updated, then React compares the virtual DOM with a virtual DOM snapshot that was taken right before the update.</p>\n<p>By comparing the new virtual DOM with a pre-update version, React figures out exactly which virtual DOM objects have changed. This process is called <strong>diffing.</strong></p>\n<p>Once React knows which virtual DOM objects have changed, then React updates those objects, and only those objects, on the real DOM. In our example from earlier, React would be smart enough to rebuild your one checked-off list-item, and leave the rest of your list alone.</p>\n<p>This makes a big difference! React can update only the necessary parts of the DOM. React's reputation for performance comes largely from this innovation.</p>\n<p>In summary, here's what happens when you try to update the DOM in React:</p>\n<ol>\n<li>The entire virtual DOM gets updated.</li>\n<li>The virtual DOM gets compared to what it looked like before you updated it.</li>\n<li>React figures out which objects have changed.</li>\n<li>The changed objects, and the changed objects only, get updated on the real DOM</li>\n<li>Changes on the real DOM cause the screen to change.</li>\n</ol>"}},{"node":{"frontmatter":{"title":"T-Shaped Developers, the new norm","subtitle":"The T-shaped developers, A new species of developers","excerpt":"Gone are the days of clear definitions of responsibility, at least in terms of technology and developing software. These are not the times when companies and businesses have clearly defined roles for their employees such that everyone is only closed to the skill set that they deem to be the most proficient in. These are the times when one role for an employee is never going to be enough, or rather is never going to be the case, especially not with how the world is evolving","path":"/tech/t-shaped-dev","date":"September 28, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"t-shaped.jpg","thumbnail":"t-shaped.jpg","teaser":"t-shaped.jpg","credit":null,"creditlink":null},"tags":["software","development","tech"]},"excerpt":"Gone are the days of clear definitions of responsibility, at least in terms of technology and developing software. These are not the times…","timeToRead":4,"html":"<p>Gone are the days of clear definitions of responsibility, at least in terms of technology and developing software. These are not the times when companies and businesses have clearly defined roles for their employees such that everyone is only closed to the skill set that they deem to be the most proficient in. These are the times when one role for an employee is never going to be enough, or rather is never going to be the case, especially not with how the world is evolving.</p>\n<p>No more are the days where web developers, designers, application programmers and database administrators stick to one predefined role each sitting in their own little area worrying about only their little part of the puzzle with clear definitions of responsibility. This venerable model heralded the age of web and app development, but it also contained the seeds of its own destruction, creating a world of silos, isolated and closed knowledge – a world of “not my problem”.</p>\n<p>As these complex systems have matured the effort, and the risks, to change a product have become significant and difficult to achieve. As this era, and the solutions built around it, draws to an end, something new awaits.</p>\n<p>The web developer jobs of today, the trendsetters and game changers, do not push bottlenecks through waterfalls. From tech startup to large-scale enterprise, the skills to succeed and adapt require a different mindset.\nThe modern developer requires clear methodologies to work with, a supportive organisational culture and tools that automate the simple tasks. This cultural change does not just apply to software developers – business leaders drive this change and provide the tools for their organisation to thrive.</p>\n<p>To achieve this way of working you need a more rounded IT professional, or what the industry refers to as a 'T-shaped developer'. A T-shaped developer has one or more deep skill-sets of knowledge complemented with broad generalist knowledge across an entire solution.\nSometime known as full-stack developers, these rounded individuals are the most in-demand devs – in a modern world that wants staff who can do front end, can make middleware sing and utilise the terminal on their chosen operating system like a ninja, and knows how to test.</p>\n<p>This sounds like the perfect developer. I mean they can build anything with anything that solves anything and passes any test. Sounds like coding 'god'. However unreal this sounds this is becoming the new norm as the world of tech continually evolves demanding more and more developers to up their game and improve their knowledge base.</p>\n<p>Why these developers are called T-Shaped is becase the vertical line of the T represents the depth of expertise in a field while the horizontal line represents the breadth of knowledge.</p>\n<p>In as much as this may sound like being an expert in a particular programming language and knowing a ton of others as well, it actually may have different meanings to others.</p>\n<p>It could be a developer who has a specialty (backend, frontend, or a particular technology stack) but is comfortable doing a wide range of development work, product management and design thinking. A backend developer needs to know how their work interacts with a front-end developer's. Additionally, they need to empathize with designers and end users. Often certain kinds of skills are grouped together and people who are really truly good in a specific niche need to understand how their niche effects things holistically.</p>\n<p>This does sound like one heck of a developer to have on your team. The job would be done well as they would be able to picth in on every aspect of the product being built. However, there is a case against hiring a T-Shaped developer. Some managers would not do this.</p>\n<p>The argument.</p>\n<p>You don’t want a team of T-shaped developers for two reasons.</p>\n<ol>\n<li>They lack creativity. If there is one deep expert on each topic, they have nobody to bounce ideas off and nobody to pull them back on track if they fixate on a bad design.</li>\n<li>Communication bottlenecks. The deep expert on each topic has to simplify his communication to his teammates to an extent that he cannot properly articulate his reasoning.</li>\n</ol>\n<p>The solution offered is to hire V-shaped developers as they have a peak competency at the tip of the V but have adequate skills in a number of adjacent areas ensuring that there is one expert and a least one sufficiently knowledgeable team member in every area.</p>\n<p>Despite these two reasons (and possibly more), there are companies that have grown rapidly due to T-Shaped developers. Some even don’t focus on finding someone who is an expert in a particular subject (an iOS or Android developer for example) but rather a full-stack developer that can be successful in contributing to a project end to end. This allows creation of small product teams with high responsibility and the flexibility to remain technologically agnostic. It also tends to naturally let the developer grow in different areas while still maintaining certain expertise.</p>\n<p>This may be one of the main reasons that the T-shaped developer will be the new norm and standard. After all, aren't programming languages, frameworks and technologies here to create solutions? It will not matter whether you solve a problem in one language and someone solves it using some framework and creates a new business with some other new piece of technology. It is even better if you can do all three, or rather be able to have a wide knowledge base that lets you cut across and learn.</p>"}},{"node":{"frontmatter":{"title":"Android Building Blocks","subtitle":"Android components and building Blocks","excerpt":"Android component is simply a piece of code that has a well defined life cycle. e.g. Activity, Reciever, Service. The core building blocks or fundamental components of Android","path":"/tech/building-blocks-android","date":"September 25, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"android-core-building-blocks.png","thumbnail":"android-core-building-blocks.png","teaser":"android-core-building-blocks.png","credit":null,"creditlink":null},"tags":["Android","Serializable","Parcelable"]},"excerpt":"Android component is simply a piece of code that has a well defined life cycle. e.g. Activity, Reciever, Service. The core building blocks…","timeToRead":2,"html":"<p>Android component is simply a piece of code that has a well defined life cycle. e.g. Activity, Reciever, Service. The core building blocks or fundamental components of Android are:</p>\n<ol>\n<li>Receivers</li>\n<li>Activities</li>\n<li>Views</li>\n<li>Intents</li>\n<li>Services</li>\n<li>Content Providers</li>\n<li>Fragments</li>\n<li>AndroidManifest.xml</li>\n</ol>\n<h2>Activity</h2>\n<p>This is simply a class that represents a single screen. They dictate the UI and handle user interaction to the smart phone screen.</p>\n<h2>Services</h2>\n<p>Background process that can run for a long time. They are of 2 types:</p>\n<ul>\n<li><strong>Local service</strong>: accessed from within the application.</li>\n<li>**Remote service **: accessed remotely from other applications running on the same device.</li>\n</ul>\n<p>A service might play music in the background while the user is in a different application, or it might fetch data over the network without blocking user interaction with an activity. A service is implemented as a subclass of <code>Service</code> class.</p>\n<h2>Broadcast Recievers</h2>\n<p>They handle communication between Android OS and applications. They simply respond to broadcast messages from other applications or from the system. For example, apps can initiate broadcasts to let other applications know that some data has been downloaded to the device and is available for them to use, so this is broadcast receiver which will intercept this communication and will initiate appropriate action.</p>\n<p>A broadcast receiver is implemented as a subclass of <code>BroadcastReceiver</code> class and each message is broadcaster as an <code>Intent</code> object.</p>\n<pre><code class=\"language-java\">    public class MyReciever extends BroadcastReceiver{\n        public void onReceive(context,intent){\n\n        }\n    }\n</code></pre>\n<h2>Content Provider</h2>\n<p>Content Providers provide content to applications by encapsulating data and provide it to applications through a single ContentResolver interface.\nThey are required if you need to share data between multiple applications, e.g. contacts data is used by multile applications and mist be stored in a content provider.</p>\n<h2>View</h2>\n<p>A view is the UI element such as button, lable, Text field, Image.</p>\n<h2>Intent</h2>\n<p>Used to invoke components. It is mainly used to:</p>\n<ul>\n<li>Start a service</li>\n<li>Launch an activity</li>\n<li>Display a web page</li>\n<li>Display a list of contacts</li>\n<li>Broadcast a message</li>\n<li>Dial a phone</li>\n</ul>\n<p>Basically they are messages wiring components together.</p>\n<h2>Fragment</h2>\n<p>These are like part of an Activity. An activity can display one or more fragments on the screen at the same time.</p>\n<h2>AndroidManifest.xml</h2>\n<p>Contains information about activites, content providers, permissions. It is the configuration file for the application.</p>\n<h2>Resources</h2>\n<p>External elements such as strings, constants and drawable pictures.</p>"}},{"node":{"frontmatter":{"title":"Serializable and Parcelable","subtitle":"Difference between Serializable Java interface and Android Parcelable interface","excerpt":"When creating Plain Old Java Objects (POJOs) in eith Android or Java, more specifically Java, the aim is to be able to _model_ our data in a certain way. To enable easier addition to an Adapter or a database, even easier retrieval from a database using **Jackson** library (what Firebase uses to be able to store and retrieve data).","path":"/tech/serializable-parcelable","date":"September 24, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"parcelable_vs_serializable.jpg","thumbnail":"parcelable_vs_serializable.jpg","teaser":"parcelable_vs_serializable.jpg","credit":null,"creditlink":null},"tags":["Android","Serializable","Parcelable"]},"excerpt":"When creating Plain Old Java Objects (POJOs) in eith Android or Java, more specifically Java, the aim is to be able to model our data in a…","timeToRead":5,"html":"<p>When creating Plain Old Java Objects (POJOs) in eith Android or Java, more specifically Java, the aim is to be able to <em>model</em> our data in a certain way. To enable easier addition to an Adapter or a database, even easier retrieval from a database using <strong>Jackson</strong> library (what Firebase uses to be able to store and retrieve data).</p>\n<p>It is best practice to model data in a specific way using POJO as it allows cleaner code and one also can be able to determine what exactly one object will contain. Say you are storing Employee data. An employee will obviously have data such as <em>name</em>, <em>phone</em> and <em>address</em>. These should be modelled to enable proper structure of each record we will be retrieving from an API (if creating for Android).</p>\n<p>Normally, typically, the model will look like this:</p>\n<pre><code class=\"language-java\">    public class Employee{\n        private String name;\n        private int phone;\n        private ArrayList&#x3C;String> address;\n\n        public Employee(String name, int phone, ArrayList&#x3C;String> address) {\n            this.name = name;\n            this.phone = phone;\n            this.address = address;\n        }\n\n        public ArrayList&#x3C;String> getAddress() {\n            if (!(address == null))\n                return address;\n            else\n                return new ArrayList&#x3C;String>();\n        }\n\n        public String getName() {\n            return name;\n        }\n\n        public String getAge() {\n            return age;\n        }\n    }\n</code></pre>\n<blockquote>\n<p>This is a typical POJO with <em>fields</em>, a <em>constructor</em> and <em>access methods</em>.</p>\n</blockquote>\n<p>In Android we know that we cannot just pass objects to activities. The objects must be either implements of <strong>Serializable</strong> or <strong>Parcelable</strong> interface to do this. This is where the problem with this class comes in. When trying to pass this object to any other activity it will pose a bit of a problem, of course there a work-arounds, but why stress yourself? KISS.</p>\n<h2>Enter Serializable and Parcelable</h2>\n<p>They both do what you expect them to do. They have similarities, but are not entirely the same.</p>\n<p><em>Serializable</em> is a standard <strong>Java</strong> interface. You simply mark a class Serializable by implementing the interface, and Java will automatically serialize it in certain situations.</p>\n<p><em>Parcelable</em> is an <strong>Android</strong> specific interface where you implement the serialization yourself. It was created to be far more efficient than Serializable, and to get around some problems with the default Java serialization scheme.</p>\n<h3>Serializable</h3>\n<p>As afformentioned serializable is a standard Java interface. You can just implement Serializable interface and add override methods.The problem with this approach is that <strong>reflection</strong> is used and it is a slow process. This method creates a lot of temporary objects and cause quite a bit of garbage collection. However, a serializable interface is easier to implement.</p>\n<pre><code class=\"language-java\">    public class Employee extends Serializable{\n        private String name;\n        private int phone;\n        private ArrayList&#x3C;String> address;\n\n        public Employee(String name, int phone, ArrayList&#x3C;String> address) {\n            super();\n            this.name = name;\n            this.phone = phone;\n            this.address = address;\n        }\n\n        public ArrayList&#x3C;String> getAddress() {\n            if (!(address == null))\n                return address;\n            else\n                return new ArrayList&#x3C;String>();\n        }\n\n        public String getName() {\n            return name;\n        }\n\n        public String getAge() {\n            return age;\n        }\n    }\n</code></pre>\n<blockquote>\n<p>Same implementation of Employee Object with the only differnce being its implementation. Notice the <code>super()</code> in the constructor.</p>\n</blockquote>\n<p>Say you have initialized Employee objects like so:</p>\n<pre><code class=\"language-java\">//Employee instance\nEmployee mEmployee = new Employee(\"name\",12345679,\"Address array here\");\n\n//Passing MyObjects instance via intent\nIntent mIntent = new Intent(FromActivity.this, ToActivity.class);\nmIntent.putExtra(\"UniqueKey\", mEmployee);\nstartActivity(mIntent);\n</code></pre>\n<blockquote>\n<p>This creates an instance of the Employee object, adds it to an intent and starts the next activity.</p>\n</blockquote>\n<p>In another class, we obtain the object.</p>\n<pre><code class=\"language-java\">Intent mIntent = getIntent();\nEmployee mEmployee = (Employee) mIntent.getSerializableExtra(\"UniqueKey\");\n</code></pre>\n<blockquote>\n<p>This obtains the object from the intent and casts it to Employee object.\nAllowing you to do as you please in the next activity with the obtain object.</p>\n</blockquote>\n<h3>Parcelable</h3>\n<p>Parcelable process is much faster than serializable. One of the reasons for this is that we are being explicit about the serialization process instead of using reflection to infer it. It also stands to reason that the code has been heavily optimized for this purpose.</p>\n<p>Using the same Employee class but implementing the Parcelable interface.</p>\n<pre><code class=\"language-java\">    import java.util.ArrayList;\n    import android.os.Parcel;\n    import android.os.Parcelable;\n\n    public class Employee extends Parcelable{\n        private String name;\n        private int phone;\n        private ArrayList&#x3C;String> address;\n\n        public Employee(String name, int phone, ArrayList&#x3C;String> address) {\n            this.name = name;\n            this.phone = phone;\n            this.address = address;\n        }\n\n        public Employee(Parcel source){\n            phone = source.readInt();\n            name = source.readString();\n            address = source.createStringArrayList();\n        }\n\n        @Override\n        public int describeContents() {\n            return 0;\n        }\n\n        @Override\n        public void writeToParcel(Parcel dest, int flags) {\n            dest.writeInt(phone);\n            dest.writeString(name);\n            dest.writeStringList(address);\n        }\n\n        public static final Creator&#x3C;Employee> CREATOR = new Creator&#x3C;Employee>() {\n\n        @Override\n        public Employee[] newArray(int size) {\n            return new Employee[size];\n        }\n\n        @Override\n        public Employee createFromParcel(Parcel source) {\n            return new Employee(source);\n        }\n        };\n\n        public ArrayList&#x3C;String> getAddress() {\n            if (!(address == null))\n                return address;\n            else\n                return new ArrayList&#x3C;String>();\n        }\n\n        public String getName() {\n            return name;\n        }\n\n        public String getAge() {\n            return age;\n        }\n    }\n</code></pre>\n<p>Using the same process of creating an instance of the <code>Employee</code> Object and passing it to an intent.</p>\n<pre><code class=\"language-java\">    Employee employee = new Employee(\"name\",\"age\",\"Address array here\");\n\n    //Passing MyOjects instance\n    Intent mIntent = new Intent(FromActivity.this, ToActivity.class);\n    mIntent.putExtra(\"UniqueKey\", employee);\n    startActivity(mIntent);\n\n    //Getting MyObjects instance in another activity\n    Intent mIntent = getIntent();\n    Employee workorder = (Employee) mIntent.getParcelable(\"UniqueKey\");\n\n    //You can pass Arraylist of Parceble obect as below\n    //Array of MyObjects\n    ArrayList&#x3C;Employee> mEmployees;\n\n    //Passing Employee instance\n    Intent mIntent = new Intent(FromActivity.this, ToActivity.class);\n    mIntent.putParcelableArrayListExtra(\"UniqueKey\", mEmployees);\n    startActivity(mIntent);\n\n    // in another activity\n    //Getting Employee instance\n    Intent mIntent = getIntent();\n    ArrayList&#x3C;Employee> mEmployees = mIntent.getParcelableArrayList(\"UniqueKey\");\n</code></pre>\n<h2>In Conclusion</h2>\n<ol>\n<li>Parcelable is faster than serializable interface</li>\n<li>Parcelable interface takes more time for implemetation compared to serializable interface</li>\n<li>serializable interface is easier to implement</li>\n<li>serializable interface create a lot of temporary objects and cause quite a bit of garbage collection</li>\n<li>Parcelable array can be pass via Intent in android</li>\n</ol>\n<p>These are just some of the differences between the two interfaces and of course there is not standard way, however it is always good to have the option of switching between the two.</p>"}},{"node":{"frontmatter":{"title":"Vigenere Cipher","subtitle":"The Vigenere Cipher Broken down in Python","excerpt":"The Vigenere cipher is likely the the most secure ciphers out there. It builds on the principle of the Caesar cipher yet provides a decent way to avoid the easy to solve shift problems. The basic gist of this cipher is we have both a message and a key. The key can be any length, but you must repeat the key for the length of our message to get this to work","path":"/tech/vigenere-cipher","date":"September 07, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"vigenere_cipher.jpg","thumbnail":"vigenere_cipher.jpg","teaser":"vigenere_cipher.jpg","credit":"MTU","creditlink":"www.cs.mtu.edu"},"tags":["algorithms","puzzles","ciphers"]},"excerpt":"The Vigenere cipher is likely the the most secure ciphers out there. It builds on the principle of the Caesar cipher yet provides a decent…","timeToRead":4,"html":"<p>The Vigenere cipher is likely the the most secure ciphers out there. It builds on the principle of the Caesar cipher yet provides a decent way to avoid the easy to solve shift problems. The basic gist of this cipher is we have both a message and a key. The key can be any length, but you must repeat the key for the length of our message to get this to work. This can be seen here:</p>\n<pre><code class=\"language-plain\">alpha = ABCDEFGHIJKLMNOPQRSTUVWXYZ\nmessage  = IAMTHEWALRUS\nkey  = HELLOHELLOHE\n</code></pre>\n<p>Our key is actually \"HELLO\", but we expanded it to the length of our message giving us the repeated nature we see. Once we have these defined, we go character by character performing a pseudo-Caesar cipher.</p>\n<pre><code class=\"language-plain\">m1 = I = 9\nk1 = H = 8\n9 + 8 = 17 % 26 = 17 = Q\nc1 = Q\n</code></pre>\n<p>Looking at this, we see that the first character of our message is \"I\" which is the ninth letter in the alphabet. We then look at the first character of the key which is \"H\" or the eighth letter in the alphabet. We add those two numbers and modulo 26 giving us 17 which points to the seventeenth letter in the alphabet: \"Q\". We now know that the first letter of our ciphertext is \"Q\".</p>\n<p>We then repeat this method for each character in our message until we have the ciphertext. This can be better shown as the algorithm:</p>\n<p>Let m be our message and k be our key:\nE(m) = ((m1 + k1) % 26, (m2 + k2) % 26, ..., (mi + ki) % 26)\nD(m) = ((c1 - k1) % 26, (c2 - k2) % 26, ..., (ci - ki) % 26)\nThis is much like the Caesar cipher except instead of defining a fixed rotation, we allow our key's character index to be the rotation. As you can see, this is why the Vigenere cipher can be considered a string of Caesar ciphers. Pretty cool when you actually see it.</p>\n<p>So how do we attack this then?</p>\n<p>Well, the problem with this cipher is the fact that the key repeats itself. When you have a repeating key, it's common to see patterns in the ciphertext that completely match each other. By recognizing those patterns, you can determine the block size of the key and from there you simply do a Caesar brute force shift on each block until the plaintext appears.</p>\n<p>On relatively short messages, this is harder to crack (as with any short ciphertext) but if encrypting a uniformly distributed text then you can really start to pick up on these things.</p>\n<p>Now let's code this up in Python and see how how we can automate this:</p>\n<pre><code class=\"language-python\">from itertools import cycle\n\nALPHA = 'abcdefghijklmnopqrstuvwxyz'\n\n\ndef encrypt(key, plaintext):\n    \"\"\"Encrypt the string and return the ciphertext\"\"\"\n    pairs = zip(plaintext, cycle(key))\n    result = ''\n\n    for pair in pairs:\n        total = reduce(lambda x, y: ALPHA.index(x) + ALPHA.index(y), pair)\n        result += ALPHA[total % 26]\n\n    return result.lower()\n\n\ndef decrypt(key, ciphertext):\n    \"\"\"Decrypt the string and return the plaintext\"\"\"\n    pairs = zip(ciphertext, cycle(key))\n    result = ''\n\n    for pair in pairs:\n        total = reduce(lambda x, y: ALPHA.index(x) - ALPHA.index(y), pair)\n        result += ALPHA[total % 26]\n\n    return result\n\n\ndef show_result(plaintext, key):\n    \"\"\"Generate a resulting cipher with elements shown\"\"\"\n    encrypted = encrypt(key, plaintext)\n    decrypted = decrypt(key, encrypted)\n\n    print 'Key: %s' % key\n    print 'Plaintext: %s' % plaintext\n    print 'Encrytped: %s' % encrypted\n    print 'Decrytped: %s' % decrypted\n</code></pre>\n<h2>Step One</h2>\n<p>Import the <code>cycle()</code> function from the <code>itertools</code> library.</p>\n<p>Define our alphabet in order to get character indexes correctly, this can be done with the <code>string</code> module in Python, which enables us to get all the letters in the alphabet we need. This avoids the issue of forgetting a letter in case you hardcode the alphabet.</p>\n<p>The function <code>encrypt(key, plaintext)</code> takes in a key and a plain text, I build a tuple with the <code>zip()</code> function which is a terminating function. Which means it will stop as soon as the shorter string is exhausted.</p>\n<p>An example</p>\n<pre><code class=\"language-python\"># in\nlist(zip(string.ascii_lowercase, string.ascii_uppercase))\n\n# out\n[('a', 'A'), ('b', 'B'), ('c', 'C'), ('d', 'D'), ('e', 'E'), ('f', 'F'), ('g', 'G'), ('h', 'H'), ('i', 'I'), ('j', 'J'), ('k', 'K'), ('l', 'L'), ('m', 'M'), ('n', 'N'), ('o', 'O'), ('p', 'P'), ('q', 'Q'), ('r', 'R'), ('s', 'S'), ('t', 'T'), ('u', 'U'), ('v', 'V'), ('w', 'W'), ('x', 'X'), ('y', 'Y'), ('z', 'Z')]\n</code></pre>\n<p><code>cycle</code> is used to repeat the letters of the key for the entirety of the plaintext, note that this can repeat indefinately.</p>\n<p>Perform a loop in each of the pairs reducing them to a single value with <code>reduce</code> function from functools library. The <code>reduce</code> function takes in a function and an iterable object.</p>\n<p>The sum could be used here as well, but it would mean remembring that indexes of the letters and not the letters themselves are needed, or else we'll get a value error.</p>\n<p>Finally get the new letter after a modulo of 26 and append that to our resulting ciphertext string.</p>\n<h2>Step 2</h2>\n<p>Create the decipher function. This is fundamentally the same with the only difference being the fact that we subtract instead of adding the letters.</p>\n<h2>Step 3</h2>\n<p>Output these results. :)</p>\n<h2>Conclusion</h2>\n<p>In essence this is a Caeser's cipher with the only difference being the fact that we allow out key's character index to rotate instead of defining a fixed rotation. As you can see, this is why the Vigenere cipher can be considered a string of Caesar ciphers.</p>"}},{"node":{"frontmatter":{"title":"NumPy","subtitle":"NumPy Arrays and Python Lists","excerpt":"NumPy is _Numerical Python_ in full. A very powerful library for performing, well you guessed it, vector arithmetic. For those who shall continue on with Data Science using Python, I suggest you have a look at the NumPy package. It is a very powerful tool that will most definitely make your life that much simpler.","path":"/tech/numpy","date":"September 03, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"numpy.jpg","thumbnail":"numpy.jpg","teaser":"numpy.jpg","credit":"NumPy","creditlink":"http://www.numpy.org/"},"tags":["Python","Numpy","data"]},"excerpt":"NumPy is Numerical Python in full. A very powerful library for performing, well you guessed it, vector arithmetic. For those who shall…","timeToRead":5,"html":"<p>NumPy is <em>Numerical Python</em> in full. A very powerful library for performing, well you guessed it, vector arithmetic. For those who shall continue on with Data Science using Python, I suggest you have a look at the NumPy package. It is a very powerful tool that will most definitely make your life that much simpler.</p>\n<p>A basic example of the use of NumPy</p>\n<pre><code class=\"language-python\">from numpy import array\n\nbaseball = [12, 46, 489, 46, 5, 312, 31, 2, 3, 12, 31, 3, 13, 1, 31, 3, 13, 13, 1, 31, 313, 1, 31, 189, 4, 4, 31, 564,\n            9, 19, 416, 49, 498, 4984, 1984]\n\nprint(type(array(baseball)))\n&#x3C;class 'numpy.ndarray'>\n\nprint(type(baseball))\n&#x3C;class 'list'>\n</code></pre>\n<blockquote>\n<p>The 2 types are not similar, but almost the same operations can be performed on them.</p>\n</blockquote>\n<h2>Performing simple operations</h2>\n<p>Say for example you get the heights of each football player in England. You call the Barclay's Premier League and since you are a major fan and a major stakeholder in Barclays(They don't just send this data to everyone, I tried), they send you the data of 1000 players' heights as a list. Sadly, they are all in inches and you do not use inches, but rather meters. You could use a <code>for loop</code> converting each to meters and multiplying by 0.0254. This will work, but it will take quite a while to execute.</p>\n<pre><code class=\"language-python\">heights = [78,45,70,80,75,84,76,84,71,72,73,84,75,88,79,...]\nheights_m = [x * 0.0254 for x in heights]\nprint(heights_m)\n</code></pre>\n<blockquote>\n<p>This uses a list comprehension to obtain a new list of the newly converted heights to meters.</p>\n</blockquote>\n<p>NumPy on the other hand makes this process very simple and efficient. You will not have to use a for loop to perform such an operation.</p>\n<pre><code class=\"language-python\">from numpy import array\nheights = [78,45,70,80,75,84,76,84,71,72,73,84,75,88,79,...]\n\nheights_m = array(heights) * 0.0254\nprint(m)\n</code></pre>\n<blockquote>\n<p>The output will be the same. NumPy array function simply took in the list of heights and multiplied each to 0.0254. No loop used.</p>\n</blockquote>\n<p>The same could apply for weights. Say we now get weight data from the BPL. Unfortunately, again, they send data in pounds. We don't use pounds, instead we decide to use <em>kilograms</em>. we could do the same for loop above instead replace the <code>heights</code> with weights and instead use <code>0.453592</code> to perform the conversion. Alternatively, you guessed it, we could use <code>array</code> function from numpy to perform the operation such that it becomes <code>array(weights) * 0.453592</code> which makes our life that much easier.</p>\n<p>Maybe you will say. 'So what, the results are the same, so why use NumPy?'. True, they are the same, so the used of NumPy seems a little too much.</p>\n<p>This is why.</p>\n<p>Say, now you want to calculate the <strong>Body Mass Index</strong> (BMI) of each player in the BPL, well anonymously, considering the BPL did not send names attached to the data. This would require you to perform a loop within a loop. This is because to calculate the BMI we use this formula:</p>\n<pre><code class=\"language-plain\">BMI = weight (in kilograms)\n       height (in meters)^2\n</code></pre>\n<p>Now, imagine performing a for loop in the two lists we now have <code>weights_kg</code> and <code>heights_m</code>. If you were to use standart Python this would be the most probable way to perform the operation:</p>\n<pre><code class=\"language-python\">bmi = []\nm = list(zip(weights_kg, heights_m))\nfor x, y in m:\n    bmi.append(x/y**2)\n\nprint(bmi)\n</code></pre>\n<blockquote>\n<p><code>zip</code> function creats an iterator that aggregates elements from each of the iterables.</p>\n</blockquote>\n<p>With NumPy you can easily do the same with fewer lines and with less of a headache:</p>\n<pre><code class=\"language-python\">bmi = weights_m / heights_m **2\nprint(bmi)\n</code></pre>\n<blockquote>\n<p>This is after the weights and heights lists have been passed as arguments to the <code>array</code> function of the NumPy module.</p>\n</blockquote>\n<p>The results are the same, but it is more intuitive with NumPy, you can not perform the same operation with standard Python. So doint this : <code>bmi = weights_m / heights_m **2</code> without passing the <code>weights_m</code> and <code>heights_kg</code> as arguments in NumPy's array function will cause an error. Go ahead and try that :).</p>\n<h2>Subsetting</h2>\n<p>Lists in Python can be <em>subsetted</em>, if that is a word at all. By subsetting a Python list this is what I mean:</p>\n<pre><code class=\"language-python\">x = [4 , 9 , 6, 3, 1]\nx[1]\nimport numpy as np\ny = np.array(x)\ny[1]\n</code></pre>\n<blockquote>\n<p>This is subsetting using squre brackets, this applies to both NumPy and standard Python lists</p>\n</blockquote>\n<p>But NumPy has something special about subsetting that the standard Python lists do not have.\nFor Numpy specifically, you can also use boolean Numpy arrays:</p>\n<pre><code class=\"language-python\">high = y > 5\ny[high]\n</code></pre>\n<p>Now, to put it all together:</p>\n<pre><code class=\"language-python\"># height and weight are available as a regular lists\n\n# Import numpy\nimport numpy as np\n\n# Calculate the BMI: bmi\nnp_height_m = np.array(height) * 0.0254\nnp_weight_kg = np.array(weight) * 0.453592\nbmi = np_weight_kg / np_height_m ** 2\n\n# Create the light array\nlight = np.array(bmi) &#x3C; 21\n\n# Print out light\nprint(light)\n\n# Print out BMIs of all baseball players whose BMI is below 21\nprint(bmi[light])\n</code></pre>\n<p>Numpy is great to do vector arithmetic. If you compare its functionality with regular Python lists, however, some things have changed.</p>\n<p>First of all, Numpy arrays cannot contain elements with different types. If you try to build such a list, some of the elments' types are changed to end up with a homogenous list. This is known as type coercion.</p>\n<p>Second, the typical arithmetic operators, such as +, -, * and / have a different meaning for regular Python lists and Numpy arrays.</p>\n<p>Have a look at this line of code:</p>\n<pre><code class=\"language-python\">>>>np.array([True, 1, 2]) + np.array([3, 4, False])\narray([4, 5, 2])\n</code></pre>\n<p>Python lists and Numpy arrays sometimes behave differently. Luckily, there are still certainties in this world. For example, subsetting (using the square bracket notation on lists or arrays) works exactly the same. To see this for yourself, try the following lines of code in the IPython Shell:</p>\n<pre><code class=\"language-python\">x = [\"a\", \"b\", \"c\"]\nx[1]\n\nnp_x = np.array(x)\nnp_x[1]\n# height and weight are available as a regular lists\n\n# Import numpy\nimport numpy as np\n\n# Store weight and height lists as numpy arrays\nnp_weight = np.array(weight)\nnp_height = np.array(height)\n\n# Print out the weight at index 50\nprint(np_weight[50])\n\n# Print out sub-array of np_height: index 100 up to and including index 11077\nprint(np_height[100:111])\n</code></pre>\n<h2>Conclusion</h2>\n<p>Of course there is more to the NumPy module that I have not covered, this was and is to cite that the NumPy array and the Python Lists are the same but you can perform certain operations on NumPy arrays that you can not perform on Python lists. NumPy is a powerful library to uses especially if you will become a data scientist of use if for <strong>Big Data</strong>.</p>"}},{"node":{"frontmatter":{"title":"Big-O-Notation","subtitle":"The Big Deal with the Big-O Notation and algorithms","excerpt":"Big O notation is used in Computer Science to describe the performance or complexity of an algorithm. Big O specifically describes the worst-case scenario, and can be used to describe the execution time required or the space used (e.g. in memory or on disk) by an algorithm.","path":"/tech/big-o-notation","date":"August 02, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"big-o-notation-post.png","thumbnail":"big-o-notation-post.png","teaser":"big-o-notation-post.png","credit":"NuuNoel","creditlink":"http://www.nuuneoi.com"},"tags":["algorithms"]},"excerpt":"Big O notation is used in Computer Science to describe the performance or complexity of an algorithm. Big O specifically describes the worst…","timeToRead":3,"html":"<p>Big O notation is used in Computer Science to describe the performance or complexity of an algorithm. Big O specifically describes the worst-case scenario, and can be used to describe the execution time required or the space used (e.g. in memory or on disk) by an algorithm.</p>\n<p>A function's Big-O notation is determined by how it responds to different inputs. How much slower is it if we give it a list of 1000 things to work on instead of a list of 1 thing?</p>\n<p>Consider this code:</p>\n<pre><code class=\"language-python\">def item_in_list(to_check, the_list):\n    for item in the_list:\n        if to_check == item:\n          return True\n    return False\n</code></pre>\n<p>If we call this function like <code>item_in_list(2, [1,2,3])</code>, it should be quick. We loop over each thing in the list and if we find the first argument to our function, return True. If we get to the end and we didn't find it, return False.</p>\n<p>The <em>\"complexity\"</em> of this function is <strong>O(n)</strong>. O(n) is read <em>\"Order of N\"</em> because the O function is also known as the Order function. which deals in <em>orders of magnitude</em>.</p>\n<p>\"Orders of magnitude\" is basically tells the difference between classes of numbers. The difference between 1,000 and 10,000 is pretty big (in fact, its the difference between a junker car and a lightly used one). It turns out that in approximation, as long as you're within an order of magnitude, you're pretty close.</p>\n<p>If we were to graph the time it takes to run this function above with different sized inputs (e.g. an array of 1 item, 2 items, 3 items, etc), we'd see that it approximately corresponds to the number of items in the array. This is called a <code>linear graph</code>. This means that the line is basically straight if you were to graph it.</p>\n<p>If, in the code sample above, our item was always the first item in the list, our code would be really fast! This is true, but Big-O is all about the <strong>approximate worst-case performance of doing something</strong>. The worst case for the code above is that the thing we're searching for isn't in the list at all. (Note: The math term for this is \"upper bound\", which means its talking about the mathematic limit of awfulness).</p>\n<p><img src=\"https://justin.abrah.ms/static/images/o_n__plot.png\" alt=\"image\" title=\"Run Time Characteristics of an O(n) function\"></p>\n<blockquote>\n<p>Run Time characteristics of an O(n) function</p>\n</blockquote>\n<p>Consider this next code snippet:</p>\n<pre><code class=\"language-python\">def is_none(item):\n    return item is None\n</code></pre>\n<p>This function is called <code>O(1)</code> which is called <strong>\"constant time\"</strong>. What this means is no matter how big our input is, it always takes the same amount of time to compute things.</p>\n<p><img src=\"https://justin.abrah.ms/static/images/o_1__plot.png\" alt=\"o1_charactersitics\" title=\"Run time characteristics of O(1) function\"></p>\n<blockquote>\n<p>Run time charactersitics of O(1) function</p>\n</blockquote>\n<p>Consider this next example.</p>\n<pre><code class=\"language-python\">def combinations(the_list):\n   results = []\n   for item in the_list:\n       for inner_item in the_list:\n           results.append((item, inner_item))\n   return results\n</code></pre>\n<p>This matches every item in the list with every other item in the list. If we gave it an array <code>[1,2,3]</code>, we'd get back <code>[(1,1) (1,2), (1,3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)]</code>. This is part of the field of <strong>combinatorics</strong>, which is the mathematical field which studies combinations of things. This function is considered <strong>O(n^2)</strong>. This is because for every item in the list we have to do n more operations. So n * n == n^2.</p>\n<p>Below is a comparison of each of these graphs, for reference. You can see that an O(n^2) function will get slow very quickly where as something that operates in constant time will be much better. This is particularly useful when it comes to data structures.</p>\n<p><img src=\"https://justin.abrah.ms/static/images/runtime_comparison.png\" alt=\"comparison\"></p>\n<blockquote>\n<p>Comparison of O(n), O(1) and O(n^2) functions</p>\n</blockquote>\n<p>Another Big O notation term is <strong>O(2^N)</strong> denotes an algorithm whose growth doubles with each additon to the input data set. The growth curve of an O(2^N) function is exponential - starting off very shallow, then rising meteorically. An example of an O(2^N) function is the recursive calculation of Fibonacci numbers:</p>\n<p>An example:</p>\n<pre><code class=\"language-python\">def fibonacci(number):\n    if number &#x3C;=1 :\n        return number\n    return fibonacci(number - 2) + fibonacci(number - 1);\n}\n</code></pre>"}},{"node":{"frontmatter":{"title":"How Browsers Work","subtitle":"Some basic information about how a browser works","excerpt":"Browsers are essential tools that help in transfering information from one computer to another over the world wide web. Without these browsers we would not be able to dynamically interact with people from all over the world at a click of a button.","path":"/tech/how-browsers-work","date":"July 31, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"how-browsers-work.jpg","thumbnail":null,"teaser":"how-browsers-work.jpg","credit":"Taligarsiel","creditlink":"http://www.taligarsiel.com"},"tags":["how browsers work","browsers"]},"excerpt":"Browsers are essential tools that help in transfering information from one computer to another over the world wide web. Without these…","timeToRead":6,"html":"<p>Browsers are essential tools that help in transfering information from one computer to another over the world wide web. Without these browsers we would not be able to dynamically interact with people from all over the world at a click of a button.</p>\n<p>Most of us interact with browsers without actually knowing what happens behind the scenes. From the time you type in <a href=\"https://www.google.com\"><em>google</em></a> to the time you get millions of hits on your search, a lot of things happen in the background. We shall explore these many things that happen.</p>\n<p>First of, we shall identify the browsers out there, the ones in existence. I know there many but we shall still outline a few, just to get an idea of what we are dealing with.</p>\n<ul>\n<li>Chrome</li>\n<li>Firefox</li>\n<li>Safari (for my good friends who own MacBooks)</li>\n<li>Internet Explorer 9</li>\n<li>Opera</li>\n<li>Maxthon</li>\n<li>YouTube Browswer</li>\n<li>Netscape Browser</li>\n<li>UC Browser</li>\n<li>Avant</li>\n</ul>\n<p>etc etc.\nNotice, how I have mentioned some browsers which are mobile based. Regardless of where they are based, the functionality remains the same as we shall soon see.</p>\n<p>The most elementary function of a browser is to display a web resource to the user. This resource is fetched from a server and displayed in the browser window. This resource is written in <a href=\"https://en.wikipedia.org/wiki/HTML\" title=\"More about HTML here\">HyperText Markup Language</a> (HTML), but it can be a PDF document or an image or any other type of file.</p>\n<h2>Functionality</h2>\n<p>Browsers are able to display such content due to an underlying web <em>protocol</em> (An agreed-upon format for transmitting data between two devices). This protocol is known as the <a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol\">HyperText Transfer Protocol</a> or <strong>HTTP</strong> in short. HTTP defines how messages are formatted and transmitted and also what actions Web servers and browsers should take in response to various commands. This allows Web clients and servers to <em>talk</em> to each other. When you enter a Web address or <a href=\"https://en.wikipedia.org/wiki/Uniform_Resource_Locator\">Uniform Resource Locator</a> (URL) in your browser it sends a HTTP command to the Web server instructin it to fetch and transmit the requested Web page and display this information in your browser. It is like making a phone call. You dial a specific number in order to talk to a specific person on the other end of the line.</p>\n<blockquote>\n<p>HyperText Transfer Protocol: An agreed-upon format for transmitting data between two devices</p>\n</blockquote>\n<p>All Web servers serving Web sites and pages support the HTTP protocol.</p>\n<p>A brief example will make it easier to picture. Say, you intend to browse a website by the name <em>FunCats</em> and you want to read up on why cats love chasing red dots to their hearts content (why do they not get it's always a trap?). The title of this article is called \"For the love of the red dot.\". The URL to reach this article on FunCats is: <a href=\"http://www.funcats.com/for-the-love-of-the-red-dot.html\">http://www.funcats.com/for-the-love-of-the-red-dot.html</a></p>\n<p>Once you enter the URL \"<a href=\"http://www.funcats.com/for-the-love-of-the-red-dot.html\">http://www.funcats.com/for-the-love-of-the-red-dot.html</a>\" into your address line, the browser breaks that Web address down into 3 parts:</p>\n<ul>\n<li>Protocol - http</li>\n<li>Server name - www.funcats.com</li>\n<li>file name - for-the-love-of-the-red-dot.html (I is is important to note that .html is a file extenstion name for HyperText Markup Language File, so a PDF document would be <em>for-the-love-of-the-red-dot.pdf</em>)</li>\n</ul>\n<p>In order for your browser to connect to the server to retrieve the information, it communicates with a name server to translate the server name into an <a href=\"IP%20address%20-%20Wikipedia,%20the%20free%20encyclopedia\" title=\"More on IP addresses\">IP address</a>. Your Web browser is then able to connect to the Web server at the resolved IP address. Once your browser has connected to the Web server using HTTP, the browser then reads the HyperText Markup Language (HTML) and the data is then displayed in your browser.</p>\n<h2>Components of a browser</h2>\n<p>So, what exactly are these parts of a browser that make this all possible? It surely has to be more than just the explanation above. For the functions to be a well oiled machine, these are the parts of a browser:</p>\n<ol>\n<li>\n<p><strong>User Interface</strong></p>\n<p>This inclued the address bar, where you type to search for content online, the back and forward buttons for navigation and last but not least the bookmarks bar.</p>\n</li>\n<li>\n<p><strong>Browser engine</strong></p>\n<p>Connects the rendering engine and the user interface.</p>\n</li>\n<li>\n<p><strong>Rendering engine</strong></p>\n<p>This is reponsible for displaying requested content. If the content requested is HTML, it will parse the HTML and CSS and display the parsed content. The main function (as the name suggests), is to simply render the content requested. By default the rendering engine can display HTML and XML documents, but it can also display other content, such as images and documens such as PDF. Browsers such as Chrome run multiple instances of the rendering engine, one for each tab. Therefore, each tab runs on a separate process. Different browsers use different rendering engines. Chrome uses Blink, Firefox uses gecko, Safari uses Webkit and Internet Explorer user trident, just to mention a few.</p>\n</li>\n<li>\n<p><strong>Networking</strong></p>\n<p>For networking calls such as HTTP requests.</p>\n</li>\n<li>\n<p><strong>UI backend</strong></p>\n<p>This is used to draw basic widgets like windows and combo boxes.</p>\n</li>\n<li>\n<p><strong>JavaScript Interpreter</strong></p>\n<p>Used to parse and execute JavaScript code from a website that used JavaScript.</p>\n</li>\n<li>\n<p><strong>Data Storage</strong></p>\n<p>This is used to store data locally, such as <a href=\"HTTP%20cookie%20-%20Wikipedia,%20the%20free%20encyclopedia\" title=\"More about cookies here\">cookies</a>. This is not the tasty treat that you always craved as a child.</p>\n</li>\n</ol>\n<p>Here is an image to make it more visiually appealing</p>\n<img src=\"http://placehold.it/150x150.gif\" alt=\"\">\n![image](https://github.com/BrianLusina/howBrowsersWork/blob/master/components_of_a_browser.png \"Components of a browser\")\n<p>So, before i sum it all up, here is the intricate flow of data from the website you requested to the display on your browser:</p>\n<p><img src=\"http://www.html5rocks.com/en/tutorials/internals/howbrowserswork/flow.png\" alt=\"flow\" title=\"Flow of a typical Rendering Engine\"></p>\n<p>These are the steps:</p>\n<ul>\n<li>The rendering engine will start off with parsing the HTML document (if that is what is requested by the user) then convert elements to <a href=\"Document%20Object%20Model%20-%20Wikipedia,%20the%20free%20encyclopedia\" title=\"More information on Document Object MOdel\">Document Object Model</a>(DOM) nodes in a tree called the \"content tree\". it will read through the style data, both in external CSS files and in style elements. The styling information and visual instructions in the HTML will be used to create another tree: the <em>render tree</em>. The render tree contains rectangles with visual attributes like color and dimensions. The rectangles are in the right order to be displayed on the screen.</li>\n<li>After the construction of the render tree it goes through a \"layout\" process. This means giving each node the exact coordinates where it should appear on the screen.</li>\n<li>The next stage is painting. The render tree will be traversed and each node will be painted using the UI backend layer.</li>\n</ul>\n<p>I have broken it down to 3 steps, but is is actually a gradual process. For a better user experience (UX), the rendering engine will try to display contents on the screen as soon as possible. It will not wait until all HTML is parsed before starting to build and layout the render tree. Parts of the content will be parsed and displayed, while the process continues with the rest of the contents that keeps coming from the network. It is more like how threads work in Java. Call it multitasking, in some way.</p>\n<p>Here is a simple example of a rendering engine at work. The example displayed is of the workings of the WebKit rendering engine. Not all rendering engines will use the same terms, but the general flow will be the same.</p>\n<p><img src=\"http://www.html5rocks.com/en/tutorials/internals/howbrowserswork/webkitflow.png\" alt=\"render\"></p>"}},{"node":{"frontmatter":{"title":"Flask Web Framework","subtitle":"Some basic information about Flask web framework","excerpt":"Web Application Framework or simply Web Framework represents a collection of libraries and modules that enables a web application developer to write applications without having to bother about low-level details such as protocols, thread management etc.","path":"/tech/flask-webframework","date":"July 30, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"flask-webframe.png","thumbnail":null,"teaser":"flask-webframe.png","credit":"Flask","creditlink":"http://flask.pocoo.org"},"tags":["web frameworks","python frameworks","flask"]},"excerpt":"Web Application Framework or simply Web Framework represents a collection of libraries and modules that enables a web application developer…","timeToRead":17,"html":"<p>Web Application Framework or simply Web Framework represents a collection of libraries and modules that enables a web application developer to write applications without having to bother about low-level details such as protocols, thread management etc.</p>\n<p>Flask is a web application framework written in Python. It is developed by Armin Ronacher, who leads an international group of Python enthusiasts named Pocco. Flask is based on the Werkzeug WSGI toolkit and Jinja2 template engine. Both are Pocco projects.</p>\n<h3>Web Server Gateway Interface (WSGI)</h3>\n<p>WSGI has been adopted as a standard for Python web application development. It is a specification for a universal interface between the web server and the web applications.</p>\n<h3>Werkzeug</h3>\n<p>It is a WSGI toolkit, which implements requests, response objects, and other utility functions. This enables building a web framework on top of it. The Flask framework uses Werkzeug as one of its bases.</p>\n<h3>Jinja2</h3>\n<p>Jinja2 is a popular templating engine for Python. A web templating system combines a template with a certain data source to render dynamic web pages.</p>\n<p>Flask is often referred to as a micro framework. It aims to keep the core of an application simple yet extensible. Flask does not have built-in abstraction layer for database handling, nor does it have form a validation support. Instead, Flask supports the extensions to add such functionality to the application.</p>\n<p>{% include toc.html %}</p>\n<h2>Flask Environment</h2>\n<p>Python 2.6 or higher is usually required for installation of Flask. Although Flask and its dependencies work well with Python 3 (Python 3.3 onwards), many Flask extensions do not support it properly. Hence, it is recommended that Flask should be installed on Python 2.7.</p>\n<p>First, you will need to install virtualenv for development environment. Virtualenv is a virtual Python environment builder. It helps a user to create multiple Python environments side-by-side. Thereby, it can avoid compatibility issues between the different versions of the libraries.</p>\n<pre><code class=\"language-bash\">pip install virtualenv\n</code></pre>\n<p>The output should be like this −</p>\n<pre><code class=\"language-bash\">Collecting virtualenv\n  Downloading virtualenv-15.0.1-py2.py3-none-any.whl (1.8MB)\n\n    100% |################################| 1.8MB 204kB/s\nInstalling collected packages: virtualenv\nSuccessfully installed virtualenv-15.0.1\n</code></pre>\n<p>This command needs administrator privileges. Add sudo before pip on Linux/Mac OS. If you are on Windows, log in as Administrator. On Ubuntu virtualenv may be installed using its package manager.</p>\n<pre><code class=\"language-bash\">Sudo apt-get install virtualenv\n</code></pre>\n<p>Once installed, new virtual environment is created in a folder.</p>\n<pre><code class=\"language-bash\">mkdir newproj\ncd newproj\nvirtualenv venv\n</code></pre>\n<p>To activate corresponding environment, on Linux/OS X, use the following −</p>\n<pre><code class=\"language-bash\">venv/bin/activate\n</code></pre>\n<p>We are now ready to install Flask in this environment.</p>\n<pre><code class=\"language-bash\">pip install Flask\n</code></pre>\n<p>The output should be like this.</p>\n<pre><code class=\"language-bash\">Collecting Flask\n  Downloading Flask-0.10.1.tar.gz (544kB)\n    100% |################################| 544kB 410kB/s\nCollecting Werkzeug>=0.7 (from Flask)\n  Downloading Werkzeug-0.11.4-py2.py3-none-any.whl (305kB)\n    100% |################################| 307kB 531kB/s\nCollecting Jinja2>=2.4 (from Flask)\n  Downloading Jinja2-2.8-py2.py3-none-any.whl (263kB)\n    100% |################################| 266kB 935kB/s\nCollecting itsdangerous>=0.21 (from Flask)\n  Downloading itsdangerous-0.24.tar.gz (46kB)\n    100% |################################| 49kB 1.6MB/s\nCollecting MarkupSafe (from Jinja2>=2.4->Flask)\n  Downloading MarkupSafe-0.23.tar.gz\nInstalling collected packages: Werkzeug, MarkupSafe, Jinja2, itsdangerous, Flask\n  Running setup.py install for MarkupSafe\n  Running setup.py install for itsdangerous\n  Running setup.py install for Flask\nSuccessfully installed Flask-0.10.1 Jinja2-2.8 MarkupSafe-0.23 Werkzeug-0.11.4 itsdangerous-0.24\n</code></pre>\n<p>The above command can be run directly, without virtual environment for system-wide installation.</p>\n<h2>Application</h2>\n<p>In order to test Flaks installation install, you could type the following code in your Python editor as name.py. Here <em>name</em> could be any word. I called mine flasky.</p>\n<pre><code class=\"language-python\">from flask import Flask\n\napp = Flask(__name__)\n\n\n@app.route('/')\ndef flask_world():\nreturn 'Welcome to Flasky!'\n\nif __name__ == '__main__':\napp.run()\n</code></pre>\n<p>A couple of things to note from the above snippet:</p>\n<ul>\n<li>Importing <code>flask</code> module is necessary and important. The object Flask class is our WSGI application.</li>\n<li>Flask constructor takes the name of current module (<strong>name</strong>) as argument.</li>\n<li>The <code>route()</code> function of the Flask class is a <em>decorator</em>, which tells the application which URL should call the associated function.</li>\n<li>Finally the <code>run()</code> method of Flask class runs the application on the local development server.</li>\n</ul>\n<h3>Functions to note</h3>\n<blockquote>\n<p><code>app.route(rule, options)</code></p>\n</blockquote>\n<ul>\n<li>The rule parameter represents the URL for the function to open</li>\n<li>The options parameter is a list of parameters to be forwarded to the underlying Rule object\nIn the above example, <strong>‘/’</strong> URL is bound with <strong>flask_world()</strong> function. Hence, when the home page of web server is opened in browser, the output of this function will be rendered. This will be a simple text \"Welcome to Flasky!\".</li>\n</ul>\n<blockquote>\n<p><code>app.run(host, port, debug, options)</code></p>\n</blockquote>\n<p>All these parameters are optional</p>\n<ul>\n<li><strong>host</strong>: Hostname to listen on. Defaults to 127.0.0.1 (localhost). Set to ‘0.0.0.0’ to have server available externally.</li>\n<li><strong>port</strong>: Defaults to 5000.</li>\n<li><strong>debug</strong>: Defaults to false. If set to true, provides a debug information.</li>\n<li><strong>options</strong>: To be forwarded to underlying Werkzeug server.</li>\n</ul>\n<p>To execute the above snippet simply go to your terminal and go to the directory that holds the project and type in</p>\n<pre><code class=\"language-bash\">python flasky.py\n</code></pre>\n<p>You will recieve the following information</p>\n<pre><code class=\"language-bash\">* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n</code></pre>\n<p>Open the above URL (localhost:5000) in the browser. ‘Welcome to Flasky!’ message will be displayed on it.</p>\n<h3>Debug mode</h3>\n<p>A Flask application is started by calling the run() method. However, while the application is under development, it should be restarted manually for each change in the code. To avoid this inconvenience, enable debug support. The server will then reload itself if the code changes. It will also provide a useful debugger to track the errors if any, in the application.</p>\n<p>The Debug mode is enabled by setting the debug property of the application object to True before running or passing the debug parameter to the run() method.</p>\n<pre><code class=\"language-python\">app.debug = True\napp.run()\napp.run(debug = True)\n</code></pre>\n<h2>Routing</h2>\n<p>Modern web frameworks use the routing technique to help a user remember application URLs. It is useful to access the desired page directly without having to navigate from the home page.</p>\n<p>The <code>route()</code> decorator in Flask is used to bind URL to a function. For example −</p>\n<pre><code class=\"language-python\">@app.route('/flasky-closet')\ndef flasky_closet():\n   return 'This is what flasky likes to wear.'\n</code></pre>\n<p>Here, URL <code>'/flasky-closet'</code> rule is bound to the <code>flasky_closet()</code> function. As a result, if a user visits <a href=\"http://localhost:5000/flasky-closet\">http://localhost:5000/flasky-closet</a> URL, the output of the <code>flasky_closet()</code> function will be rendered in the browser. In this case a text <code>This is what flasky likes to wear.</code></p>\n<p>Alternatively, the <code>add_url_rule()</code> function of an application object is also available to bind a URL with a function as in the above example, <code>route()</code> is used.</p>\n<p>A decorator’s purpose is also served by the following representation −</p>\n<pre><code class=\"language-python\">def flasky_closet():\n   return 'This is what flasky likes to wear.'\napp.add_url_rule('/', 'flasky-closet', flasky)\n</code></pre>\n<h2>Variable Rules</h2>\n<p>It is possible to build a URL dynamically, by adding variable parts to the rule parameter. This variable part is marked as <variable-name>. It is passed as a keyword argument to the function with which the rule is associated.</p>\n<p>In the following example, the rule parameter of <code>route()</code> decorator contains <code>&#x3C;name></code> variable part attached to URL <code>/flasky-says-hello</code>. Hence, if the <a href=\"http://localhost:5000/flasky-says-hello/Lusina\">http://localhost:5000/flasky-says-hello/Lusina</a> is entered as a URL in the browser, 'Lusina' will be supplied to <code>flasky_greet()</code> function as argument.</p>\n<pre><code class=\"language-python\">from flask import Flask\napp = Flask(__name__)\n\n@app.route('/flasky-says-hello/&#x3C;name>')\ndef flaksy_greet(name):\n   return 'Flasky says hello %s!' % name\n\nif __name__ == '__main__':\n   app.run(debug = True)\n</code></pre>\n<p>Running above script from the Python shell and opening the browser with URL <a href=\"http://localhost:5000/flasky-say-hello/Lusina\">http://localhost:5000/flasky-say-hello/Lusina</a></p>\n<p>The following output will be displayed in the browser.</p>\n<blockquote>\n<p><code>Flasky says hello Lusina!</code></p>\n</blockquote>\n<p>In addition to the default string variable part, rules can be constructed using the following converters −</p>\n<ul>\n<li><strong>int</strong> accepts integer</li>\n<li><strong>float</strong> For floating point value</li>\n<li><strong>path</strong> accepts slashes used as directory separator character</li>\n</ul>\n<pre><code class=\"language-python\">@app.route('/flasky-age/&#x3C;int:postID>')\ndef flasky_age(postID):\n    return 'Flasky just turned  %d' % postID\n\n\n@app.route('/flasky-version/&#x3C;float:revNo>')\ndef flasky_version(revNo):\n    return 'Flasky version %f' % revNo\n</code></pre>\n<p>Running the above code from Python Shell. Visit the URL <a href=\"http://localhost:5000/flasky-age/11\">http://localhost:5000/flasky-age/11</a> in the browser.\nThe given number is used as argument to the flasky_age() function. The browser displays the following output:</p>\n<blockquote>\n<p><code>Flasky just turned 11</code></p>\n</blockquote>\n<p>Enter this URL in the browser − <a href=\"http://localhost:5000/flasky-version/1.1\">http://localhost:5000/flasky-version/1.1</a></p>\n<p>The flasky_version() function takes up the floating point number as argument. The following result appears in the browser window −</p>\n<blockquote>\n<p><code>Flasky version 1.100000</code></p>\n</blockquote>\n<p>The URL rules of Flask are based on Werkzeug’s routing module. This ensures that the URLs formed are unique and based on precedents laid down by Apache.</p>\n<p>Consider the rules defined in the following script −</p>\n<pre><code class=\"language-python\">from flask import Flask\napp = Flask(__name__)\n\n@app.route('/flask')\ndef hello_flask():\n   return 'Hello Flask'\n\n@app.route('/python/')\ndef hello_python():\n   return 'Hello Python'\n\nif __name__ == '__main__':\n   app.run()\n```python\n\nBoth the rules appear similar but in the second rule, trailing slash (/) is used. As a result, it becomes a canonical URL. Hence, using /python or /python/ returns the same output. However, in case of the first rule, /flask/ URL results in 404 Not Found page.\n\n## URL Building\n\nThe `url_for()` function is very useful for dynamically building a URL for a specific function. The function accepts the name of a function as first argument, and one or more keyword arguments, each corresponding to the variable part of URL.\n\nThe below code is a small snippet demonstrating the same, it builds on the previous snippets.\n\n```python\nfrom flask import Flask, redirect, url_for\n# some code\n...\n\n\"\"\"\nusing url_for and redirect to redirect the user in case they are not admin, for instance\nthe flasky_admin function is the admin site\n\"\"\"\n\n\n@app.route('/admin')\ndef flasky_admin():\n    return 'Hello, welcome to the admin page. Admin privileges!'\n\n\"\"\"\nbelow function is the guest site\n\"\"\"\n\n\n@app.route('/guest/&#x3C;guest>')\ndef flasky_guest(guest):\n    return 'Hello %s, You are logged in as guest in Flasky\\'s world' % guest\n\n\n\"\"\"\nbelow function checks the user, if they are admin, they will be redirected to the admin site,\nif they are guests, they will be redirected to the guest site. t\nThis function acts as a validator based on the parameter passed in, in this case, based on the url typed in,\nit will redirect to the relevant function based on the input\n\"\"\"\n\n\n@app.route('/user/&#x3C;name>')\ndef flasky_user(name):\n    if name == 'admin':\n        return redirect(url_for('flasky_admin'))\n    else:\n        return redirect(url_for('flasky_guest', guest=name))\n\n#  other code\n...\n</code></pre>\n<p>The above script has a function <code>flasky_user(name)</code> which accepts a value to its argument from the URL. This function checks if an argument received matches <code>admin</code> or not. If it matches, the application is redirected to the <code>flasky_admin()</code> function using <code>url_for()</code>, otherwise to the <code>flasky_guest()</code> function passing the received argument as guest parameter to it.</p>\n<p>On running the above code, this is the output when the url is <strong><a href=\"http://localhost:5000/admin\">http://localhost:5000/admin</a></strong></p>\n<blockquote>\n<p>Hello, welcome to the admin page. Admin privileges!</p>\n</blockquote>\n<p>When the url is changed to <a href=\"http://localhost:5000/guest/Meme\">http://localhost:5000/guest/Meme</a></p>\n<blockquote>\n<p>Hello Meme, You are logged in as guest in Flasky's world</p>\n</blockquote>\n<h2>HTTP methods</h2>\n<p>The following table is a summary of the HTTP methods availaible:\n| Method | Description\n|---|\n| GET | Sends data in unencrypted form to the server. Most common method.\n| POST | Used to send HTML form data to server. Data received by POST method is not cached by server.\n| HEAD | Same as GET, but without response body\n| PUT | Replaces all current representations of the target resource with the uploaded content\n| DELETE| Removes all current representations of the target resouce given by URL</p>\n<p>By default, the Flask route responds to the <em>GET</em> requests. However, this preference can be altered by providing methods argument to <code>route()</code> decorator.</p>\n<p>In order to demonstrate the use of <code>POST</code> method in URL routing, first let us create an HTML form and use the POST method to send form data to a URL.</p>\n<p>Save the following script as login.html</p>\n<pre><code class=\"language-html\">&#x3C;html>\n   &#x3C;body>\n      &#x3C;form action = \"http://localhost:5000/Login\" method = \"post\">\n         &#x3C;p>Enter Name:&#x3C;/p>\n         &#x3C;p>&#x3C;input type = \"text\" name = \"nm\" />&#x3C;/p>\n         &#x3C;p>&#x3C;input type = \"submit\" value = \"submit\" />&#x3C;/p>\n      &#x3C;/form>\n   &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p>The following demonstrate HTTP requests. The first function, <code>success(name)</code> is only called when the user is successful in logging in. The <code>request</code> module has to be imported.</p>\n<pre><code class=\"language-python\">from flask import Flask, redirect, url_for, request\n\n@app.route('/success/&#x3C;name>')\ndef success(name):\n    return 'welcome to Flasky! %s' % name\n</code></pre>\n<p>This below function redirects the user to the login page, The <code>app.route</code> decorator takes in two arguments, the /Login page url and the HTTP methods. It checks the HTTP requests, if the request is POST, <a href=\"http://localhost/login\">http://localhost/login</a> is mapped to the <code>login()</code> function. Since the server has received data by POST method, value of <code>nm</code> parameter obtained from the form data is obtained by −</p>\n<blockquote>\n<p>user = request.form['nm']</p>\n</blockquote>\n<p>It is then passed to <code>/success</code> URL as variable part. The browser displays a welcome message in the window.</p>\n<p>Changing the method parameter to ‘GET’ in login.html and opening it again in the browser will cause the data recieved on server by the GET method. The value of <code>nm</code> parameter is now obtained by</p>\n<blockquote>\n<p>User = request.args.get(‘nm’)</p>\n</blockquote>\n<p>Here, args is dictionary object containing a list of pairs of form parameter and its corresponding value. The value corresponding to <code>nm</code> parameter is passed on to <code>/success</code> URL as before.</p>\n<pre><code class=\"language-python\">@app.route('/login', methods=['POST', 'GET'])\ndef login():\n    if request.method == 'POST':\n        user = request.form['nm']\n        return redirect(url_for('success', name=user))\n    else:\n        user = request.args.get('nm')\n        return redirect(url_for('success', name=user))\n</code></pre>\n<h2>Templates</h2>\n<p>It is possible to return the output of a function bound to a certain URL in the form of HTML. For instance, in the following script, <code>hello()</code> function will render ‘Hello World’ with <h1> tag attached to it.</p>\n<pre><code class=\"language-python\">from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n   return '&#x3C;html>&#x3C;body>&#x3C;h1>Hello World'&#x3C;/h1>&#x3C;/body>&#x3C;/html>'\n\nif __name__ == '__main__':\n   app.run(debug = True)\n</code></pre>\n<p>However, generating HTML content from Python code is cumbersome, especially when variable data and Python language elements like conditionals or loops need to be put. This would require frequent escaping from HTML.</p>\n<p>This is where one can take advantage of <strong><a href=\"http://jinja.pocoo.org/\">Jinja2</a></strong> template engine, on which Flask is based. Instead of returning hardcode HTML from the function, a HTML file can be rendered by the <code>render_template()</code> function.</p>\n<pre><code class=\"language-python\">from flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n   return render_template(‘hello.html’)\n\nif __name__ == '__main__':\n   app.run(debug = True)\n</code></pre>\n<p>Flask will try to find the HTML file in the templates folder, in the same folder in which this script is present.</p>\n<pre><code class=\"language-bash\">├── App-Folder\n|    ├── flasky.py\n|    ├── templates\n|           ├── index.html\n</code></pre>\n<p>The term <em>web templating system</em> refers to designing an HTML script in which the variable data can be inserted dynamically. A web template system comprises of a template engine, some kind of data source and a template processor.</p>\n<p>Flask uses <em>Jinja2</em> template engine. A web template contains HTML syntax interspersed placeholders for variables and expressions (in this case Python expressions) which are replaced values when the template is rendered.</p>\n<p>The following code is saved as hello.html in the templates folder.</p>\n<pre><code class=\"language-html\">&#x3C;!doctype html>\n&#x3C;html>\n   &#x3C;body>\n      &#x3C;h1>Hello {{ name }}&#x3C;/h1>\n   &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p>Next, run the following script from Python shell.</p>\n<pre><code class=\"language-python\">from flask import Flask, render_template\n\napp = Flask (__name__)} %}\n\n@app.route(\"/hello/&#x3C;user>\")\ndef hello_name(user):\n   return render_template('hello.html', name = user)\n\nif __name__ == '__main__':\n   app.run(debug = True)\n</code></pre>\n<p>As the development server starts running, open the browser and enter URL as − <a href=\"http://localhost:5000/hello/Lusina\">http://localhost:5000/hello/Lusina</a></p>\n<p>The variable part of URL is inserted at <code>{{ name }}</code> place holder.</p>\n<p>The Jinja2 template engine uses the following delimiters for escaping from HTML.</p>\n<ul>\n<li><code>{\\%\\ ... \\%\\}</code> for Statements</li>\n<li><code>{{ ... }}</code> for Expressions to print to the template output</li>\n<li><code>{# ... #}</code> for Comments not included in the template output</li>\n<li><code># ... ##</code> for Line Statements</li>\n</ul>\n<p>In the following example, use of conditional statement in the template is demonstrated. The URL rule to the hello() function accepts the integer parameter. It is passed to the hello.html template. Inside it, the value of number received (marks) is compared (greater or less than 50) and accordingly HTML is conditionally rendered.</p>\n<p>The Python Script is as follows −</p>\n<pre><code class=\"language-python\">from flask import Flask, render_template\napp = Flask(__name__)\n\n@app.route('/hello/&#x3C;int:score>')\ndef hello_name(score):\n   return render_template('hello.html', marks = score)\n\nif __name__ == '__main__':\n   app.run(debug = True)\n</code></pre>\n<p>HTML template script of hello.html is as follows</p>\n<pre><code class=\"language-html\">&#x3C;!doctype html>\n&#x3C;html>\n   &#x3C;body>\n\n      {\\%\\ if marks>50 \\%\\}\n      &#x3C;h1> Your result is pass!&#x3C;/h1>\n      {\\%\\ else \\%\\}\n      &#x3C;h1>Your result is fail&#x3C;/h1>\n      {\\%\\ endif \\%\\}\n\n   &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<blockquote>\n<p>Note that the conditional statements if-else and endif are enclosed in delimiter {%..%}.</p>\n</blockquote>\n<p>Run the Python script and visit URL <a href=\"http://localhost/hello/60\">http://localhost/hello/60</a> and then <a href=\"http://localhost/hello/30\">http://localhost/hello/30</a> to see the output of HTML changing conditionally.</p>\n<p>The Python loop constructs can also be employed inside the template. In the following script, the <code>result()</code> function sends a dictionary object to template results.html when URL <a href=\"http://localhost:5000/result\">http://localhost:5000/result</a> is opened in the browser.</p>\n<p>The Template part of result.html employs a for loop to render key and value pairs of dictionary object result{} as cells of an HTML table.</p>\n<p>Run the following code from Python shell.</p>\n<pre><code class=\"language-python\">from flask import Flask, render_template\napp = Flask(__name__)\n\n@app.route('/result')\ndef result():\n   dict = {'phy':50,'che':60,'maths':70}\n   return render_template('result.html', result = dict)\n\nif __name__ == '__main__':\n   app.run(debug = True)\n</code></pre>\n<p>The results.html</p>\n<pre><code class=\"language-html\">    &#x3C;!doctype html>\n    &#x3C;html>\n       &#x3C;body>\n\n      &#x3C;table border = 1>\n         {\\%\\ for key, value in result.iteritems() \\%\\}\n\n            &#x3C;tr>\n               &#x3C;th> {{ key }} &#x3C;/th>\n               &#x3C;td> {{ value }} &#x3C;/td>\n            &#x3C;/tr>\n\n         {\\%\\ endfor \\%\\}\n      &#x3C;/table>\n\n   &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<blockquote>\n<p>Python statements corresponding to the For loop are enclosed in {%..%} whereas, the expressions key and value are put inside {{ }}.</p>\n</blockquote>\n<h2>Static Files</h2>\n<p>A web application often requires a static file such as a javascript file or a CSS file supporting the display of a web page. Usually, the web server is configured to serve them for you, but during the development, these files are served from static folder in your package or next to your module and it will be available at /static on the application.</p>\n<p>A special endpoint ‘static’ is used to generate URL for static files.</p>\n<p>In the following example, a javascript function defined in hello.js is called on OnClick event of HTML button in index.html, which is rendered on ‘/’ URL of the Flask application.</p>\n<p>from flask import Flask, render_template</p>\n<pre><code class=\"language-python\">        app = Flask(__name__)\n\n        @app.route(\"/\")\n        def index():\n           return render_template(\"index.html\")\n\n        if __name__ == '__main__':\n           app.run(debug = True)\n</code></pre>\n<p>The HTML script of index.html is given below.</p>\n<pre><code class=\"language-html\">        &#x3C;html>\n           &#x3C;head>\n              &#x3C;script type = \"text/javascript\" src = \"{{ url_for('static', filename = hello.js') }}\" >&#x3C;/script>\n           &#x3C;/head>\n       &#x3C;body>\n          &#x3C;input type = \"button\" onclick = \"sayHello()\" value = \"Say Hello\" />\n       &#x3C;/body>\n        &#x3C;/html>\n</code></pre>\n<p>Hello.js contains sayHello() function.</p>\n<pre><code class=\"language-javascript\">function sayHello() {\n  alert('Hello World')\n}\n</code></pre>\n<h2>Request Object</h2>\n<p>The data from a client’s web page is sent to the server as a global request object. In order to process the request data, it should be imported from the Flask module.</p>\n<p>Important attributes of request object are listed below:</p>\n<table>\n<thead>\n<tr>\n<th>Request Object</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Form</td>\n<td>It is a dictionary object containing key and value pairs of form parameters and their values.</td>\n</tr>\n<tr>\n<td>args</td>\n<td>parsed contents of query string which is part of URL after question mark (?).</td>\n</tr>\n<tr>\n<td>Cookies</td>\n<td>dictionary object holding Cookie names and values.</td>\n</tr>\n<tr>\n<td>files</td>\n<td>data pertaining to uploaded file.</td>\n</tr>\n</tbody>\n</table>\n<h2>Sending Form Data to Template</h2>\n<p>We have seen that the http method can be specified in URL rule. The Form data received by the triggered function can collect it in the form of a <em>dictionary</em> object and forward it to a template to render it on a corresponding web page.</p>\n<p>In the following example, <code>/</code> URL renders a web page <code>login-sample.html</code> which has a form. The data filled in it is posted to the <code>/result</code> URL which triggers the <code>result()</code> function.</p>\n<p>The <code>results()</code> function collects form data present in <code>request.form</code> in a dictionary object and sends it for rendering to <code>success.html</code></p>\n<p>The template dynamically renders an HTML table of form data.</p>\n<p>These are the sample html forms and tables that will be used fot this small exercise</p>\n<pre><code class=\"language-html\">&#x3C;!--sample form for login sample-->\n&#x3C;form action = \"http://localhost:5000/success\" method = \"POST\">\n    &#x3C;p>Name &#x3C;input type = \"text\" name = \"Name\" />&#x3C;/p>\n     &#x3C;p>Email &#x3C;input type = \"email\" name = \"Email\" />&#x3C;/p>\n    &#x3C;p>username &#x3C;input type = \"text\" name = \"username\" />&#x3C;/p>\n     &#x3C;p>Password &#x3C;input type =\"password\" name = \"Password\" />&#x3C;/p>\n     &#x3C;p>&#x3C;input type = \"submit\" value = \"submit\" />&#x3C;/p>\n&#x3C;/form>\n</code></pre>\n<blockquote>\n<p>Login page</p>\n</blockquote>\n<pre><code class=\"language-html\">&#x3C;table border = 1>\n     {\\%\\ for key, value in result.iteritems() \\%\\}\n\n        &#x3C;tr>\n           &#x3C;th> {{ key }} &#x3C;/th>\n           &#x3C;td> {{ value }} &#x3C;/td>\n        &#x3C;/tr>\n\n     {\\%\\ endfor \\%\\}\n&#x3C;/table>\n</code></pre>\n<blockquote>\n<p>success page</p>\n</blockquote>\n<p>The Python code</p>\n<pre><code class=\"language-python\">@app.route('/login-sample')\ndef user():\n    return render_template('login-sample.html')\n\n\n@app.route('/success', methods=['POST', 'GET'])\ndef success_login():\n    if request.method == 'POST':\n        result = request.form\n        return render_template('success.html', result=result)\n    else:\n        render_template('404')\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>"}},{"node":{"frontmatter":{"title":"Algorithm Analysis","subtitle":"What is algorithm analysis","excerpt":"Algorithms are steps taken to solve a problem. Analysis of an algorithm helps us determine whether the algorithm is useful or not. Once we have a correct algorithm we have to determine whether the algorithm is efficient or not. Effieciency in any running system is important to achieve maximum performance within a given amount of time. Complexity should be at a minimum. Abstraction is key in this process.","path":"/tech/algorithms-analysis","date":"July 18, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"algorithm-analysis.jpg","thumbnail":"algorithm-analysis.jpg","teaser":"algorithm-analysis.jpg","credit":null,"creditlink":null},"tags":["complexity of algorithms","algorithms","algorithm analysis"]},"excerpt":"Algorithms are steps taken to solve a problem. Analysis of an algorithm helps us determine whether the algorithm is useful or not. Once we…","timeToRead":1,"html":"<p>Algorithms are steps taken to solve a problem. Analysis of an algorithm helps us determine whether the algorithm is useful or not. Once we have a correct algorithm we have to determine whether the algorithm is efficient or not. Effieciency in any running system is important to achieve maximum performance within a given amount of time. Complexity should be at a minimum. Abstraction is key in this process.</p>\n<h1>Time Complexity Categories</h1>\n<p>Measures the time taken for an algorithm to execute a problem given a certain input. Categories include:</p>\n<ul>\n<li><strong>Worst Case complexity</strong>: When the amount ot time required by an algorithm for a given input is maximum.</li>\n<li><strong>Average-case complexity</strong>: When the amount of time required by an algorithm for a given input is average.</li>\n<li><strong>Best case complexity</strong>: When the amount of time required by an algorithm for a given input is minimum.</li>\n</ul>\n<h1>Space Complexity</h1>\n<p>Space taken by an algorithm to execute a given problem. This depends on the data structure being worked on</p>\n<h1>Asymptotic Analysis</h1>\n<p>Kind of analysis done to calculate the complexity of an algorithm in its theoretical analysis. A alarge length of input is used to calculate the complexity function of the algorithm. A graph is usually used.\nAsymptotic denotes a condition where a line tends to meet a curve, but they do not intersect. Here the line and the curve is asymptotic to each other. It involves computing the running time of any any operation in mathematical units of computation.\nThe <em>Big-O-notation</em> is used for this</p>\n<h2>Asymptotic notations</h2>\n<ul>\n<li>Big-O notation usually denoted as <strong>O</strong>. Usually used</li>\n<li>Omega</li>\n<li>Theta</li>\n</ul>"}},{"node":{"frontmatter":{"title":"Complexity of Algorithms","subtitle":"Are algorithms that complex?","excerpt":"The whole point of the big-O/Ω/Θ stuff was to be able to say something useful about algorithms.","path":"/tech/algorithm-complexity","date":"July 17, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"algorithm-complexity.jpg","thumbnail":"algorithm-complexity.jpg","teaser":"algorithm-complexity.jpg","credit":null,"creditlink":null},"tags":["complexity of algorithms","algorithms"]},"excerpt":"The whole point of the big-O/Ω/Θ stuff was to be able to say something useful about algorithms.\nSo, let's return to some algorithms and see…","timeToRead":6,"html":"<p>The whole point of the big-O/Ω/Θ stuff was to be able to say something useful about algorithms.\nSo, let's return to some algorithms and see if we learned anything.\nConsider this simple procedure that sums a list (of numbers, we assume):\nprocedure sum(list)\ntotal = 0\nfor i from 0 to length(list)-1\ntotal += list[i]\nreturn total\nFirst: is the algorithm correct? Does it solve the problem specified?\nSecond: is it fast?\nTo evaluate the running time of an algorithm, we will simply ask how many “steps” it takes.\nIn this case, we can count the number of times it runs the += line.\nFor a list with (n) elements, it takes (n) steps.\nOr is counting the += line the right thing to do?\nWhen implementing the for loop, each iteration requires an add (for the loop index) and a comparison (to check the exit condition). We should count those.\nAlso, the variable initialization and return steps.\nSo, (3n+2) steps.\nBut, not all of those steps are the same.\nHow long does an x86 ADD instruction take compared to a CMP or RET instruction?\nWill the compiler keep both i and total in registers, or will one/both be in RAM? (A factor of ~10 difference.)\nHow do those instructions interact in the pipeline? Which can be sent through parallel pipelines in the processor and executed concurrently?\nThe answer to those is simple: I don't know and you don't either.\nThat's part of the reason we're asking about algorithms, not programs.\nBut both (n) and (3n+2) are perfectly reasonable proposals for the answer.\nDeciding between them requires more knowledge about the actual implementation details than we have.\nGood thing we have the function growth notation.\nRemember: this is easy for (n=5) elements. A good or bad algorithm will both be fast then.\nWe want to know how the algorithm behaves for large (n).\nFinally our answer: the sum procedure has running time (\\Theta(n)).\nWe'll say that this algorithm has time complexity (\\Theta(n)), or “runs in linear time”.\nBoth (n) and (3n+2) are (\\Theta(n)), and so is any other “exact” formula we could come up with.\nThe easy answer (count the += line) was just as correct as the very careful one.\nThe big-Θ notation hides all of the details we can't figure out anyway.\nAnother example: print out the sum of each two numbers in a list.\nThat is, given the list [1,2,3,4,5], we want to find 1+2, 1+3, 1+4, 1+5, 2+3, 2+4,….\nPseudocode:\nprocedure sum<em>pairs(list)\nfor i from 0 to length(list)-2\nfor j from i+1 to length(list)-1\nprint list[i] + list[j]\nFor a list with (n) elements, the for j loop iterates (n-1) times when it is called with i==0, then (n-2) times, then (n-3) times,…\nSo, the total number of times the print step runs is [\\begin{align\\</em>} (n-1)+(n-2)+\\cdots+2+1 &#x26;= \\sum<em>{k=1}^{n-1} k\\ &#x26;= \\frac{n(n-1)}{2}\\ &#x26;= \\frac{n^2}{2}-\\frac{n}{2},. \\end{align\\</em>}]\nIf we had counted the initialization of the for loops, counter incrementing, etc, we might have come up with something more like (\\frac{3}{2}n^2 + \\frac{1}{2}n + 1).\nEither way, the answer we give is that it takes (\\Theta(n^2)) steps.\nOr, the algorithm “has time complexity (\\Theta(n^2))” or “has (\\Theta(n^2)) running time” or “has quadratic running time”.\nThe lesson: when counting running time, you can be a bit sloppy.\nWe only need to worry about the inner-most loop(s), not the number of steps in there, or work in the outer levels.\n… because they are going to disappear anyway as constant factors and lower-order terms when they go into a big-O/Ω/Θ anyway.\nAverage and Worst Case</p>\n<p>Consider a linear search: we want to find an element in a list and return its (first) position, or -1 if it's not there.\nprocedure linear_search(list, value)\nfor i from 0 to length(list)-1\nif list[i] == value\nreturn i\nreturn -1\nHow many steps there?\nThe answer is: it depends.\nIf the thing we're looking for is in the first position, it takes (\\Theta(1)) steps.\nIf it's at the end, or not there, it takes (\\Theta(n)) steps.\nThe easiest thing to count is usually the worst case: what is the maximum steps required for any input of size (n)?\nThe worst case is that we go all the way to the end of the list, but don't find it and return -1.\nThe only line that makes sense to count here is the if line. It's in the inner-most loop, and is executed for every iteration.\nWe could also count the number of comparisons made: the == and the implicit comparison in the for loop.\nThat is either (n) or (2n+1) steps, so (\\Theta(n)) complexity.\nThe other useful option is the average case: what is the average steps required over all inputs of size (n)?\nMuch harder to calculate, since you need to consider every possible input to the algorithm.\nEven if we assume the element is found, the possible number of comparisons are:\nFound in position Comparisons\n1 2\n2 4\n⋮ ⋮\n(n) (2n)\nOn average, the number of comparisons is: [\\frac{2+4+\\cdots+2n}{n} = n+1,.]\nAgain, we have (\\Theta(n)) complexity.\n… but it's a good thing we checked. Some algorithms are different.\nGood/bad times</p>\n<p>We have said that these running times are important when it comes to running times of algorithm.\nBut we are throwing away a lot of information when we look only at big-O/Ω/Θ.\nThe lower-order terms must mean something.\nThe leading constants definitely do.\nAssuming one million operations per second, this is the approximate running time of an algorithm given running time, with an input of size (n):\n(n) (\\log<em>2 n) (n) (n\\log</em>2 n) (n^2) (n^{3}) (2^n)\n(10) 3.3 μs 10 μs 33 μs 100 μs 1 ms 1 ms\n(10^2) 6.6 μs 100 μs 664 μs 10 ms 1 s (4\\times 10^{16}) years\n(10^4) 13 μs 10 ms 133 ms 1.7 minutes 11.6 days (10^{2997}) years\n(10^6) 20 μs 1 s 20 s 11.6 days 32000 years (10^{300000}) years\nMaybe that gives a little idea why we'll only worry about complexity\n… at least at first.\nA summary:\nIf you can get (O(\\log n)) life is good: hand it in and go home.\n(O(n\\log n)) is pretty good: hard to complain about it.\n(O(n^k)) could be bad, depending on (k): you won't be solving huge problems. These are polynomial complexity algorithms for (k\\ge 1).\n(\\Omega(k^n)) is a disaster: almost as bad as no algorithm at all if you have double-digit input sizes. These are exponential complexity algorithms for (k\\gt 1).\nSee also: Numbers everyone should know\nA problem that has a polynomial-time algorithm is called tractable.\nNo polynomial time algorithm: intractable.\nThere is a big category of problems that nobody has a polynomial-time algorithm for, but also can't prove that none exists: the NP-complete problems.\nSome examples: Boolean satisfiability, travelling salesman, Hamiltonian path, many scheduling problems, Sudoku (size (n)).\nIf you have an algorithm with a higher complexity than necessary, no amount of clever programming will make up for it.\nNo combination of these will make a (O(n^2)) algorithm faster than an (O(n\\log n)): faster language, better optimizer, hand-optimization of code, faster processor.\nImportant point: the complexity notations only say things about large (n).\nIf you always have small inputs, you might not care.\nAlgorithms with higher complexity class might be faster in practice, if you always have small inputs.\ne.g. Insertion sort has running time (\\Theta(n^2)) but is generally faster than (\\Theta(n\\log n)) sorting algorithms for lists of around 10 or fewer elements.\nThe most important info that the complexity notations throw away is the leading constant.\nThere is a difference between (n^2) instructions and (100n^2) instructions to solve a problem.\nOnce you have the right big-O, then it's time to worry about the constants.\nThat's what clever programming can do.\nWhen we're talking about algorithms (and not programming), the constants don't usually matter much.\nIt's rare to have an algorithm with a big leading constant.\nSo it's not really possible to decide between the algorithms.\nUsually it's a choice between (4n\\log n) or (5n\\log n): you probably have to implement, compile, and profile to decide for sure.\nExample: sorting algorithms. There are several algorithms to sort a list/array.\nInsertion/Selection/Bubble Sorts: (\\Theta(n^2)).\nMerge/Heap Sorts: (\\Theta(n\\log n)).\nQuicksort: (\\Theta(n\\log n)) average case but (very rarely) (\\Theta(n^2)) worst case.\nBut quicksort is usually faster in practice.\n… except when it isn't.\nSeveral recent languages/libraries have implemented a heavily-optimized mergesort (e.g. Python, Perl, Java ≥JDK1.3, Haskell, some STL implementations) instead of Quicksort (C, Ruby, some other STL implementations).\nSpace Complexity</p>\n<p>We have only been talking about running time/speed so far.\nIt also makes good sense to talk about the complexity of other things.\nMost notably, memory use by an algorithm.\nAn algorithm that uses (\\Theta(n^{3})) space is bad. Maybe as bad as (\\Theta(n^{3})) time.\nAn algorithm that uses (O(1)) extra space (in addition to space needed to store the input) is called in-place.\ne.g. selection sort is in-place, but mergesort ((\\Theta(n)) extra space) and Quicksort ((\\Theta(\\log n)) extra space, average case) aren't.</p>"}},{"node":{"frontmatter":{"title":"Abstract Data Types","subtitle":"All about abstract data types","excerpt":"There are several Abstract data types that are used in Java, this is a brief overview of some of them","path":"/tech/abstract-data-types","date":"July 12, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"abstract-data-type.jpg","thumbnail":"abstract-data-type.jpg","teaser":"abstract-data-type.jpg","credit":null,"creditlink":null},"tags":["data","arrays","lists","stacks","queues"]},"excerpt":"There are several Abstract data types that are used in Java, Stacks The Stack class represents a last-in-first-out (LIFO) stack of objects…","timeToRead":2,"html":"<p>There are several Abstract data types that are used in Java,</p>\n<h2>Stacks</h2>\n<p>The Stack class represents a last-in-first-out (LIFO) stack of objects, The last element in will be the first one out, which is unfair if you ask me :smile:. It extends class <a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/Vector.html\"><strong>Vector</strong></a> with five operations that allow a vector to be treated as a stack.</p>\n<p>The usual push and pop operations are provided, as well as a method to peek at the top item on the stack, a method to test for whether the stack is empty, and a method to search the stack for an item and discover how far it is from the top.</p>\n<p>When a stack is first created, it contains no items.</p>\n<ul>\n<li><strong>push</strong> adds an item to the top of the stack. This will always be the last one in, but the first one out.</li>\n<li><strong>pop</strong> removes an element from the top of the stack and returns it.</li>\n<li><strong>peek</strong> look at the object at the top of the stack without removing it</li>\n<li><strong>empty</strong> tests if the stack is empty</li>\n<li><strong>search</strong> if the object being sought is in the stack, it returns the 1-based position of the object, which is the distance from the top.</li>\n</ul>\n<p>A practical example, trays piled on top of each other, books laid on top of each other, plates laid on top of each other.</p>\n<p>There is no scenerio in which the stack will remain empty. There will always be data flowing in and data flowing out.</p>\n<p>A code snippet:</p>\n<pre><code class=\"language-java\">public class StacksDemo {\n    public static void main(String[] args){\n        Stack stack = new Stack();\n        System.out.println(\"Stack is \" + stack);\n        showPush(stack,52);\n        showPop(stack);\n        /*output:\n        *Stack is []\n        * push 52\n        * Stack is now: [52]\n        * Popped element is 52\n        * Stack is: []\n        * */\n    }\n\n    /**Method showing how to push elements into a stack*/\n    public static void showPush(Stack stack, int a){\n        stack.push(new Integer(a));\n        System.out.println(\"push \" + String.valueOf(a));\n        System.out.println(\"Stack is now: \"+ stack );\n    }\n\n    /**Method demonstrating the use of pop*/\n    public static void showPop(Stack stack){\n        Integer integer = (Integer) stack.pop();\n        System.out.println(\"Popped element is \" + String.valueOf(integer));\n        System.out.println(\"Stack is: \"+ stack);\n    }\n/*Class end*/\n}\n</code></pre>\n<blockquote>\n<p>code snippet can be found <a href=\"https://github.com/BrianLusina/Java-Playground/blob/master/Toy%20Problems/src/DataStructures/DataTypes/StacksDemo.java\">here</a></p>\n</blockquote>\n<h2>Queue</h2>\n<p>Resembles a normal queue on a bus station, the first in line will be the first one to board the bus, the last will obviously be the last. It is based on a first come first serve\nHas 2 major operations:</p>\n<ul>\n<li>Dequeue</li>\n<li>-</li>\n</ul>\n<h2>LinkedLists</h2>\n<p>Data arranged in a list with the first element being the <strong>head</strong> having the node and a pointer. The pointer points to another node and so on and so forth until it reaches the last element with a node that is null. The last element is known as the <strong>tail</strong>\nThe node consists of where the current data is held and where the next data is held.</p>"}},{"node":{"frontmatter":{"title":"Sorting Algorithms","subtitle":"Brief overview of some sorting algorithms","excerpt":"Algorithms are set to achieve a certain outcome. Sorting algoritms follow numerical order and usually has random access to an array. This means that it can access random indexes of an array to perform a sort.","path":"/tech/sorting-algorithms","date":"July 12, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"sorting-algorithms.png","thumbnail":"sorting-algorithms.png","teaser":"sorting-algorithms.png","credit":null,"creditlink":null},"tags":["algorithms","sorting algorithms","array"]},"excerpt":"Algorithms are set to achieve a certain outcome. Sorting algoritms follow numerical order and usually has random access to an array. This…","timeToRead":2,"html":"<p>Algorithms are set to achieve a certain outcome. Sorting algoritms follow numerical order and usually has random access to an array. This means that it can access random indexes of an array to perform a sort.</p>\n<h1>Bubble Sort</h1>\n<p>Convinient for small data sets. Consider an array of elements such that:\nint[] arr = new int[]{14,33,27,10,33,19,42,44};\nThe array is not sorted. To sort this array, we compare 2 values at a time.\nSteps:</p>\n<ul>\n<li>compare 14 and 33, since 14 is less than 33, it remains in place</li>\n<li>next we compare 33 and 27, 27 is less than 33, hence we have to swap postions such that;\n<code>arr[1]</code> = 33 takes the place of <code>arr[2]</code> and vice versa.\nThe array now becomes:\n{14,27,33,10,33,19,48,44}</li>\n<li>The next comparison is now between 33 and 10. 10 is less than 33, so we swap positions as before.</li>\n<li>The process continues until all the elements in the array follow natural ordering.</li>\n</ul>\n<p>This is obviously convenient for small data sets as we are comparing 2 elements at a time. If the array was of length 50, it would take much longer to complete and would be inefficient. This is not what an ideal algorithm should achieve.</p>\n<pre><code class=\"language-java\">    /**\n     * @implNote\n     * set flag to true to begin first pass, initialize the step variable, create the temp variable\n     * within while loop, set the flag to false awaiting first pass\n     * record the steps taken in a variable called steps\n     * holds the temp value for the current element in array\n     * assign the current position of the array to the next element\n     * assign the next position of the array to the temp value\n     * set the flag to true to allow continuing of loop, record the steps taken\n     * @param toSort array to perform the bubble sort\n     * @return toSort the sorted array\n     * */\n    public static int[] bubbly(int[] toSort){\n        boolean flag = true;\n        int steps = 0;\n        int temp;\n        while(flag){\n            flag = false;\n            for(int x = 0; x &#x3C; toSort.length-1;x++){\n                if(toSort[x] > toSort[x+1]){\n                    steps++;\n                    temp = toSort[x];\n                    toSort[x] = toSort[x+1];\n                    toSort[x+1] = temp;\n                    flag = true;\n                }\n\n            }\n        }\n        System.out.println(String.valueOf(steps)+ \" steps taken\");\n        return toSort;\n    }\n\n    public static void main(String[] args){\n        int[] arr = new int[]{18,29,1,100,17};\n        int[] arrTwo = new int[]{100,16,33,48,60,21,80};\n        /*Bubble sort Ascending*/\n        System.out.println(Arrays.toString(bubbly(arr)));\n        System.out.println(Arrays.toString(bubbly(arrTwo)));\n        /*5 steps taken\n        [1, 17, 18, 29, 100]\n        9 steps taken\n        [16, 21, 33, 48, 60, 80, 100]*/\n    }\n</code></pre>\n<blockquote>\n<p>Demonstration of a bubble sort algorithm, sorting elements in ascending order</p>\n</blockquote>\n<p>Code snippet right <a href=\"https://github.com/BrianLusina/Java-Playground/blob/master/Toy%20Problems/src/SortingAlgorithms/BubbleSortDemo.java\">here</a>.</p>\n<h1>Merge Sort</h1>\n<p>Uses the <em>divide and conquer rule</em> it divides a problem into smaller parts until it reaches the simplest form possible. Then it rejoins the divided elements in a sorted format until it is a full list again. This sorting algorithm is mostly used in arrays.</p>\n<p>Consider this example\n27 10 12 25 34 16 15 31\ndivide it into two parts\n27 10 12 25 34 16 15 31\ndivide each part into two parts\n27 10 12 25 34 16 15 31\ndivide each part into two parts\n27 10 12 25 34 16 15 31</p>\n<p>merge (cleverly-!) parts</p>\n<p>10 27 12 25 16 34 15 31\nmerge parts\n10 12 25 27 15 16 31 34\nmerge parts into one\n10 12 15 16 25 27 31 34</p>\n<h1>Insertion Sort</h1>"}},{"node":{"frontmatter":{"title":"A Practical example of Abstraction","subtitle":"A more practical approach to abstraction in OOP","excerpt":"Abstraction in the real world.","path":"/tech/abstraction","date":"July 11, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"abstraction.jpg","thumbnail":"abstraction.jpg","teaser":"abstraction.jpg","credit":null,"creditlink":null},"tags":["encapsulation","objects","object oriented programming","abstraction"]},"excerpt":"Abstraction is one of the principles of Object Oriented Programming where a programmer hides/reduces information of an object and only…","timeToRead":2,"html":"<p>Abstraction is one of the principles of Object Oriented Programming where a programmer hides/reduces information of an object and only reveals the relevant information at the time. It works alongside <em>inheritance</em> and <em>encapsulation</em>. This is done in order to reduce complexity and ensure efficiency.</p>\n<p>In the process of abstraction, the programmer tries to ensure that the entity is named in a manner that will make sense and that it will have all the relevant aspects included and none of the extraneous ones.</p>\n<p>A practical example is a car. Not many people are concerned with the inner workings of a motor vehicle, save for mechanics, engineers and car enthusiasts. A car is an object that has certail states and behaviours. It has states such as <em>black</em> paint, <em>engine size</em> and <em>number of doors</em> etc. The behaviours are <em>accelerate</em>, <em>decelerate</em> and <em>stop</em>, just to mention a few. Now, for the driver to intaract with the car, they have to do so through the steering wheel, the gears and the peddles. These are the <strong>interfaces</strong>.</p>\n<p>These are what act as a go-between the driver and the internal components of the car. This is where abstraction steps in. The driver does not particularly know what is going on in the engine when they accelerate and when they stop. All they get to interact with are the steering wheel, pedals and various gauges on the car dashboard. Abstraction basically gives them this relevant information as it is what is needed at the time of driving. All the driver needs to know at all times when they are driving are the fuel gauge, the speed they are on and car temperature. They do not need to know about how the car measures heat every second or how it gauges how much petrol is left in the tank or even how it calculates the current speed. This information is hidden in the internal components of the car (<em>encapsulation</em>) and is queried (say, you take your car apart and study it) only when need be. So at all times only relevant information is displayed(<em>abstraction</em>).</p>\n<p>This, as you can see, reduces the complexity when driving said car and allows the driver to only intaract with what they need to interact with at the time of driving.</p>"}},{"node":{"frontmatter":{"title":"Difference between Post increment and pre increment of a variable","subtitle":"x++ and ++x","excerpt":"This post is a demonstration of the difference between post increment and pre increment of variables in Java. Post increment is usually denoted as `x++`, where the x is the variable in question, usually an integer, double or float. While pre-increment is addition denoted as `++x`.","path":"/tech/postadd-preadd","date":"July 06, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":null,"thumbnail":null,"teaser":null,"credit":null,"creditlink":null},"tags":["Post-increment","pre-increment"]},"excerpt":"This post is a demonstration of the difference between post increment and pre increment of variables in Java. Post increment is usually…","timeToRead":1,"html":"<p>This post is a demonstration of the difference between post increment and pre increment of variables in Java. Post increment is usually denoted as <code>x++</code>, where the x is the variable in question, usually an integer, double or float. While pre-increment is addition denoted as <code>++x</code>.</p>\n<h1>Pre-increment</h1>\n<p>As the terms suggests, <em>PRE-increment</em> is the addition of a particular value before it is used. It is normally used when you want to use the incremented value of that particular variable. When the program encounters a pre-increment it increases the value of that variable in the memory then loads the expression.</p>\n<p>A simple demonstration:</p>\n<pre><code class=\"language-java\">public class PostAndPre {\n    public static void main(String[] args){\n        int x = 0;\n        for(int i = 0; i &#x3C; 10; i++){\n            System.out.printf(\"%d\\n\", ++x);\n            /*Output:\n            1 2 3 4 5 6 7 8 9 10 */\n        }\n    }\n}\n</code></pre>\n<blockquote>\n<p>Demo of pre-increment</p>\n</blockquote>\n<p>The above variable <code>x</code> is instantiated as 0. The program encounters the variable <code>x</code> and increases the value by 1 before output of the result.</p>\n<p>This is equivalent to:</p>\n<pre><code class=\"language-Java\">        x = x + 1;\n        int y = x;\n        System.out.printf(\"%d\", y);\n</code></pre>\n<h1>Post-increment</h1>\n<p>The <em>post increment</em> uses the variable before increasing it. So in the case of <code>x++</code>, the variable will be 0, and will be used as is before it will be increased. This loads the value of that variable in memory, increases the variable and then continues reading the expression.</p>\n<pre><code class=\"language-java\">        int l = 0;\n        for(int i = 0; i &#x3C; 10; i++){\n            System.out.printf(\"%d \\t\", l++);\n            //output 0  1   2   3   4   5   6   7   8   9\n        }\n</code></pre>\n<blockquote>\n<p>Demo of post increment</p>\n</blockquote>\n<p>The above variable <code>l</code> is instantiated as 0 and will be output as 0, before the variable is increased.</p>\n<p>Code snippet can be found <a href=\"https://github.com/BrianLusina/Java-Playground/blob/master/Toy%20Problems/src/PostAndPre/PostAndPre.java\">here</a>.</p>"}},{"node":{"frontmatter":{"title":"Accessors and Modifiers","subtitle":"subtle introduction to getters and setters","excerpt":null,"path":"/tech/access-modifiers","date":"July 05, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":null,"thumbnail":null,"teaser":null,"credit":null,"creditlink":null},"tags":["OOP","getters and setters","accessors","modifiers"]},"excerpt":"This topic will simply extend from the Objective of OOP and 4 principles of OOP and will majorly focus only on accessors and modifiers, i.e…","timeToRead":5,"html":"<p>This topic will simply <em>extend</em> from the <a href=\"https://brianlusina.github.io/Object-Oriented-Programming/\">Objective of OOP</a> and <a href=\"https://brianlusina.github.io/Principles-Of-Oop/\">4 principles of OOP</a> and will majorly focus only on accessors and modifiers, i.e. <em>getters</em> and <em>setters</em>.</p>\n<p>Accessors are methods used in Object Oriented Programming to enable <em>access</em> to a class fields which may be private. In most cases it is advisable to make these fields private and allow allow access to them from the accessors and modifier methods. The accessor methods, or <em>getter</em> methods as they are most commonly known as, are only used to <strong>access</strong> or <em>get</em> the fields/states of a particular object. Modifiers or <em>setters</em> allow the modification or <em>setting</em> of the fields of a particular object.</p>\n<p>These are used in encapsulation and allow data hiding which makes code more secure and also reduces the amount of code written, which is what every developer seeks, to make code cleaner, smaller, but still maintain the overall functionality and readability.</p>\n<p>A simple example of a Car class will be used. A Car is a super class of every car type in the world. This Car class will contain all the fields/states and behaviours/methods of all the car types in the world.</p>\n<p>This is the code for writing a super class Car in Java:</p>\n<pre><code class=\"language-Java\">public class Car {\n    private int wheels;\n    private int engineCapacity;\n    private int seats;\n    private String name;\n\n    /**Constructor for the Car class*/\n    public Car(int wheels, int engineCapacity, int seats, String name){\n        this.wheels = wheels;\n        this.engineCapacity = engineCapacity;\n        this.seats = seats;\n        this.name = name;\n    }\n\n    /**ACCESSORS AND MODIFIERS getters and setters*/\n\n    /*get and set wheels*/\n    public int getWheels(){\n        return wheels;\n    }\n\n    public void setWheels(int wheels){\n        this.wheels = wheels;\n    }\n\n    /*set and get the engine capacity*/\n    public int getEngineCapacity(){\n        return engineCapacity;\n    }\n\n    public void setEngineCapacity(int engineCapacity){\n        this.engineCapacity = engineCapacity;\n    }\n\n    /*getters and setters for the seats*/\n    public int getSeats(){\n        return seats;\n    }\n\n    public void setSeats(int seats){\n        this.seats = seats;\n    }\n\n    /*get and set the name*/\n    public String getName(){\n        return name;\n    }\n\n    public void setName(String name){\n        this.name = name;\n    }\n\n}\n</code></pre>\n<blockquote>\n<p>This is a car class with a constructor to define its objects on creation the getters and setters have been defined to allow the object's fields or states to be modified by the instance.</p>\n</blockquote>\n<p>The usual convention for writing getters is by writing the word <strong>get</strong> and followed by the name of the field to access. So, in this case, to acces the <code>seats</code> field, the function created is <code>getSeats()</code>. This getter <strong>MUST</strong> return the data type of the same field it wants to access. So, in the case of seats, it must return and <code>int</code> data type as the <code>seats</code> variable is an integer type.\nIt is important to note that getter methods do not take any arguments.</p>\n<p>Setters are a bit different. To create a setter function, the same method as declaring a get method is applied. Use of the word <strong>set</strong> followed by the name of the variable. An example would be <code>setName</code>. This naming follows the camel casing convention for naming variables. The setter methods <strong>DO NOT</strong> return any value and thus the <em>void</em> is used, which means: <em>does not return any value</em>. This does not return a particular value as it's job is to set a particular value. In this case, <code>setName(String name)</code> takes in a String argument and modifies the current name field (or re-assigns the name variable) with the input in the <code>setName</code> method. The setter methods must take arguments as they are, after all, supposed to modify the current field to a new state.</p>\n<p>All this is made possible because the variables have been declared <code>private</code>. This restricts access, therefore the need for use of getters and setters.</p>\n<h2>Sample usage of accessors and modifiers</h2>\n<p>Below is a sample usage of getters and setters from the Car's class defined above:</p>\n<pre><code class=\"language-Java\">public class CarTest {\n    public static void main(String[] args){\n        Car merc = new Car(4, 3500, 5, \"Mercedez Benz\");\n        Car toyota = new Car(4, 1200, 5, \"Allion\");\n\n        /*The getters allows the private variables to be accessed from the constructor*/\n        System.out.printf(\"This is a %s with %d wheels, %d seats and an engine capacity of\n        %d CC \\n\", toyota.getName(), toyota.getWheels(), toyota.getSeats(),toyota.getEngineCapacity());\n\n//output is This is a Allion with 4 wheels, 5 seats and an engine capacity of 1200\n\n        System.out.printf(\"This is a %s with %d wheels, %d seats and an engine capacity of\n        %d CC \\n\", merc.getName(), merc.getWheels(), merc.getSeats(),merc.getEngineCapacity());\n        //output is This is a Mercedez Benz with 4 wheels, 5 seats and an engine capacity of 3500 CC\n\n        /*the setters modify the states or fields of the object*/\n        merc.setName(\"Mercedes SLS\");\n        merc.setEngineCapacity(4500);\n        merc.setWheels(4);\n        merc.setSeats(2);\n\n        /*these have been modified from the previous states to the current states as described below*/\n        System.out.printf(\"This is a %s with %d wheels, %d seats and an engine capacity of\n        %d CC \\n\", merc.getName(), merc.getWheels(), merc.getSeats(),merc.getEngineCapacity());\n        //output is This is a Mercedes SLS with 4 wheels, 2 seats and an engine capacity of 4500 CC\n\n        //below lines modify the toyota object\n        toyota.setName(\"Toyota Celica\");\n        toyota.setEngineCapacity(2500);\n        toyota.setWheels(4);\n        toyota.setSeats(2);\n\n        /*these have been modified from the previous states to the current states as described below*/\n        System.out.printf(\"This is a %s with %d wheels, %d seats and an engine capacity of %d CC\", toyota.getName(), toyota.getWheels(), toyota.getSeats(),toyota.getEngineCapacity());\n        //output is: This is a Toyota Celica with 4 wheels, 2 seats and an engine capacity of 2500 CC\n\n    }\n}\n</code></pre>\n<p>The <code>merc</code> and <code>toyota</code> objects are instances of the Car class, thus they inherit all the characteristics(fields and methods of the parent class) of Car class. This allows them access to the variables such as <code>seats</code>, <code>engineCapacity</code> and <code>name</code>, just ot mention a few. Note, however, that these variables can only be accessed from the getters and setters</p>\n<p>The getters allow access to the various fields that have been set in the constructor. a method such as <code>merc.getName()</code> returns <em>Mercedez Benz</em>, while <code>toyota.getName()</code> returns <em>Allion</em>. These are the fields set in the constructor. using <code>merc.name</code> will return an error.</p>\n<p>To rename these fields the setters have been used. A method call such as <code>merc.setEngineCapacity(4500)</code> will change the <code>engineCapacity</code> from 3500 to 4500. This is modifying. The same applies to <code>toyota.setSeats(2)</code>.</p>\n<p>This is a basic example and is mostly used to restrict access to a class' states and behaviour to the outside world thus increasing security of the code used.</p>\n<p>Sample code can be found here <a href=\"https://github.com/BrianLusina/Java-Playground/blob/master/Toy%20Problems/src/DataStructures/OOP/Car.java\">Car Class</a> and <a href=\"https://github.com/BrianLusina/Java-Playground/blob/master/Toy%20Problems/src/DataStructures/OOP/CarTest.java\">CarTest class</a>.</p>"}},{"node":{"frontmatter":{"title":"Version Control and Git","subtitle":"Version control and git control","excerpt":"Version control and its subtle benefits","path":"/tech/git-control","date":"June 25, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"version-contol-system.png","thumbnail":"version-contol-system.png","teaser":"version-contol-system.png","credit":null,"creditlink":null},"tags":["git","version control","VCS","versioning"]},"excerpt":"The very first time I encountered Git, I was confused, I did not understand anything about it. Racked my head constantly trying to figure…","timeToRead":4,"html":"<p>The very first time I encountered Git, I was confused, I did not understand anything about it. Racked my head constantly trying to figure out what it was all about. Frankly, I was getting frustrated. I simply thought it was one of those cloud backups. So, I questioned what everyone was saying about Distributed Version Control System. Did not quite grasp the concept, until finally it started making sense when I went over a tutorial and read some books and started using it. It finally meant sense, A door was opened in my mind, which unlocked tons of other ones.</p>\n<p>Admittedly, I am still learning as I interact with it and I am enjoying as I go along.</p>\n<h2>What is Git and why should you git it?</h2>\n<p>Many questions have been raised as to what git is(Maybe, not so many), but still it is worth mentioning. Git is a <a href=\"https://en.wikipedia.org/wiki/Distributed_version_contro\" title=\"More about DVCS\">Distributed Version Control System</a> (DVCS)that allows developers share their work on a platform and also make changes to it thus collaborate more effectively.</p>\n<p>One may ask <em>\"Why not just use a cloud system like Dropbox, OneDrive or Google Drive?\"</em>. One, may use these cloud platforms, but it makes work a bit difficult in the long run. I shall explain why, but first, version control, what is it and why should you care?</p>\n<h2>Version Control System(VCS)</h2>\n<p>This is a system that records changes to a file or set of files over time so that you can recall specific versions later. Ideally, you can do this with any type of file in your computer and needless to say, it makes collaborating on projects even easier. This is considering that you may not be able to meet up with your team all the time physicall. This makes version control a inique and powerful tool.</p>\n<p>You could use <a href=\"https://www.google.com/drive/\">Google Drive</a> or <a href=\"https://www.dropbox.com/\">Dropbox</a> to save your files, but you will not be able to store specific versions of your files over time. Even if you label each file differently, say filenameV1.txt or filenameV2.txt. This will mean you will have tons of files just for one project and therefore it will make it difficult when it comes back to revert back to files from a previous state. Also, it will mean having tons and tons of folders each a different version for a single project. This is bad practice and also it will become bulky in the future.</p>\n<p>With VCS, you can:</p>\n<ul>\n<li>revert back to previous files easily, revert even an entire project,</li>\n<li>compare changes you have made over time on a single project. This allows you to make notes and possibly, see where you went wrong or right on a particular change</li>\n<li>See who last modified something that was causing a problem, that is if you are working with someone on a particular project.</li>\n<li>In the event you do lose your files and projects locally, you can easily recover them and continue with your work, sure, you can do this with any cloud platform, but it will cost you much less when it comes to VCS.</li>\n</ul>\n<p>There are three types of VCS:</p>\n<ol>\n<li>\n<p><strong>Local Version Control System</strong>, which is basically storing files locally on your machine. With LVCS, there is a system in place which means you store your files using a <em>time-stamp</em> on each directory your own, creating your own version control. This however can lead to many errors. Such as over-writing files you did not intend to over-write, or losing all of them in the event of a system crush.\n<img src=\"https://git-scm.com/book/en/v2/book/01-introduction/images/local.png\" alt=\"lvcsimage\"></p>\n<blockquote>\n<p>image showing files being versioned on a local computer</p>\n</blockquote>\n</li>\n<li>\n<p><strong>Centralized Version Control System</strong> is a centralized control system which allows collaborators and developers to work on a project that is stored in a central database. This is far much better than LCVS, as you can store your projects online and be able to properly version your work and view changes made by other developers. The downside is when the database crushes, so does the project, unless it was backed up elsewhere. This is damaging considering that their is a central point of failure.<a href=\"https://subversion.apache.org/\">Subversion</a> and <a href=\"https://www.perforce.com/\">Perforce</a> are examples of CVCS.\n<img src=\"https://git-scm.com/book/en/v2/book/01-introduction/images/centralized.png\" alt=\"cvcsimage\"></p>\n<blockquote>\n<p>image showing the working of a CVCS</p>\n</blockquote>\n</li>\n<li><strong>Distributed Version Control System</strong> is the best to use as clients don’t just check out the latest snapshot of the files: they fully mirror the repository. Thus if any server dies, and these systems were collaborating via it, any of the client repositories can be copied back up to the server to restore it. Every clone is really a full backup of all the data. In addition, many of these systems deal really well with having several remote repositories they can work with. This allows for collaboration with different groups of people in different ways simultaneously within the same project. This allows you to set up several types of workflows that aren’t possible in centralized systems. Examples of such systems are <a href=\"https://www.mercurial-scm.org/\">Mercurial</a> <a href=\"https://git-scm.com/\">Git</a>, <a href=\"darcs.net/\">Darcs</a> and <a href=\"bazaar.canonical.com/\">Bazaar</a></li>\n</ol>\n<p><img src=\"https://git-scm.com/book/en/v2/book/01-introduction/images/distributed.png\" alt=\"dvcsimage\"></p>\n<blockquote>\n<p>DVCS at work</p>\n</blockquote>\n<p>There is a lot more documentation online on Version Control Systems and <a href=\"https://git-scm.com/\">git</a> and there are very well documented too, I suggest getting in on this, especially if you are a developer just starting out and want to be able to properly store your work and collaborate with other developers.</p>\n<p>Get git now!</p>"}},{"node":{"frontmatter":{"title":"What Is Chrome Developer Tools?","subtitle":"Brief introduction to the Chrome DevTools","excerpt":"The Chrome Developer Tools (DevTools for short), are a set of web authoring and debugging tools built into Google Chrome. The DevTools provide web developers deep access into the internals of the browser and their web application.","path":"/tech/chrome-dev-tools","date":"June 06, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"chrome-dev-tools.png","thumbnail":"chrome-dev-tools.png","teaser":"chrome-dev-tools.png","credit":null,"creditlink":null},"tags":["chrome","DevTools","browser tools"]},"excerpt":"The Chrome Developer Tools (DevTools for short), are a set of web authoring and debugging tools built into Google Chrome. The DevTools…","timeToRead":3,"html":"<p>The Chrome Developer Tools (DevTools for short), are a set of web authoring and debugging tools built into Google Chrome. The DevTools provide web developers deep access into the internals of the browser and their web application. The DevTools are used to efficiently track down layout issues, set JavaScript breakpoints, and get insights for code optimization. It makes web development dare I say <em>easy</em>.</p>\n<p>These tools are effective for any web deveeloper and allow for live editing of a web application. Thus, you do not need to change the web application from the server that hosts the application and refresh your browser. This even allows you to track any bugs and also performance of your application. Thus makes web development a little bit simpler.</p>\n<h2>Accessging the DevTools</h2>\n<p>Access to the DevTools is quite simple. There are two ways:</p>\n<ul>\n<li>Select the Chrome menu Chrome Menu <img src=\"https://developer.chrome.com/devtools/images/chrome-menu.png\" alt=\"chromeMenu\"> at the top-right of your browser window, then select Tools > Developer Tools.</li>\n<li>Right-click on any page element and select Inspect Element.</li>\n<li>Use a keyboard shortcut such as F12 of</li>\n</ul>\n<p>The DevTools window will open at the bottom of your browser or on the right side of your browser, depending on how you prefer to dock it.\nThe Tools window has several panels that lets you edit your web application and track any changes you make.</p>\n<p><img src=\"https://developer.chrome.com/devtools/images/devtools-window.png\" alt=\"DevToolsWindow\"></p>\n<blockquote>\n<p>Chrome Developer Tools Window</p>\n</blockquote>\n<p>As you can see above, there are panels you can navigate to on the left side of the window. These let you work with a specifit type of page or app window.</p>\n<ul>\n<li>\n<p><strong>Elements</strong></p>\n<p>Allows you inspect everything on the <a href=\"https://en.wikipedia.org/wiki/Document_Object_Model\" title=\"More on DOM\"><em>Document Object Model</em></a> (DOM for short) and edit the elements you find.</p>\n<p><img src=\"https://developer.chrome.com/devtools/images/elements-panel.png\" alt=\"elementsPanel\" title=\"Elements Panel\"></p>\n</li>\n<li>\n<p><strong>Resources</strong></p>\n<p>This lets you inspect resources that are loaded in the inspected page. It lets you interact with HTML5 Database, Local Storage, Cookies, AppCache, etc.</p>\n<p><img src=\"https://developer.chrome.com/devtools/images/resources-panel.png\" alt=\"resourcePanel\" title=\"Resource panel\"></p>\n</li>\n<li>\n<p><strong>Network</strong></p>\n<p>Provides insights into resources that are requested and downloaded over the network in real time. Identifying and addressing those requests taking longer than expected is an essential step in optimizing your page.</p>\n<p><img src=\"https://developer.chrome.com/devtools/images/network-panel.png\" alt=\"networkPanel\" title=\"Network Panel\"></p>\n</li>\n<li>\n<p><strong>Sources</strong></p>\n<p>Developers need powerful debugging tools to help quickly discover the cause of an issue and fix it efficiently. The Sources tab allows you to go over the JavaScript code and debug where necessary.</p>\n<p><img src=\"https://developer.chrome.com/devtools/images/js-debugging.png\" alt=\"sourcesTab\" title=\"Sources Tab\"></p>\n</li>\n<li>\n<p><strong>Timeline</strong></p>\n<p>This gives you a complete overview of where time is spent when loading and using your web app or page. All events, from loading resources to parsing JavaScript, calculating styles, and repainting are plotted on a timeline.</p>\n<p><img src=\"https://developer.chrome.com/devtools/images/timeline-panel.png\" alt=\"timelinePanel\" title=\"Timeline Panel\"></p>\n</li>\n<li>\n<p><strong>Profiles</strong></p>\n<p>This allows you to <em>profile</em> the execution time and memory usage of a web app or page. These help you to understand where resources are being spent, and so help you to optimize your code. The profiles are:</p>\n<ul>\n<li>CPU profiler shows where execution time is spent in your page's JavaScript functions.</li>\n<li>Heap profiler shows memory distribution by your page's JavaScript objects and related DOM nodes.</li>\n<li>JavaScript profile shows where execution time is spent in your scripts</li>\n</ul>\n<p><img src=\"https://developer.chrome.com/devtools/images/profiles-panel.png\" alt=\"profileTab\" title=\"Profile Tab\"></p>\n</li>\n<li>\n<p><strong>Audits</strong></p>\n<p>The Audit panel can analyze a page as it loads. Then provides suggestions and optimizations for decreasing page load time and increase perceived (and real) responsiveness.</p>\n<p><img src=\"https://developer.chrome.com/devtools/images/audits-panel.png\" alt=\"auditPanel\" title=\"Audit Panel\"></p>\n</li>\n<li>\n<p><strong>Console</strong></p>\n<p>Provides two primary functions for developers testing web pages and applications. It is a place to:</p>\n<ul>\n<li>Log diagnostic information in the development process.</li>\n<li>A shell prompt which can be used to interact with the document and DevTools.</li>\n</ul>\n<p><img src=\"https://developer.chrome.com/devtools/docs/console-files/expression-evaluation.png\" alt=\"consoleTab\" title=\"Console Tab\"></p>\n</li>\n</ul>\n<h3>More on DevTools</h3>\n<p>These are just but the essentials to get you started on using the DevTools, more reading can be found here:</p>\n<ul>\n<li><a href=\"https://developer.chrome.com/devtools/docs/heap-profiling\">Heap Profiling</a></li>\n<li><a href=\"https://developer.chrome.com/devtools/docs/cpu-profiling\">CPU Profiling</a></li>\n<li><a href=\"https://developer.chrome.com/devtools/docs/device-mode\">Device Mode &#x26; Mobile Emulation</a></li>\n<li><a href=\"https://developer.chrome.com/devtools/docs/remote-debugging\">Remote Debugging</a></li>\n<li><a href=\"https://developer.chrome.com/devtools/docs/videos\">DevTools Videos</a></li>\n<li>And a free course on DevTools in <a href=\"http://discover-devtools.codeschool.com/\">CodeSchool</a></li>\n</ul>"}},{"node":{"frontmatter":{"title":"The 4 Principles of OOP","subtitle":"Principles governing OOP","excerpt":"For a program to be said to be object oriented, some principles have to be followed. These principles are crucial to enable the said program to be effective in order to be able to meet the needs the program was designed for.","path":"/tech/principles-of-oop","date":"June 03, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"principles-of-oop.jpg","thumbnail":"principles-of-oop.jpg","teaser":"principles-of-oop.jpg","credit":null,"creditlink":null},"tags":["oop","oop principles","objects","encapsulation","abstraction","interfaces","polymorphism"]},"excerpt":"For a program to be said to be object oriented, some principles have to be followed. These principles are crucial to enable the said program…","timeToRead":7,"html":"<p>For a program to be said to be object oriented, some principles have to be followed. These principles are crucial to enable the said program to be effective in order to be able to meet the needs the program was designed for.\nThe four principles are:</p>\n<ul>\n<li>Encapsulation</li>\n<li>Abstraction</li>\n<li>Inheritance</li>\n<li>Polymorphism</li>\n</ul>\n<h2>Encapsulation</h2>\n<p>This is the hiding of data implementation by restricting access to <em>setters</em> and <em>getters</em> Getters are accessor methods that allows the <em>state</em> of an object to be retrieved, while setters are mutator methods that allows on objects state to be modified. This enables the original data (variables or fields) to be protected as they are not directly modified, rather they are accessed through these methods. This enables one to make changes to a class without the worry that they are going to break other code that is using and calling the same class for information. Here is a brief example:</p>\n<pre><code class=\"language-Java\">public class Person{\n  private String fName;\n  private String lName;\n  private String email;\n\n  //Constructor\n  public Person(String fName,String lName,String email){\n    this.fName = fName;\n    this.lName = lName;\n    this.email = email.\n  }\n\n  //Getter and setter methods for each field\n  public String getFname{\n    return fName;\n  }\n\n  public void setfName(String fName){\n    this.fName = fName;\n  }\n\n  public String getLname{\n    return lName;\n  }\n\n  public void setlName(String lName){\n    this.lName = lName;\n  }\n\n  public String getEmail{\n    return email;\n  }\n\n  public void setEmail(String email){\n    this.email = email;\n  }\n}\n</code></pre>\n<blockquote>\n<p>Above is a Person class that contains the persons first name(<code>fName</code>), last name(<code>lName</code>) and email(<code>email</code>)</p>\n</blockquote>\n<p>This Person class fields <code>fName</code>, <code>lName</code> and <code>email</code> are hidden from outside and can not be accessed directly. However, they can be accessed through getter and setter methods, i.e. <code>getFname</code>, <code>getLname</code>, <code>getEmail</code>, <code>setFname</code>, <code>setLname</code> and <code>setEmail</code>.</p>\n<pre><code class=\"language-Java\">import Person\npublic class Main{\n  public static void main(String args[]){\n    //creates a new Person object\n    Person john = new Person(\"John\",\"Hancock\",\"john@example.com\");\n    System.out.println(john.fName); //will return an error, as this field can not be directly accessed\n    System.out.println(john.getFname());//will return John\n  }\n}\n</code></pre>\n<blockquote>\n<p>Above is a simple demonstration of encapsulation. <code>john</code> object is created using a custom constructor, which initializes the fields (<code>fName</code>,<code>lName</code> and <code>email</code>). the <code>getFname</code> is used to access the first name John.</p>\n</blockquote>\n<h2>Abstraction</h2>\n<p>Abstract means a concept or an Idea which is not associated with any particular instance. Using abstract class/interface we express the intent of the class rather than the actual implementation. In a way, one class should not know the inner details of another in order to use it, just knowing the interfaces should be good enough. Abstraction denotes a model, a view, or some other focused representation for an actual item.</p>\n<p>When we think about it every noun in the language is a category. When we say \"a bird\", we are not referring to a specific bird, but to the category that contains all the birds in the world, and describe them. So when I say \"a bird\" most people have a general idea of what I mean, what information they will have about each individual object that will be in this category and what kind of action it could do.</p>\n<pre><code class=\"language-Java\">public class Bird{\n  private String name;\n  private float height;\n  private float weight;\n  private boolean fly;\n\n  //constructor\n  public Bird(String name,float height, float weight, boolean fly){\n    this.name = name;\n    this.height = height;\n    this.weight = weight\n    this.fly = fly;\n  }\n\n  //getters and setters\n  public String getName(){\n    return name;\n  }\n\n  public void setName(String name){\n    this.name = name;\n  }\n\n  public float getHeight(){\n    return height;\n  }\n\n  public void setHeight(float height){\n    this.height = height;\n  }\n\n  public float getWeight(){\n    return weight;\n  }\n\n  public void setWeight(float weight){\n    this.weight = weight;\n  }\n\n  public boolean getFly(){\n    return fly;\n  }\n\n  public void setFly(boolean fly){\n    this.fly = fly;\n  }\n\n  public boolean canFly(){\n    //code to determine if the bird can fly and returns a boolean value\n  }\n\n  public boolean canChirp(){\n    //code to determine if the bird can chirp and returns a boolean value\n  }\n}\n</code></pre>\n<blockquote>\n<p>Above is a simple class that has the states(fields) of a bird class.</p>\n</blockquote>\n<p>This is an example of an abstract type of what a bird object is to us outside of the software world. The abstract bird is defined by the operations that can be performed on it, and the information we can get from it and give to it.</p>\n<h2>Inheritance</h2>\n<p>This is the ability of a new class to be created, from an existing class by <em>extending</em> it. The parent class is referred to as the <strong>superclass</strong> or <strong>base class</strong> or <strong>parent class</strong> or <strong>ancestor class</strong>. The <em>superclass</em> is the class that defines all the properties and methods of the subclasses. Objects can relate to eachother with either a <strong>has a</strong>, <strong>uses a</strong> or an <strong>is a</strong> relationship. <em>Is a</em> is the inheritance way of object relationship. A proper example is a vehicle class. All cars are vehicles, but they do not have the same properties and behaviours. They all inherit from the vehicle class, but there are features that are not common in all, which makes every vehicle object unique from the other. A truck is not the same from a sedan and a motorbike is not the same as a trailer, despite the fact that they are all vehicles. Let us look at an example:</p>\n<pre><code class=\"language-Java\">public class Vehicle{\n  private String name;\n  private String model;\n  private int engineSize;\n  private int wheels;\n  private int doors;\n  pritave int seats;\n  int speed = 0;\n  int gear = 1;\n\n  //constructor\n  public Vehicle(String name, String model,int engineSize,int wheels,int doors,int seats){\n    this.name = name;\n    this.model = model;\n    this.engineSize = engineSize;\n    this.wheels = wheels;\n    this.doors = doors;\n    this.seats = seats;\n  }\n\n  //getters and setters\n  public String getName(){\n    return name;\n  }\n\n  public void setName(String name){\n    this.name = name;\n  }\n\n    public String getName(){\n    return name;\n  }\n\n  public void setName(String name){\n    this.name = name;\n  }\n\n  public String getModel(){\n    return model;\n  }\n\n  public void setModel(String model){\n    this.model = model;\n  }\n\n  public int getEngineSize(){\n    return engineSize;\n  }\n\n  public void setEngine(String engineSize){\n    this.engineSize = engineSize;\n  }\n\n  public String getWheels(){\n    return wheels;\n  }\n\n  public void setWheels(String wheels){\n    this.wheels = wheels;\n  }\n\n  public String getDoors(){\n    return doors;\n  }\n\n  public void setSeats(String seats){\n    this.seats = seats;\n  }\n\n  //behaviours of a typical Vehicle object\n  public void changeGear(int newValue) {\n         gear = newValue;\n  }\n\n  public void speedUp(int increment) {\n         speed = speed + increment;\n  }\n\n  public void applyBrakes(int decrement) {\n       speed = speed - decrement;\n  }\n\n  pulic void printStates() {\n   System.out.println(\" speed:\" + speed + \" gear:\" + gear);\n  }\n}\n</code></pre>\n<blockquote>\n<p><code>Vehicle</code> class that describes all the properties of a vehicle object. This is the superclass</p>\n</blockquote>\n<p>The class above can be extended as shown below</p>\n<pre><code class=\"language-Java\">public class Truck extends Vehicle{\n  //perform actions here specific to a Truck object\n}\n\npublic class MotorBike extends Vehicle{\n  //perform actions specific to a MotorBike Object\n}\n</code></pre>\n<blockquote>\n<p><code>Truck</code> class gets all the properties of the <code>Vehicle</code> class</p>\n</blockquote>\n<p>Importance of inheritance:</p>\n<ul>\n<li>Reuse of code</li>\n<li>Prevention of new bugs</li>\n<li>Reducing code size</li>\n<li>Code readability</li>\n</ul>\n<h2>Polymorphism</h2>\n<p>It means one name many forms. Polymorphism manifests itself by having multiple methods all with the same name, but slightly different functionality. It is further of two types:</p>\n<ul>\n<li><em>Static (or compile-time) polymorphism</em> is achieved using method overloading</li>\n<li><em>Dynamic(or runtime) polymorphism</em> using method overriding.</li>\n</ul>\n<h3>Static polymorphism (or compile-time)</h3>\n<p>A method having same name can have multiple implementations, depending upon the argument(s) passed to it. For example, there can be three methods called add(int x, int y), add(float x, float y) and add(String x,String y). The compiler decides at compile time which method will be called by looking at the signature of the called method.</p>\n<pre><code class=\"language-Java\">public class StaticPoly{\n  public static void main(String[] args){\n    int xInt = 5;\n    int yInt =4;\n    String xStr = \"5\";\n    String yStr = \"4\";\n    float xFloat = 5.0;\n    float yFloat = 4.0;\n\n    System.out.println(add(xInt, yInt)); //output 9\n    System.out.println(add(xFloat, yFloat)); // output 9.0\n    System.out.println(and add(xStr,yStr)); //output \"9\"\n  }\n\n  public static int add(int x, int y){\n    return x+y;\n  }\n  public static float add(float x, float y){\n    return x+y;\n  }\n  public static String add(String x,String y){\n    int result = Integer.parseInt(x) + Integer.parseInt(y);\n    return String.valueOf(result);\n  }\n}\n</code></pre>\n<blockquote>\n<p>Demonstration of static polymorphism or method overloading</p>\n</blockquote>\n<h3>Dynamic polymorphism</h3>\n<p>A subclass may override a superclass method for more specific behaviour. The decision of which method to call is made at runtime. The calling code may declare the object to be of parent type. At runtime, depending upon the actual type of the object, the correct method will be invoked. An example may be of open() method for superclass Document. The subclasses doc and xls both override open() method. But it may not be known beforehand which document will be opened. At runtime, depending upon the object on which open() is called, the correct Document object's open() method will be invoked.</p>\n<p>Method overriding allows a subclass to override a specific implementation of a method that is already provided by one of its super-classes.</p>\n<pre><code class=\"language-Java\">public class Complex\n{\n    private int real;\n    public int Real\n    private int imaginary;\n\n    public Complex(int real, int imaginary){\n        this.real = real;\n        this.imaginary = imaginary;\n    }\n    public int getReal(){\n      return real;\n    }\n\n    public int getImaginary(){\n      return imaginary;\n    }\n\n    public static Complex operator +(Complex c1, Complex c2){\n        return new Complex(c1.Real + c2.Real, c1.Imaginary + c2.Imaginary);\n    }\n\n    public override string ToString(){\n        return (String.Format(\"{0} + {1}i\", real, imaginary));\n    }\n}\n</code></pre>\n<blockquote>\n<p>This class has one overridden method named ToString, which overrides the default implementation of the standard ToString method to support the correct string conversion of a complex number.</p>\n</blockquote>\n<pre><code class=\"language-Java\">public class DyanamicPoly{\n  public static void main(String[] args){\n  Complex num1 = new Complex(5, 7);\n  Complex num2 = new Complex(3, 8);\n\n  // Add two Complex numbers using the overloaded plus operator\n  Complex sum = num1 + num2;\n\n  // Print the numbers and the sum using the overriden ToString method\n  System.out.println(\"({0}) + ({1}) = {2}\", num1, num2, sum);\n  }\n}\n</code></pre>\n<h1>Conclusion</h1>\n<p>A good objecto oriented software follows these principles to the letter. These principles make your code easier to read, understand and also are effective when it comes to debugging and upgrading. They also make your code smaller, as you end up writing less code.</p>"}},{"node":{"frontmatter":{"title":"Objective of Object Oriented Programming.","subtitle":"Objected oriented programming","excerpt":"Object Oriented Programming, or as is popularly known in the programming realm OOP is a style of programming that is organized around objects rather than actions.","path":"/tech/object-oriented-programming","date":"June 02, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"object-oriented-programming.png","thumbnail":"object-oriented-programming.png","teaser":"object-oriented-programming.png","credit":null,"creditlink":null},"tags":["OOP","Objects"]},"excerpt":"Object Oriented Programming, or as is popularly known in the programming realm OOP is a style of programming that is organized around…","timeToRead":9,"html":"<p>Object Oriented Programming, or as is popularly known in the programming realm OOP is a style of programming that is organized around objects rather than actions. It takes the view that what we really care about are the objects we want to manipulate rather than the logic required to manipulate them. It is a concept that has been widely adopted and is recommended for every software developer. It not only makes life easier for you as a developer but also aids other developers in collaborating easily with your project, as it is lighter as compared to precedural programming.</p>\n<p>There are a couple of definitions that I believe are important to understand before delving deeper into OOP. Definitions such as <em>object</em>, <em>classes</em>, <em>inheritance</em>, <em>interface</em> and <em>packages</em>.</p>\n<h2>Object</h2>\n<p>An <em>object</em> is a software bundle of related state and behaviour. They are often used to model real life objects you find in everyday life. They are key to understanding what OOP is all about. Objects are all around us, the trees, your radio, your phone, your pet dog (or cat). All these objects, despite their differences, have 2 things in common. They have <strong>state</strong> and <strong>behaviour</strong>. Your pet has state (name, color, breed) and behaviour (bark, run, wag tail). Your car also has state (current gear, current speed) and behaviour (changing gear, applying breaks, etc). Despite one being a living thing and the other a machine, they both share 2 important characteristics; the have state and behaviour. If you look keenly at these objects keenly, you will notice that they greatly vary in complexity and may find that some contain other objects. This is the center of Object Oriented Programming.</p>\n<p>Software objects are no different from the real world objects. They contain states (fields or variables in some programming languages) and behaviour (methods or functions in some programming languages). A software object stores its states in fields and shows its behaviour in methods.</p>\n<p><img src=\"https://docs.oracle.com/javase/tutorial/figures/java/concepts-object.gif\" alt=\"image\" title=\"Software Object Courtesy Of Java Documentation\"></p>\n<blockquote>\n<p>Data Encapsulation: Hiding internal state and requiring all interaction to be performed through an object's methods. Methods operate on an object's internal state and serve as the primary mechanism for object-to-object communication. This is a fundamental principle of object-oriented programming.</p>\n</blockquote>\n<p>Objects have a couple of advatages:</p>\n<ul>\n<li><em>Allows for code re-use</em>: If an object already exists due to it being created by another developer, you can easily plug it into your source code and use it.</li>\n<li><em>Modularity</em>: An objects source code can be written independently of the system, allowing it, once created, to be passed around inside the system.</li>\n<li><em>Objects allow information hiding</em>: By interacting with the objects methods, the internal process remain hidden.</li>\n<li><em>Plug and Play</em>: If a particular object is problematic to your code, you could simply remove it and use another. This allows you to debug your code easily.</li>\n</ul>\n<h2>Class</h2>\n<p>A class is a <em>blue print</em> from which all your objects are created. Take your car or bicycle for example. They are thousands of cars in existence, your car is one of them. Most contain the same nuts and bolts, engine capacity and gearbox. This means they were made from a similar blue print (a similar plan). Your car is said to be an <strong>instance</strong> of the class of objects known as cars. So, basically a car, is a group of related objects with similar states and behaviours.</p>\n<pre><code class=\"language-Java\">class Car {\n\n    int speed = 0;\n    int gear = 1;\n\n    void changeGear(int newValue) {\n         gear = newValue;\n    }\n\n    void speedUp(int increment) {\n         speed = speed + increment;\n    }\n\n    void applyBrakes(int decrement) {\n         speed = speed - decrement;\n    }\n\n    void printStates() {\n         System.out.println(\" speed:\" +\n             speed + \" gear:\" + gear);\n    }\n}\n</code></pre>\n<p>Above is a Car class that has the states and the behaviours of a car. The states are shown by the <code>int</code> variables speed and gear while the behaviours are shown by the <code>changeGear(int enwValue)</code>, <code>speedUp(int increment)</code>, <code>applyBrakes(int decrement)</code> and <code>printStates()</code> methods. These methods are how this class will interact with the <em>outside</em> world. For those of you familiar with Java programming, you may have noticed that this class lacks the main method. This is becase this is a blue print for all other car objects and not the main application.</p>\n<pre><code class=\"language-Java\">class CarDemo {\n    public static void main(String[] args) {\n\n        // Create two different Car objects\n        Car car1 = new Car();\n        Car car2 = new Car();\n\n        // Invoke methods on the newly created objects\n        car1.speedUp(15);\n        car1.changeGear(3);\n        car1.printStates();\n\n        car2.speedUp(10);\n        car2.changeGear(2);\n        car2.speedUp(10);\n        car2.changeGear(3);\n        car2.printStates();\n    }\n}\n</code></pre>\n<p>This is the main application that will test for newly created car objects. The output will be as below.</p>\n<pre><code class=\"language-Java\">speed:15 gear:3\nspeed:20 gear:3\n</code></pre>\n<p>As you can see the <code>car1</code> and <code>car2</code> objects have the same states and have the same behaviour. This is despite being owned by 2 different people, for example. They will move in the same manner and have the same states.</p>\n<h2>Concept of Inheritance</h2>\n<p>Inheritance, as the name suggests, is <em>inheriting</em> characeteriestics from the parent. Like a son having the same nose and hair as the father, or having the same eyes and lips as the mother. This is inheritance. The same applies to programming. The <code>Car</code> class created above is the <em>parent</em> and the <code>car1</code> and <code>car2</code> are the <em>children</em>. The objects inherit states and behaviours from the <code>Car</code> class. This is in lay man terms. The correct terms to use are <strong>superclass</strong> and <strong>subclass</strong>. The <code>Car</code> class is the <em>superclass</em> and the car objects are the <em>subclasses</em> and are thus able to inherit from the <code>Car</code> class behaviours such as <code>changeGear</code>.</p>\n<p>This does not mean that these are the only states and behaviours they could have. Take, the cars above. One could be a Mercedeze Benz and the other a Jeep Wrangler. They are both cars, but they are unique from each other. The Mercedeze Benz has 4 seats, while the Jeep has 2. The engine sizes are different and so are their top speeds and the terrain which they can handle. But, the bottom line, they are cars and <em>inherit</em> from the <code>Car</code> class. In Java, each class is alowed to have one superclass, while each superclass can have many subclasses.</p>\n<p>Below image shows the hierachy of bicycle class.</p>\n<p><img src=\"https://docs.oracle.com/javase/tutorial/figures/java/concepts-bikeHierarchy.gif\" alt=\"bicycle\" title=\"Bicycle Hierarchy\"></p>\n<p>To create a subclass in Java, simply <em>extend</em> the superclass and inherit its methods.</p>\n<pre><code class=\"language-Java\">class MercedezBenz extends Car{\n    //perform actions here\n    //new fields for the mercedez benz go here\n    //and inherited methods as well as specific ones to mercedez benz\n}\n</code></pre>\n<p>This gives MercedezBenz all the same fields and methods as Car class, yet allows its code to focus exclusively on the features that make it unique. Thus, differentiating it from the JeepWrangler class. This makes code for your subclasses neat and easy to read. Caution must be taken as to properly document state and behavior that each superclass defines.</p>\n<h2>Interface</h2>\n<p>Methods are the means in which objects interact with the world outside. Methods from the object <em>interface</em> with the world outside. The buttons on your phone, for example, act as interfaces between the cpu components and you. Allowing you to access the states and behaviour of the phone, states such as <em>off</em> and <em>on</em> or behaviour such as <em>calling</em> or <em>sending message</em>.</p>\n<p>An interface can be thought of as a group of related methods with empty bodies. If the Car class behaviour was to be described in an interface it would be as follows:</p>\n<pre><code class=\"language-Java\">interface CarBehaviour{\n\n    void changeGear(int newValue);\n\n    void speedUp(int increment);\n\n    void applyBrakes(int decrement);\n}\n</code></pre>\n<p>To implement the above interface with your class, you would have to <em>implement</em> the <code>CarBehaviour</code> interface like so</p>\n<pre><code class=\"language-Java\">class JeepWrangler implements CarBehaviour{\n    int speed = 0;\n    int gear = 1;\n\n    void changeGear(int newValue) {\n         gear = newValue;\n    }\n\n    void speedUp(int increment) {\n         speed = speed + increment;\n    }\n\n    void applyBrakes(int decrement) {\n         speed = speed - decrement;\n    }\n\n    void printStates() {\n         System.out.println(\"speed: \" +\n             speed + \" gear:\" + gear);\n    }\n}\n</code></pre>\n<blockquote>\n<p>Note that the compiler will require that methods <code>changeGear</code>, <code>speedUp</code>, and <code>applyBrakes</code> all be <em>implemented</em>. Compilation will fail if those methods are missing from this class.</p>\n</blockquote>\n<p>An interface allows a class to become more formal about its behavior. Interfaces form a sort of contract between the class and the outside world. This contract is enforced at build time by the compiler. If your class claims to implement an interface, all methods defined by that interface must appear in its source code before the class will successfully compile.</p>\n<h2>Different Languages Same Objects</h2>\n<p>Objects can be created in many ways, this mostly depends on the programming language used. In Java, for example,</p>\n<pre><code class=\"language-Java\">//className objectToCreate = new className();\nCar mercedezBenz = new Car();\n</code></pre>\n<p>The <code>new</code> word is a keyword, which means it is reserved in Java for specifically creating objects. Therefore it can not be used as a variable name.</p>\n<p>in JavaScript, creation of an object can be as follows:</p>\n<pre><code class=\"language-JavaScript\">function fnName1(value1,value2){\n    this.value1 = value1;\n    this.value2 = value2;\n    }\n//alternatively\nvar fnName2 = new Object{};\nfnName2.[\"value1\"] = value1;\nfnName2.value2 = value2;\n</code></pre>\n<blockquote>\n<p>The first part is creation of an object using a custom constructor, while the alternative is using an object constructor in which values can be added using either dot notation or bracket notation</p>\n</blockquote>\n<p>To access methods and instance variables, one uses the <strong>dot operator</strong> (.) to access a method or variable that lies in a newly created object.</p>\n<p>It is always good practice to <strong>encapsulate</strong> your class. This protects your code and prevents editing of your variables. Instead these fields of variables should be accessed through <em>getter</em> and <em>setter</em> methods.</p>\n<p>Take the example below:</p>\n<pre><code class=\"language-JavaScript\">class Car{\n    var engine,gasTank,gas,door;\n\n    function driveForward(howFar){}\n    function reverse(howFar){}\n    function stop(){}\n    function openDoor(){}\n\n    //getters and setters\n    function getGas(){\n        return gas;\n    }\n\n    function getGasTank(){\n        return gasTank;\n    }\n\n    function setGas(gas){\n        this.gas = gas;\n    }\n\n    function setGasTank(gasTank){\n        this.gasTank = gasTank;\n    }\n}\n</code></pre>\n<blockquote>\n<p>The above class has getters and setters. The fields <code>engine</code>, <code>gas</code>, <code>gasTank</code> and <code>door</code> can not be accessed outside this class without the getters and setters</p>\n</blockquote>\n<p>To access these fields you need to call the function such as <code>getGasTank()</code> which will return the value of field <code>gasTank</code>. This makes sure that your fields remain secure and can only be edited from inside the class and not outside.</p>\n<h2>Method Overload!</h2>\n<p>It is possible in OOP to create methods that accept any type of variable, such as double, integer,String and return the same intended result. This is known as <em>overloading of methods</em>. It makes it easy to use just one function name that accepts any variable type, but performs the same function. Like taking int two integers, such as 4 and 5 and returning the sum. Now, what if the user enters 4 and 5 as strings? The intended purpose is to still return the same result of 9 regardless of the variable type. This is where method overloading comes in handy.</p>\n<ul>\n<li>First create multiple methods with the same name</li>\n<li>Make sure that each created method has a different return type, number of arguments or type of arguments</li>\n</ul>\n<p>Languages such as <a href=\"www.w3schools.com/js\" title=\"More information on JavaScript\">JavaScript</a> do not allow overloading, because they do not assign variable types to variables when they are created. Languages such as <a href=\"https://en.wikipedia.org/wiki/Java_(programming_language)\" title=\"More info on Java\">Java</a> allow overloading.</p>\n<pre><code class=\"language-Java\">public int addNumbers(int a, int b){\n    return a+b;\n}\n\npublic String addNumbers(String a,String b){\n    int result = Integer.parseInt(a) + Integer.parseInt(b);\n    return String.valueOf(result);\n}\n</code></pre>\n<blockquote>\n<p>The above methods have the same name, but accept different types of arguments. The first one accepts 2 integers and returns their sum. The second one accepts 2 strings, converts them to integers and sums them and returns the string literal of the integer.</p>\n</blockquote>\n<p>The above functions perform the same function, but accept and return different variable types. This is an example of overloading methods.</p>\n<h2>Conclusion</h2>\n<p>There is so much more to OOP, these are just some of the basics. These basics will get you started to creating software that uses and utilizes the power of OOP. It will make writing code that much easier.\nIn conclusion, Objective of Object Oriented Programming si to make creation of software easy and fluid.</p>"}}]}},"pageContext":{}}}