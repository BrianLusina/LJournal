{"componentChunkName":"component---src-templates-blogs-blog-post-jsx","path":"/tech/access-modifiers","result":{"data":{"markdownRemark":{"html":"<p>This topic will simply <em>extend</em> from the <a href=\"https://brianlusina.github.io/Object-Oriented-Programming/\">Objective of OOP</a> and <a href=\"https://brianlusina.github.io/Principles-Of-Oop/\">4 principles of OOP</a> and will majorly focus only on accessors and modifiers, i.e. <em>getters</em> and <em>setters</em>.</p>\n<p>Accessors are methods used in Object Oriented Programming to enable <em>access</em> to a class fields which may be private. In most cases it is advisable to make these fields private and allow allow access to them from the accessors and modifier methods. The accessor methods, or <em>getter</em> methods as they are most commonly known as, are only used to <strong>access</strong> or <em>get</em> the fields/states of a particular object. Modifiers or <em>setters</em> allow the modification or <em>setting</em> of the fields of a particular object.</p>\n<p>These are used in encapsulation and allow data hiding which makes code more secure and also reduces the amount of code written, which is what every developer seeks, to make code cleaner, smaller, but still maintain the overall functionality and readability.</p>\n<p>A simple example of a Car class will be used. A Car is a super class of every car type in the world. This Car class will contain all the fields/states and behaviours/methods of all the car types in the world.</p>\n<p>This is the code for writing a super class Car in Java:</p>\n<pre><code class=\"language-Java\">public class Car {\n    private int wheels;\n    private int engineCapacity;\n    private int seats;\n    private String name;\n\n    /**Constructor for the Car class*/\n    public Car(int wheels, int engineCapacity, int seats, String name){\n        this.wheels = wheels;\n        this.engineCapacity = engineCapacity;\n        this.seats = seats;\n        this.name = name;\n    }\n\n    /**ACCESSORS AND MODIFIERS getters and setters*/\n\n    /*get and set wheels*/\n    public int getWheels(){\n        return wheels;\n    }\n\n    public void setWheels(int wheels){\n        this.wheels = wheels;\n    }\n\n    /*set and get the engine capacity*/\n    public int getEngineCapacity(){\n        return engineCapacity;\n    }\n\n    public void setEngineCapacity(int engineCapacity){\n        this.engineCapacity = engineCapacity;\n    }\n\n    /*getters and setters for the seats*/\n    public int getSeats(){\n        return seats;\n    }\n\n    public void setSeats(int seats){\n        this.seats = seats;\n    }\n\n    /*get and set the name*/\n    public String getName(){\n        return name;\n    }\n\n    public void setName(String name){\n        this.name = name;\n    }\n\n}\n</code></pre>\n<blockquote>\n<p>This is a car class with a constructor to define its objects on creation the getters and setters have been defined to allow the object's fields or states to be modified by the instance.</p>\n</blockquote>\n<p>The usual convention for writing getters is by writing the word <strong>get</strong> and followed by the name of the field to access. So, in this case, to acces the <code>seats</code> field, the function created is <code>getSeats()</code>. This getter <strong>MUST</strong> return the data type of the same field it wants to access. So, in the case of seats, it must return and <code>int</code> data type as the <code>seats</code> variable is an integer type.\nIt is important to note that getter methods do not take any arguments.</p>\n<p>Setters are a bit different. To create a setter function, the same method as declaring a get method is applied. Use of the word <strong>set</strong> followed by the name of the variable. An example would be <code>setName</code>. This naming follows the camel casing convention for naming variables. The setter methods <strong>DO NOT</strong> return any value and thus the <em>void</em> is used, which means: <em>does not return any value</em>. This does not return a particular value as it's job is to set a particular value. In this case, <code>setName(String name)</code> takes in a String argument and modifies the current name field (or re-assigns the name variable) with the input in the <code>setName</code> method. The setter methods must take arguments as they are, after all, supposed to modify the current field to a new state.</p>\n<p>All this is made possible because the variables have been declared <code>private</code>. This restricts access, therefore the need for use of getters and setters.</p>\n<h2>Sample usage of accessors and modifiers</h2>\n<p>Below is a sample usage of getters and setters from the Car's class defined above:</p>\n<pre><code class=\"language-Java\">public class CarTest {\n    public static void main(String[] args){\n        Car merc = new Car(4, 3500, 5, \"Mercedez Benz\");\n        Car toyota = new Car(4, 1200, 5, \"Allion\");\n\n        /*The getters allows the private variables to be accessed from the constructor*/\n        System.out.printf(\"This is a %s with %d wheels, %d seats and an engine capacity of\n        %d CC \\n\", toyota.getName(), toyota.getWheels(), toyota.getSeats(),toyota.getEngineCapacity());\n\n//output is This is a Allion with 4 wheels, 5 seats and an engine capacity of 1200\n\n        System.out.printf(\"This is a %s with %d wheels, %d seats and an engine capacity of\n        %d CC \\n\", merc.getName(), merc.getWheels(), merc.getSeats(),merc.getEngineCapacity());\n        //output is This is a Mercedez Benz with 4 wheels, 5 seats and an engine capacity of 3500 CC\n\n        /*the setters modify the states or fields of the object*/\n        merc.setName(\"Mercedes SLS\");\n        merc.setEngineCapacity(4500);\n        merc.setWheels(4);\n        merc.setSeats(2);\n\n        /*these have been modified from the previous states to the current states as described below*/\n        System.out.printf(\"This is a %s with %d wheels, %d seats and an engine capacity of\n        %d CC \\n\", merc.getName(), merc.getWheels(), merc.getSeats(),merc.getEngineCapacity());\n        //output is This is a Mercedes SLS with 4 wheels, 2 seats and an engine capacity of 4500 CC\n\n        //below lines modify the toyota object\n        toyota.setName(\"Toyota Celica\");\n        toyota.setEngineCapacity(2500);\n        toyota.setWheels(4);\n        toyota.setSeats(2);\n\n        /*these have been modified from the previous states to the current states as described below*/\n        System.out.printf(\"This is a %s with %d wheels, %d seats and an engine capacity of %d CC\", toyota.getName(), toyota.getWheels(), toyota.getSeats(),toyota.getEngineCapacity());\n        //output is: This is a Toyota Celica with 4 wheels, 2 seats and an engine capacity of 2500 CC\n\n    }\n}\n</code></pre>\n<p>The <code>merc</code> and <code>toyota</code> objects are instances of the Car class, thus they inherit all the characteristics(fields and methods of the parent class) of Car class. This allows them access to the variables such as <code>seats</code>, <code>engineCapacity</code> and <code>name</code>, just ot mention a few. Note, however, that these variables can only be accessed from the getters and setters</p>\n<p>The getters allow access to the various fields that have been set in the constructor. a method such as <code>merc.getName()</code> returns <em>Mercedez Benz</em>, while <code>toyota.getName()</code> returns <em>Allion</em>. These are the fields set in the constructor. using <code>merc.name</code> will return an error.</p>\n<p>To rename these fields the setters have been used. A method call such as <code>merc.setEngineCapacity(4500)</code> will change the <code>engineCapacity</code> from 3500 to 4500. This is modifying. The same applies to <code>toyota.setSeats(2)</code>.</p>\n<p>This is a basic example and is mostly used to restrict access to a class' states and behaviour to the outside world thus increasing security of the code used.</p>\n<p>Sample code can be found here <a href=\"https://github.com/BrianLusina/Java-Playground/blob/master/Toy%20Problems/src/DataStructures/OOP/Car.java\">Car Class</a> and <a href=\"https://github.com/BrianLusina/Java-Playground/blob/master/Toy%20Problems/src/DataStructures/OOP/CarTest.java\">CarTest class</a>.</p>","frontmatter":{"title":"Accessors and Modifiers","subtitle":"subtle introduction to getters and setters","date":"July, 05, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":null,"thumbnail":null,"teaser":null,"credit":null,"creditlink":null},"path":"/tech/access-modifiers","tags":["OOP","getters and setters","accessors","modifiers"],"excerpt":null}}},"pageContext":{"prev":{"html":"<p>This post is a demonstration of the difference between post increment and pre increment of variables in Java. Post increment is usually denoted as <code>x++</code>, where the x is the variable in question, usually an integer, double or float. While pre-increment is addition denoted as <code>++x</code>.</p>\n<h1>Pre-increment</h1>\n<p>As the terms suggests, <em>PRE-increment</em> is the addition of a particular value before it is used. It is normally used when you want to use the incremented value of that particular variable. When the program encounters a pre-increment it increases the value of that variable in the memory then loads the expression.</p>\n<p>A simple demonstration:</p>\n<pre><code class=\"language-java\">public class PostAndPre {\n    public static void main(String[] args){\n        int x = 0;\n        for(int i = 0; i &#x3C; 10; i++){\n            System.out.printf(\"%d\\n\", ++x);\n            /*Output:\n            1 2 3 4 5 6 7 8 9 10 */\n        }\n    }\n}\n</code></pre>\n<blockquote>\n<p>Demo of pre-increment</p>\n</blockquote>\n<p>The above variable <code>x</code> is instantiated as 0. The program encounters the variable <code>x</code> and increases the value by 1 before output of the result.</p>\n<p>This is equivalent to:</p>\n<pre><code class=\"language-Java\">        x = x + 1;\n        int y = x;\n        System.out.printf(\"%d\", y);\n</code></pre>\n<h1>Post-increment</h1>\n<p>The <em>post increment</em> uses the variable before increasing it. So in the case of <code>x++</code>, the variable will be 0, and will be used as is before it will be increased. This loads the value of that variable in memory, increases the variable and then continues reading the expression.</p>\n<pre><code class=\"language-java\">        int l = 0;\n        for(int i = 0; i &#x3C; 10; i++){\n            System.out.printf(\"%d \\t\", l++);\n            //output 0  1   2   3   4   5   6   7   8   9\n        }\n</code></pre>\n<blockquote>\n<p>Demo of post increment</p>\n</blockquote>\n<p>The above variable <code>l</code> is instantiated as 0 and will be output as 0, before the variable is increased.</p>\n<p>Code snippet can be found <a href=\"https://github.com/BrianLusina/Java-Playground/blob/master/Toy%20Problems/src/PostAndPre/PostAndPre.java\">here</a>.</p>","id":"67a4682f-f64b-5fd2-93e5-0b4dad47ab91","timeToRead":1,"frontmatter":{"title":"Difference between Post increment and pre increment of a variable","subtitle":"x++ and ++x","excerpt":"This post is a demonstration of the difference between post increment and pre increment of variables in Java. Post increment is usually denoted as `x++`, where the x is the variable in question, usually an integer, double or float. While pre-increment is addition denoted as `++x`.","path":"/tech/postadd-preadd","category":"tech","date":"July 06, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":null,"thumbnail":null,"teaser":null,"credit":null,"creditlink":null},"tags":["Post-increment","pre-increment"],"published":true}},"next":{"html":"<p>The very first time I encountered Git, I was confused, I did not understand anything about it. Racked my head constantly trying to figure out what it was all about. Frankly, I was getting frustrated. I simply thought it was one of those cloud backups. So, I questioned what everyone was saying about Distributed Version Control System. Did not quite grasp the concept, until finally it started making sense when I went over a tutorial and read some books and started using it. It finally meant sense, A door was opened in my mind, which unlocked tons of other ones.</p>\n<p>Admittedly, I am still learning as I interact with it and I am enjoying as I go along.</p>\n<h2>What is Git and why should you git it?</h2>\n<p>Many questions have been raised as to what git is(Maybe, not so many), but still it is worth mentioning. Git is a <a href=\"https://en.wikipedia.org/wiki/Distributed_version_contro\" title=\"More about DVCS\">Distributed Version Control System</a> (DVCS)that allows developers share their work on a platform and also make changes to it thus collaborate more effectively.</p>\n<p>One may ask <em>\"Why not just use a cloud system like Dropbox, OneDrive or Google Drive?\"</em>. One, may use these cloud platforms, but it makes work a bit difficult in the long run. I shall explain why, but first, version control, what is it and why should you care?</p>\n<h2>Version Control System(VCS)</h2>\n<p>This is a system that records changes to a file or set of files over time so that you can recall specific versions later. Ideally, you can do this with any type of file in your computer and needless to say, it makes collaborating on projects even easier. This is considering that you may not be able to meet up with your team all the time physicall. This makes version control a inique and powerful tool.</p>\n<p>You could use <a href=\"https://www.google.com/drive/\">Google Drive</a> or <a href=\"https://www.dropbox.com/\">Dropbox</a> to save your files, but you will not be able to store specific versions of your files over time. Even if you label each file differently, say filenameV1.txt or filenameV2.txt. This will mean you will have tons of files just for one project and therefore it will make it difficult when it comes back to revert back to files from a previous state. Also, it will mean having tons and tons of folders each a different version for a single project. This is bad practice and also it will become bulky in the future.</p>\n<p>With VCS, you can:</p>\n<ul>\n<li>revert back to previous files easily, revert even an entire project,</li>\n<li>compare changes you have made over time on a single project. This allows you to make notes and possibly, see where you went wrong or right on a particular change</li>\n<li>See who last modified something that was causing a problem, that is if you are working with someone on a particular project.</li>\n<li>In the event you do lose your files and projects locally, you can easily recover them and continue with your work, sure, you can do this with any cloud platform, but it will cost you much less when it comes to VCS.</li>\n</ul>\n<p>There are three types of VCS:</p>\n<ol>\n<li>\n<p><strong>Local Version Control System</strong>, which is basically storing files locally on your machine. With LVCS, there is a system in place which means you store your files using a <em>time-stamp</em> on each directory your own, creating your own version control. This however can lead to many errors. Such as over-writing files you did not intend to over-write, or losing all of them in the event of a system crush.\n<img src=\"https://git-scm.com/book/en/v2/book/01-introduction/images/local.png\" alt=\"lvcsimage\"></p>\n<blockquote>\n<p>image showing files being versioned on a local computer</p>\n</blockquote>\n</li>\n<li>\n<p><strong>Centralized Version Control System</strong> is a centralized control system which allows collaborators and developers to work on a project that is stored in a central database. This is far much better than LCVS, as you can store your projects online and be able to properly version your work and view changes made by other developers. The downside is when the database crushes, so does the project, unless it was backed up elsewhere. This is damaging considering that their is a central point of failure.<a href=\"https://subversion.apache.org/\">Subversion</a> and <a href=\"https://www.perforce.com/\">Perforce</a> are examples of CVCS.\n<img src=\"https://git-scm.com/book/en/v2/book/01-introduction/images/centralized.png\" alt=\"cvcsimage\"></p>\n<blockquote>\n<p>image showing the working of a CVCS</p>\n</blockquote>\n</li>\n<li><strong>Distributed Version Control System</strong> is the best to use as clients don’t just check out the latest snapshot of the files: they fully mirror the repository. Thus if any server dies, and these systems were collaborating via it, any of the client repositories can be copied back up to the server to restore it. Every clone is really a full backup of all the data. In addition, many of these systems deal really well with having several remote repositories they can work with. This allows for collaboration with different groups of people in different ways simultaneously within the same project. This allows you to set up several types of workflows that aren’t possible in centralized systems. Examples of such systems are <a href=\"https://www.mercurial-scm.org/\">Mercurial</a> <a href=\"https://git-scm.com/\">Git</a>, <a href=\"darcs.net/\">Darcs</a> and <a href=\"bazaar.canonical.com/\">Bazaar</a></li>\n</ol>\n<p><img src=\"https://git-scm.com/book/en/v2/book/01-introduction/images/distributed.png\" alt=\"dvcsimage\"></p>\n<blockquote>\n<p>DVCS at work</p>\n</blockquote>\n<p>There is a lot more documentation online on Version Control Systems and <a href=\"https://git-scm.com/\">git</a> and there are very well documented too, I suggest getting in on this, especially if you are a developer just starting out and want to be able to properly store your work and collaborate with other developers.</p>\n<p>Get git now!</p>","id":"d5b91efd-5974-5b78-bbb9-5ea3617530a1","timeToRead":4,"frontmatter":{"title":"Version Control and Git","subtitle":"Version control and git control","excerpt":"Version control and its subtle benefits","path":"/tech/git-control","category":"tech","date":"June 25, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"version-contol-system.png","thumbnail":"version-contol-system.png","teaser":"version-contol-system.png","credit":null,"creditlink":null},"tags":["git","version control","VCS","versioning"],"published":true}}}}}