{"componentChunkName":"component---src-templates-blogs-blog-post-jsx","path":"/tech/serializable-parcelable","result":{"data":{"markdownRemark":{"html":"<p>When creating Plain Old Java Objects (POJOs) in eith Android or Java, more specifically Java, the aim is to be able to <em>model</em> our data in a certain way. To enable easier addition to an Adapter or a database, even easier retrieval from a database using <strong>Jackson</strong> library (what Firebase uses to be able to store and retrieve data).</p>\n<p>It is best practice to model data in a specific way using POJO as it allows cleaner code and one also can be able to determine what exactly one object will contain. Say you are storing Employee data. An employee will obviously have data such as <em>name</em>, <em>phone</em> and <em>address</em>. These should be modelled to enable proper structure of each record we will be retrieving from an API (if creating for Android).</p>\n<p>Normally, typically, the model will look like this:</p>\n<pre><code class=\"language-java\">    public class Employee{\n        private String name;\n        private int phone;\n        private ArrayList&#x3C;String> address;\n\n        public Employee(String name, int phone, ArrayList&#x3C;String> address) {\n            this.name = name;\n            this.phone = phone;\n            this.address = address;\n        }\n\n        public ArrayList&#x3C;String> getAddress() {\n            if (!(address == null))\n                return address;\n            else\n                return new ArrayList&#x3C;String>();\n        }\n\n        public String getName() {\n            return name;\n        }\n\n        public String getAge() {\n            return age;\n        }\n    }\n</code></pre>\n<blockquote>\n<p>This is a typical POJO with <em>fields</em>, a <em>constructor</em> and <em>access methods</em>.</p>\n</blockquote>\n<p>In Android we know that we cannot just pass objects to activities. The objects must be either implements of <strong>Serializable</strong> or <strong>Parcelable</strong> interface to do this. This is where the problem with this class comes in. When trying to pass this object to any other activity it will pose a bit of a problem, of course there a work-arounds, but why stress yourself? KISS.</p>\n<h2>Enter Serializable and Parcelable</h2>\n<p>They both do what you expect them to do. They have similarities, but are not entirely the same.</p>\n<p><em>Serializable</em> is a standard <strong>Java</strong> interface. You simply mark a class Serializable by implementing the interface, and Java will automatically serialize it in certain situations.</p>\n<p><em>Parcelable</em> is an <strong>Android</strong> specific interface where you implement the serialization yourself. It was created to be far more efficient than Serializable, and to get around some problems with the default Java serialization scheme.</p>\n<h3>Serializable</h3>\n<p>As afformentioned serializable is a standard Java interface. You can just implement Serializable interface and add override methods.The problem with this approach is that <strong>reflection</strong> is used and it is a slow process. This method creates a lot of temporary objects and cause quite a bit of garbage collection. However, a serializable interface is easier to implement.</p>\n<pre><code class=\"language-java\">    public class Employee extends Serializable{\n        private String name;\n        private int phone;\n        private ArrayList&#x3C;String> address;\n\n        public Employee(String name, int phone, ArrayList&#x3C;String> address) {\n            super();\n            this.name = name;\n            this.phone = phone;\n            this.address = address;\n        }\n\n        public ArrayList&#x3C;String> getAddress() {\n            if (!(address == null))\n                return address;\n            else\n                return new ArrayList&#x3C;String>();\n        }\n\n        public String getName() {\n            return name;\n        }\n\n        public String getAge() {\n            return age;\n        }\n    }\n</code></pre>\n<blockquote>\n<p>Same implementation of Employee Object with the only differnce being its implementation. Notice the <code>super()</code> in the constructor.</p>\n</blockquote>\n<p>Say you have initialized Employee objects like so:</p>\n<pre><code class=\"language-java\">//Employee instance\nEmployee mEmployee = new Employee(\"name\",12345679,\"Address array here\");\n\n//Passing MyObjects instance via intent\nIntent mIntent = new Intent(FromActivity.this, ToActivity.class);\nmIntent.putExtra(\"UniqueKey\", mEmployee);\nstartActivity(mIntent);\n</code></pre>\n<blockquote>\n<p>This creates an instance of the Employee object, adds it to an intent and starts the next activity.</p>\n</blockquote>\n<p>In another class, we obtain the object.</p>\n<pre><code class=\"language-java\">Intent mIntent = getIntent();\nEmployee mEmployee = (Employee) mIntent.getSerializableExtra(\"UniqueKey\");\n</code></pre>\n<blockquote>\n<p>This obtains the object from the intent and casts it to Employee object.\nAllowing you to do as you please in the next activity with the obtain object.</p>\n</blockquote>\n<h3>Parcelable</h3>\n<p>Parcelable process is much faster than serializable. One of the reasons for this is that we are being explicit about the serialization process instead of using reflection to infer it. It also stands to reason that the code has been heavily optimized for this purpose.</p>\n<p>Using the same Employee class but implementing the Parcelable interface.</p>\n<pre><code class=\"language-java\">    import java.util.ArrayList;\n    import android.os.Parcel;\n    import android.os.Parcelable;\n\n    public class Employee extends Parcelable{\n        private String name;\n        private int phone;\n        private ArrayList&#x3C;String> address;\n\n        public Employee(String name, int phone, ArrayList&#x3C;String> address) {\n            this.name = name;\n            this.phone = phone;\n            this.address = address;\n        }\n\n        public Employee(Parcel source){\n            phone = source.readInt();\n            name = source.readString();\n            address = source.createStringArrayList();\n        }\n\n        @Override\n        public int describeContents() {\n            return 0;\n        }\n\n        @Override\n        public void writeToParcel(Parcel dest, int flags) {\n            dest.writeInt(phone);\n            dest.writeString(name);\n            dest.writeStringList(address);\n        }\n\n        public static final Creator&#x3C;Employee> CREATOR = new Creator&#x3C;Employee>() {\n\n        @Override\n        public Employee[] newArray(int size) {\n            return new Employee[size];\n        }\n\n        @Override\n        public Employee createFromParcel(Parcel source) {\n            return new Employee(source);\n        }\n        };\n\n        public ArrayList&#x3C;String> getAddress() {\n            if (!(address == null))\n                return address;\n            else\n                return new ArrayList&#x3C;String>();\n        }\n\n        public String getName() {\n            return name;\n        }\n\n        public String getAge() {\n            return age;\n        }\n    }\n</code></pre>\n<p>Using the same process of creating an instance of the <code>Employee</code> Object and passing it to an intent.</p>\n<pre><code class=\"language-java\">    Employee employee = new Employee(\"name\",\"age\",\"Address array here\");\n\n    //Passing MyOjects instance\n    Intent mIntent = new Intent(FromActivity.this, ToActivity.class);\n    mIntent.putExtra(\"UniqueKey\", employee);\n    startActivity(mIntent);\n\n    //Getting MyObjects instance in another activity\n    Intent mIntent = getIntent();\n    Employee workorder = (Employee) mIntent.getParcelable(\"UniqueKey\");\n\n    //You can pass Arraylist of Parceble obect as below\n    //Array of MyObjects\n    ArrayList&#x3C;Employee> mEmployees;\n\n    //Passing Employee instance\n    Intent mIntent = new Intent(FromActivity.this, ToActivity.class);\n    mIntent.putParcelableArrayListExtra(\"UniqueKey\", mEmployees);\n    startActivity(mIntent);\n\n    // in another activity\n    //Getting Employee instance\n    Intent mIntent = getIntent();\n    ArrayList&#x3C;Employee> mEmployees = mIntent.getParcelableArrayList(\"UniqueKey\");\n</code></pre>\n<h2>In Conclusion</h2>\n<ol>\n<li>Parcelable is faster than serializable interface</li>\n<li>Parcelable interface takes more time for implemetation compared to serializable interface</li>\n<li>serializable interface is easier to implement</li>\n<li>serializable interface create a lot of temporary objects and cause quite a bit of garbage collection</li>\n<li>Parcelable array can be pass via Intent in android</li>\n</ol>\n<p>These are just some of the differences between the two interfaces and of course there is not standard way, however it is always good to have the option of switching between the two.</p>","frontmatter":{"title":"Serializable and Parcelable","subtitle":"Difference between Serializable Java interface and Android Parcelable interface","date":"September, 24, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"parcelable_vs_serializable.jpg","thumbnail":"parcelable_vs_serializable.jpg","teaser":"parcelable_vs_serializable.jpg","credit":null,"creditlink":null},"path":"/tech/serializable-parcelable","tags":["Android","Serializable","Parcelable"],"excerpt":"When creating Plain Old Java Objects (POJOs) in eith Android or Java, more specifically Java, the aim is to be able to _model_ our data in a certain way. To enable easier addition to an Adapter or a database, even easier retrieval from a database using **Jackson** library (what Firebase uses to be able to store and retrieve data)."}}},"pageContext":{"prev":{"html":"<p>Android component is simply a piece of code that has a well defined life cycle. e.g. Activity, Reciever, Service. The core building blocks or fundamental components of Android are:</p>\n<ol>\n<li>Receivers</li>\n<li>Activities</li>\n<li>Views</li>\n<li>Intents</li>\n<li>Services</li>\n<li>Content Providers</li>\n<li>Fragments</li>\n<li>AndroidManifest.xml</li>\n</ol>\n<h2>Activity</h2>\n<p>This is simply a class that represents a single screen. They dictate the UI and handle user interaction to the smart phone screen.</p>\n<h2>Services</h2>\n<p>Background process that can run for a long time. They are of 2 types:</p>\n<ul>\n<li><strong>Local service</strong>: accessed from within the application.</li>\n<li>**Remote service **: accessed remotely from other applications running on the same device.</li>\n</ul>\n<p>A service might play music in the background while the user is in a different application, or it might fetch data over the network without blocking user interaction with an activity. A service is implemented as a subclass of <code>Service</code> class.</p>\n<h2>Broadcast Recievers</h2>\n<p>They handle communication between Android OS and applications. They simply respond to broadcast messages from other applications or from the system. For example, apps can initiate broadcasts to let other applications know that some data has been downloaded to the device and is available for them to use, so this is broadcast receiver which will intercept this communication and will initiate appropriate action.</p>\n<p>A broadcast receiver is implemented as a subclass of <code>BroadcastReceiver</code> class and each message is broadcaster as an <code>Intent</code> object.</p>\n<pre><code class=\"language-java\">    public class MyReciever extends BroadcastReceiver{\n        public void onReceive(context,intent){\n\n        }\n    }\n</code></pre>\n<h2>Content Provider</h2>\n<p>Content Providers provide content to applications by encapsulating data and provide it to applications through a single ContentResolver interface.\nThey are required if you need to share data between multiple applications, e.g. contacts data is used by multile applications and mist be stored in a content provider.</p>\n<h2>View</h2>\n<p>A view is the UI element such as button, lable, Text field, Image.</p>\n<h2>Intent</h2>\n<p>Used to invoke components. It is mainly used to:</p>\n<ul>\n<li>Start a service</li>\n<li>Launch an activity</li>\n<li>Display a web page</li>\n<li>Display a list of contacts</li>\n<li>Broadcast a message</li>\n<li>Dial a phone</li>\n</ul>\n<p>Basically they are messages wiring components together.</p>\n<h2>Fragment</h2>\n<p>These are like part of an Activity. An activity can display one or more fragments on the screen at the same time.</p>\n<h2>AndroidManifest.xml</h2>\n<p>Contains information about activites, content providers, permissions. It is the configuration file for the application.</p>\n<h2>Resources</h2>\n<p>External elements such as strings, constants and drawable pictures.</p>","id":"a6836208-9627-5e83-a886-07b5410227ab","timeToRead":2,"frontmatter":{"title":"Android Building Blocks","subtitle":"Android components and building Blocks","excerpt":"Android component is simply a piece of code that has a well defined life cycle. e.g. Activity, Reciever, Service. The core building blocks or fundamental components of Android","path":"/tech/building-blocks-android","category":"tech","date":"September 25, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"android-core-building-blocks.png","thumbnail":"android-core-building-blocks.png","teaser":"android-core-building-blocks.png","credit":null,"creditlink":null},"tags":["Android","Serializable","Parcelable"],"published":true}},"next":{"html":"<p>The Vigenere cipher is likely the the most secure ciphers out there. It builds on the principle of the Caesar cipher yet provides a decent way to avoid the easy to solve shift problems. The basic gist of this cipher is we have both a message and a key. The key can be any length, but you must repeat the key for the length of our message to get this to work. This can be seen here:</p>\n<pre><code class=\"language-plain\">alpha = ABCDEFGHIJKLMNOPQRSTUVWXYZ\nmessage  = IAMTHEWALRUS\nkey  = HELLOHELLOHE\n</code></pre>\n<p>Our key is actually \"HELLO\", but we expanded it to the length of our message giving us the repeated nature we see. Once we have these defined, we go character by character performing a pseudo-Caesar cipher.</p>\n<pre><code class=\"language-plain\">m1 = I = 9\nk1 = H = 8\n9 + 8 = 17 % 26 = 17 = Q\nc1 = Q\n</code></pre>\n<p>Looking at this, we see that the first character of our message is \"I\" which is the ninth letter in the alphabet. We then look at the first character of the key which is \"H\" or the eighth letter in the alphabet. We add those two numbers and modulo 26 giving us 17 which points to the seventeenth letter in the alphabet: \"Q\". We now know that the first letter of our ciphertext is \"Q\".</p>\n<p>We then repeat this method for each character in our message until we have the ciphertext. This can be better shown as the algorithm:</p>\n<p>Let m be our message and k be our key:\nE(m) = ((m1 + k1) % 26, (m2 + k2) % 26, ..., (mi + ki) % 26)\nD(m) = ((c1 - k1) % 26, (c2 - k2) % 26, ..., (ci - ki) % 26)\nThis is much like the Caesar cipher except instead of defining a fixed rotation, we allow our key's character index to be the rotation. As you can see, this is why the Vigenere cipher can be considered a string of Caesar ciphers. Pretty cool when you actually see it.</p>\n<p>So how do we attack this then?</p>\n<p>Well, the problem with this cipher is the fact that the key repeats itself. When you have a repeating key, it's common to see patterns in the ciphertext that completely match each other. By recognizing those patterns, you can determine the block size of the key and from there you simply do a Caesar brute force shift on each block until the plaintext appears.</p>\n<p>On relatively short messages, this is harder to crack (as with any short ciphertext) but if encrypting a uniformly distributed text then you can really start to pick up on these things.</p>\n<p>Now let's code this up in Python and see how how we can automate this:</p>\n<pre><code class=\"language-python\">from itertools import cycle\n\nALPHA = 'abcdefghijklmnopqrstuvwxyz'\n\n\ndef encrypt(key, plaintext):\n    \"\"\"Encrypt the string and return the ciphertext\"\"\"\n    pairs = zip(plaintext, cycle(key))\n    result = ''\n\n    for pair in pairs:\n        total = reduce(lambda x, y: ALPHA.index(x) + ALPHA.index(y), pair)\n        result += ALPHA[total % 26]\n\n    return result.lower()\n\n\ndef decrypt(key, ciphertext):\n    \"\"\"Decrypt the string and return the plaintext\"\"\"\n    pairs = zip(ciphertext, cycle(key))\n    result = ''\n\n    for pair in pairs:\n        total = reduce(lambda x, y: ALPHA.index(x) - ALPHA.index(y), pair)\n        result += ALPHA[total % 26]\n\n    return result\n\n\ndef show_result(plaintext, key):\n    \"\"\"Generate a resulting cipher with elements shown\"\"\"\n    encrypted = encrypt(key, plaintext)\n    decrypted = decrypt(key, encrypted)\n\n    print 'Key: %s' % key\n    print 'Plaintext: %s' % plaintext\n    print 'Encrytped: %s' % encrypted\n    print 'Decrytped: %s' % decrypted\n</code></pre>\n<h2>Step One</h2>\n<p>Import the <code>cycle()</code> function from the <code>itertools</code> library.</p>\n<p>Define our alphabet in order to get character indexes correctly, this can be done with the <code>string</code> module in Python, which enables us to get all the letters in the alphabet we need. This avoids the issue of forgetting a letter in case you hardcode the alphabet.</p>\n<p>The function <code>encrypt(key, plaintext)</code> takes in a key and a plain text, I build a tuple with the <code>zip()</code> function which is a terminating function. Which means it will stop as soon as the shorter string is exhausted.</p>\n<p>An example</p>\n<pre><code class=\"language-python\"># in\nlist(zip(string.ascii_lowercase, string.ascii_uppercase))\n\n# out\n[('a', 'A'), ('b', 'B'), ('c', 'C'), ('d', 'D'), ('e', 'E'), ('f', 'F'), ('g', 'G'), ('h', 'H'), ('i', 'I'), ('j', 'J'), ('k', 'K'), ('l', 'L'), ('m', 'M'), ('n', 'N'), ('o', 'O'), ('p', 'P'), ('q', 'Q'), ('r', 'R'), ('s', 'S'), ('t', 'T'), ('u', 'U'), ('v', 'V'), ('w', 'W'), ('x', 'X'), ('y', 'Y'), ('z', 'Z')]\n</code></pre>\n<p><code>cycle</code> is used to repeat the letters of the key for the entirety of the plaintext, note that this can repeat indefinately.</p>\n<p>Perform a loop in each of the pairs reducing them to a single value with <code>reduce</code> function from functools library. The <code>reduce</code> function takes in a function and an iterable object.</p>\n<p>The sum could be used here as well, but it would mean remembring that indexes of the letters and not the letters themselves are needed, or else we'll get a value error.</p>\n<p>Finally get the new letter after a modulo of 26 and append that to our resulting ciphertext string.</p>\n<h2>Step 2</h2>\n<p>Create the decipher function. This is fundamentally the same with the only difference being the fact that we subtract instead of adding the letters.</p>\n<h2>Step 3</h2>\n<p>Output these results. :)</p>\n<h2>Conclusion</h2>\n<p>In essence this is a Caeser's cipher with the only difference being the fact that we allow out key's character index to rotate instead of defining a fixed rotation. As you can see, this is why the Vigenere cipher can be considered a string of Caesar ciphers.</p>","id":"8fe13559-34b3-5640-bb88-bebaa29a5877","timeToRead":4,"frontmatter":{"title":"Vigenere Cipher","subtitle":"The Vigenere Cipher Broken down in Python","excerpt":"The Vigenere cipher is likely the the most secure ciphers out there. It builds on the principle of the Caesar cipher yet provides a decent way to avoid the easy to solve shift problems. The basic gist of this cipher is we have both a message and a key. The key can be any length, but you must repeat the key for the length of our message to get this to work","path":"/tech/vigenere-cipher","category":"tech","date":"September 07, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"vigenere_cipher.jpg","thumbnail":"vigenere_cipher.jpg","teaser":"vigenere_cipher.jpg","credit":"MTU","creditlink":"www.cs.mtu.edu"},"tags":["algorithms","puzzles","ciphers"],"published":true}}}}}