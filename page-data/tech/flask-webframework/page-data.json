{"componentChunkName":"component---src-templates-blogs-blog-post-jsx","path":"/tech/flask-webframework","result":{"data":{"markdownRemark":{"html":"<p>Web Application Framework or simply Web Framework represents a collection of libraries and modules that enables a web application developer to write applications without having to bother about low-level details such as protocols, thread management etc.</p>\n<p>Flask is a web application framework written in Python. It is developed by Armin Ronacher, who leads an international group of Python enthusiasts named Pocco. Flask is based on the Werkzeug WSGI toolkit and Jinja2 template engine. Both are Pocco projects.</p>\n<h3>Web Server Gateway Interface (WSGI)</h3>\n<p>WSGI has been adopted as a standard for Python web application development. It is a specification for a universal interface between the web server and the web applications.</p>\n<h3>Werkzeug</h3>\n<p>It is a WSGI toolkit, which implements requests, response objects, and other utility functions. This enables building a web framework on top of it. The Flask framework uses Werkzeug as one of its bases.</p>\n<h3>Jinja2</h3>\n<p>Jinja2 is a popular templating engine for Python. A web templating system combines a template with a certain data source to render dynamic web pages.</p>\n<p>Flask is often referred to as a micro framework. It aims to keep the core of an application simple yet extensible. Flask does not have built-in abstraction layer for database handling, nor does it have form a validation support. Instead, Flask supports the extensions to add such functionality to the application.</p>\n<p>{% include toc.html %}</p>\n<h2>Flask Environment</h2>\n<p>Python 2.6 or higher is usually required for installation of Flask. Although Flask and its dependencies work well with Python 3 (Python 3.3 onwards), many Flask extensions do not support it properly. Hence, it is recommended that Flask should be installed on Python 2.7.</p>\n<p>First, you will need to install virtualenv for development environment. Virtualenv is a virtual Python environment builder. It helps a user to create multiple Python environments side-by-side. Thereby, it can avoid compatibility issues between the different versions of the libraries.</p>\n<pre><code class=\"language-bash\">pip install virtualenv\n</code></pre>\n<p>The output should be like this −</p>\n<pre><code class=\"language-bash\">Collecting virtualenv\n  Downloading virtualenv-15.0.1-py2.py3-none-any.whl (1.8MB)\n\n    100% |################################| 1.8MB 204kB/s\nInstalling collected packages: virtualenv\nSuccessfully installed virtualenv-15.0.1\n</code></pre>\n<p>This command needs administrator privileges. Add sudo before pip on Linux/Mac OS. If you are on Windows, log in as Administrator. On Ubuntu virtualenv may be installed using its package manager.</p>\n<pre><code class=\"language-bash\">Sudo apt-get install virtualenv\n</code></pre>\n<p>Once installed, new virtual environment is created in a folder.</p>\n<pre><code class=\"language-bash\">mkdir newproj\ncd newproj\nvirtualenv venv\n</code></pre>\n<p>To activate corresponding environment, on Linux/OS X, use the following −</p>\n<pre><code class=\"language-bash\">venv/bin/activate\n</code></pre>\n<p>We are now ready to install Flask in this environment.</p>\n<pre><code class=\"language-bash\">pip install Flask\n</code></pre>\n<p>The output should be like this.</p>\n<pre><code class=\"language-bash\">Collecting Flask\n  Downloading Flask-0.10.1.tar.gz (544kB)\n    100% |################################| 544kB 410kB/s\nCollecting Werkzeug>=0.7 (from Flask)\n  Downloading Werkzeug-0.11.4-py2.py3-none-any.whl (305kB)\n    100% |################################| 307kB 531kB/s\nCollecting Jinja2>=2.4 (from Flask)\n  Downloading Jinja2-2.8-py2.py3-none-any.whl (263kB)\n    100% |################################| 266kB 935kB/s\nCollecting itsdangerous>=0.21 (from Flask)\n  Downloading itsdangerous-0.24.tar.gz (46kB)\n    100% |################################| 49kB 1.6MB/s\nCollecting MarkupSafe (from Jinja2>=2.4->Flask)\n  Downloading MarkupSafe-0.23.tar.gz\nInstalling collected packages: Werkzeug, MarkupSafe, Jinja2, itsdangerous, Flask\n  Running setup.py install for MarkupSafe\n  Running setup.py install for itsdangerous\n  Running setup.py install for Flask\nSuccessfully installed Flask-0.10.1 Jinja2-2.8 MarkupSafe-0.23 Werkzeug-0.11.4 itsdangerous-0.24\n</code></pre>\n<p>The above command can be run directly, without virtual environment for system-wide installation.</p>\n<h2>Application</h2>\n<p>In order to test Flaks installation install, you could type the following code in your Python editor as name.py. Here <em>name</em> could be any word. I called mine flasky.</p>\n<pre><code class=\"language-python\">from flask import Flask\n\napp = Flask(__name__)\n\n\n@app.route('/')\ndef flask_world():\nreturn 'Welcome to Flasky!'\n\nif __name__ == '__main__':\napp.run()\n</code></pre>\n<p>A couple of things to note from the above snippet:</p>\n<ul>\n<li>Importing <code>flask</code> module is necessary and important. The object Flask class is our WSGI application.</li>\n<li>Flask constructor takes the name of current module (<strong>name</strong>) as argument.</li>\n<li>The <code>route()</code> function of the Flask class is a <em>decorator</em>, which tells the application which URL should call the associated function.</li>\n<li>Finally the <code>run()</code> method of Flask class runs the application on the local development server.</li>\n</ul>\n<h3>Functions to note</h3>\n<blockquote>\n<p><code>app.route(rule, options)</code></p>\n</blockquote>\n<ul>\n<li>The rule parameter represents the URL for the function to open</li>\n<li>The options parameter is a list of parameters to be forwarded to the underlying Rule object\nIn the above example, <strong>‘/’</strong> URL is bound with <strong>flask_world()</strong> function. Hence, when the home page of web server is opened in browser, the output of this function will be rendered. This will be a simple text \"Welcome to Flasky!\".</li>\n</ul>\n<blockquote>\n<p><code>app.run(host, port, debug, options)</code></p>\n</blockquote>\n<p>All these parameters are optional</p>\n<ul>\n<li><strong>host</strong>: Hostname to listen on. Defaults to 127.0.0.1 (localhost). Set to ‘0.0.0.0’ to have server available externally.</li>\n<li><strong>port</strong>: Defaults to 5000.</li>\n<li><strong>debug</strong>: Defaults to false. If set to true, provides a debug information.</li>\n<li><strong>options</strong>: To be forwarded to underlying Werkzeug server.</li>\n</ul>\n<p>To execute the above snippet simply go to your terminal and go to the directory that holds the project and type in</p>\n<pre><code class=\"language-bash\">python flasky.py\n</code></pre>\n<p>You will recieve the following information</p>\n<pre><code class=\"language-bash\">* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n</code></pre>\n<p>Open the above URL (localhost:5000) in the browser. ‘Welcome to Flasky!’ message will be displayed on it.</p>\n<h3>Debug mode</h3>\n<p>A Flask application is started by calling the run() method. However, while the application is under development, it should be restarted manually for each change in the code. To avoid this inconvenience, enable debug support. The server will then reload itself if the code changes. It will also provide a useful debugger to track the errors if any, in the application.</p>\n<p>The Debug mode is enabled by setting the debug property of the application object to True before running or passing the debug parameter to the run() method.</p>\n<pre><code class=\"language-python\">app.debug = True\napp.run()\napp.run(debug = True)\n</code></pre>\n<h2>Routing</h2>\n<p>Modern web frameworks use the routing technique to help a user remember application URLs. It is useful to access the desired page directly without having to navigate from the home page.</p>\n<p>The <code>route()</code> decorator in Flask is used to bind URL to a function. For example −</p>\n<pre><code class=\"language-python\">@app.route('/flasky-closet')\ndef flasky_closet():\n   return 'This is what flasky likes to wear.'\n</code></pre>\n<p>Here, URL <code>'/flasky-closet'</code> rule is bound to the <code>flasky_closet()</code> function. As a result, if a user visits <a href=\"http://localhost:5000/flasky-closet\">http://localhost:5000/flasky-closet</a> URL, the output of the <code>flasky_closet()</code> function will be rendered in the browser. In this case a text <code>This is what flasky likes to wear.</code></p>\n<p>Alternatively, the <code>add_url_rule()</code> function of an application object is also available to bind a URL with a function as in the above example, <code>route()</code> is used.</p>\n<p>A decorator’s purpose is also served by the following representation −</p>\n<pre><code class=\"language-python\">def flasky_closet():\n   return 'This is what flasky likes to wear.'\napp.add_url_rule('/', 'flasky-closet', flasky)\n</code></pre>\n<h2>Variable Rules</h2>\n<p>It is possible to build a URL dynamically, by adding variable parts to the rule parameter. This variable part is marked as <variable-name>. It is passed as a keyword argument to the function with which the rule is associated.</p>\n<p>In the following example, the rule parameter of <code>route()</code> decorator contains <code>&#x3C;name></code> variable part attached to URL <code>/flasky-says-hello</code>. Hence, if the <a href=\"http://localhost:5000/flasky-says-hello/Lusina\">http://localhost:5000/flasky-says-hello/Lusina</a> is entered as a URL in the browser, 'Lusina' will be supplied to <code>flasky_greet()</code> function as argument.</p>\n<pre><code class=\"language-python\">from flask import Flask\napp = Flask(__name__)\n\n@app.route('/flasky-says-hello/&#x3C;name>')\ndef flaksy_greet(name):\n   return 'Flasky says hello %s!' % name\n\nif __name__ == '__main__':\n   app.run(debug = True)\n</code></pre>\n<p>Running above script from the Python shell and opening the browser with URL <a href=\"http://localhost:5000/flasky-say-hello/Lusina\">http://localhost:5000/flasky-say-hello/Lusina</a></p>\n<p>The following output will be displayed in the browser.</p>\n<blockquote>\n<p><code>Flasky says hello Lusina!</code></p>\n</blockquote>\n<p>In addition to the default string variable part, rules can be constructed using the following converters −</p>\n<ul>\n<li><strong>int</strong> accepts integer</li>\n<li><strong>float</strong> For floating point value</li>\n<li><strong>path</strong> accepts slashes used as directory separator character</li>\n</ul>\n<pre><code class=\"language-python\">@app.route('/flasky-age/&#x3C;int:postID>')\ndef flasky_age(postID):\n    return 'Flasky just turned  %d' % postID\n\n\n@app.route('/flasky-version/&#x3C;float:revNo>')\ndef flasky_version(revNo):\n    return 'Flasky version %f' % revNo\n</code></pre>\n<p>Running the above code from Python Shell. Visit the URL <a href=\"http://localhost:5000/flasky-age/11\">http://localhost:5000/flasky-age/11</a> in the browser.\nThe given number is used as argument to the flasky_age() function. The browser displays the following output:</p>\n<blockquote>\n<p><code>Flasky just turned 11</code></p>\n</blockquote>\n<p>Enter this URL in the browser − <a href=\"http://localhost:5000/flasky-version/1.1\">http://localhost:5000/flasky-version/1.1</a></p>\n<p>The flasky_version() function takes up the floating point number as argument. The following result appears in the browser window −</p>\n<blockquote>\n<p><code>Flasky version 1.100000</code></p>\n</blockquote>\n<p>The URL rules of Flask are based on Werkzeug’s routing module. This ensures that the URLs formed are unique and based on precedents laid down by Apache.</p>\n<p>Consider the rules defined in the following script −</p>\n<pre><code class=\"language-python\">from flask import Flask\napp = Flask(__name__)\n\n@app.route('/flask')\ndef hello_flask():\n   return 'Hello Flask'\n\n@app.route('/python/')\ndef hello_python():\n   return 'Hello Python'\n\nif __name__ == '__main__':\n   app.run()\n```python\n\nBoth the rules appear similar but in the second rule, trailing slash (/) is used. As a result, it becomes a canonical URL. Hence, using /python or /python/ returns the same output. However, in case of the first rule, /flask/ URL results in 404 Not Found page.\n\n## URL Building\n\nThe `url_for()` function is very useful for dynamically building a URL for a specific function. The function accepts the name of a function as first argument, and one or more keyword arguments, each corresponding to the variable part of URL.\n\nThe below code is a small snippet demonstrating the same, it builds on the previous snippets.\n\n```python\nfrom flask import Flask, redirect, url_for\n# some code\n...\n\n\"\"\"\nusing url_for and redirect to redirect the user in case they are not admin, for instance\nthe flasky_admin function is the admin site\n\"\"\"\n\n\n@app.route('/admin')\ndef flasky_admin():\n    return 'Hello, welcome to the admin page. Admin privileges!'\n\n\"\"\"\nbelow function is the guest site\n\"\"\"\n\n\n@app.route('/guest/&#x3C;guest>')\ndef flasky_guest(guest):\n    return 'Hello %s, You are logged in as guest in Flasky\\'s world' % guest\n\n\n\"\"\"\nbelow function checks the user, if they are admin, they will be redirected to the admin site,\nif they are guests, they will be redirected to the guest site. t\nThis function acts as a validator based on the parameter passed in, in this case, based on the url typed in,\nit will redirect to the relevant function based on the input\n\"\"\"\n\n\n@app.route('/user/&#x3C;name>')\ndef flasky_user(name):\n    if name == 'admin':\n        return redirect(url_for('flasky_admin'))\n    else:\n        return redirect(url_for('flasky_guest', guest=name))\n\n#  other code\n...\n</code></pre>\n<p>The above script has a function <code>flasky_user(name)</code> which accepts a value to its argument from the URL. This function checks if an argument received matches <code>admin</code> or not. If it matches, the application is redirected to the <code>flasky_admin()</code> function using <code>url_for()</code>, otherwise to the <code>flasky_guest()</code> function passing the received argument as guest parameter to it.</p>\n<p>On running the above code, this is the output when the url is <strong><a href=\"http://localhost:5000/admin\">http://localhost:5000/admin</a></strong></p>\n<blockquote>\n<p>Hello, welcome to the admin page. Admin privileges!</p>\n</blockquote>\n<p>When the url is changed to <a href=\"http://localhost:5000/guest/Meme\">http://localhost:5000/guest/Meme</a></p>\n<blockquote>\n<p>Hello Meme, You are logged in as guest in Flasky's world</p>\n</blockquote>\n<h2>HTTP methods</h2>\n<p>The following table is a summary of the HTTP methods availaible:\n| Method | Description\n|---|\n| GET | Sends data in unencrypted form to the server. Most common method.\n| POST | Used to send HTML form data to server. Data received by POST method is not cached by server.\n| HEAD | Same as GET, but without response body\n| PUT | Replaces all current representations of the target resource with the uploaded content\n| DELETE| Removes all current representations of the target resouce given by URL</p>\n<p>By default, the Flask route responds to the <em>GET</em> requests. However, this preference can be altered by providing methods argument to <code>route()</code> decorator.</p>\n<p>In order to demonstrate the use of <code>POST</code> method in URL routing, first let us create an HTML form and use the POST method to send form data to a URL.</p>\n<p>Save the following script as login.html</p>\n<pre><code class=\"language-html\">&#x3C;html>\n   &#x3C;body>\n      &#x3C;form action = \"http://localhost:5000/Login\" method = \"post\">\n         &#x3C;p>Enter Name:&#x3C;/p>\n         &#x3C;p>&#x3C;input type = \"text\" name = \"nm\" />&#x3C;/p>\n         &#x3C;p>&#x3C;input type = \"submit\" value = \"submit\" />&#x3C;/p>\n      &#x3C;/form>\n   &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p>The following demonstrate HTTP requests. The first function, <code>success(name)</code> is only called when the user is successful in logging in. The <code>request</code> module has to be imported.</p>\n<pre><code class=\"language-python\">from flask import Flask, redirect, url_for, request\n\n@app.route('/success/&#x3C;name>')\ndef success(name):\n    return 'welcome to Flasky! %s' % name\n</code></pre>\n<p>This below function redirects the user to the login page, The <code>app.route</code> decorator takes in two arguments, the /Login page url and the HTTP methods. It checks the HTTP requests, if the request is POST, <a href=\"http://localhost/login\">http://localhost/login</a> is mapped to the <code>login()</code> function. Since the server has received data by POST method, value of <code>nm</code> parameter obtained from the form data is obtained by −</p>\n<blockquote>\n<p>user = request.form['nm']</p>\n</blockquote>\n<p>It is then passed to <code>/success</code> URL as variable part. The browser displays a welcome message in the window.</p>\n<p>Changing the method parameter to ‘GET’ in login.html and opening it again in the browser will cause the data recieved on server by the GET method. The value of <code>nm</code> parameter is now obtained by</p>\n<blockquote>\n<p>User = request.args.get(‘nm’)</p>\n</blockquote>\n<p>Here, args is dictionary object containing a list of pairs of form parameter and its corresponding value. The value corresponding to <code>nm</code> parameter is passed on to <code>/success</code> URL as before.</p>\n<pre><code class=\"language-python\">@app.route('/login', methods=['POST', 'GET'])\ndef login():\n    if request.method == 'POST':\n        user = request.form['nm']\n        return redirect(url_for('success', name=user))\n    else:\n        user = request.args.get('nm')\n        return redirect(url_for('success', name=user))\n</code></pre>\n<h2>Templates</h2>\n<p>It is possible to return the output of a function bound to a certain URL in the form of HTML. For instance, in the following script, <code>hello()</code> function will render ‘Hello World’ with <h1> tag attached to it.</p>\n<pre><code class=\"language-python\">from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n   return '&#x3C;html>&#x3C;body>&#x3C;h1>Hello World'&#x3C;/h1>&#x3C;/body>&#x3C;/html>'\n\nif __name__ == '__main__':\n   app.run(debug = True)\n</code></pre>\n<p>However, generating HTML content from Python code is cumbersome, especially when variable data and Python language elements like conditionals or loops need to be put. This would require frequent escaping from HTML.</p>\n<p>This is where one can take advantage of <strong><a href=\"http://jinja.pocoo.org/\">Jinja2</a></strong> template engine, on which Flask is based. Instead of returning hardcode HTML from the function, a HTML file can be rendered by the <code>render_template()</code> function.</p>\n<pre><code class=\"language-python\">from flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n   return render_template(‘hello.html’)\n\nif __name__ == '__main__':\n   app.run(debug = True)\n</code></pre>\n<p>Flask will try to find the HTML file in the templates folder, in the same folder in which this script is present.</p>\n<pre><code class=\"language-bash\">├── App-Folder\n|    ├── flasky.py\n|    ├── templates\n|           ├── index.html\n</code></pre>\n<p>The term <em>web templating system</em> refers to designing an HTML script in which the variable data can be inserted dynamically. A web template system comprises of a template engine, some kind of data source and a template processor.</p>\n<p>Flask uses <em>Jinja2</em> template engine. A web template contains HTML syntax interspersed placeholders for variables and expressions (in this case Python expressions) which are replaced values when the template is rendered.</p>\n<p>The following code is saved as hello.html in the templates folder.</p>\n<pre><code class=\"language-html\">&#x3C;!doctype html>\n&#x3C;html>\n   &#x3C;body>\n      &#x3C;h1>Hello {{ name }}&#x3C;/h1>\n   &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p>Next, run the following script from Python shell.</p>\n<pre><code class=\"language-python\">from flask import Flask, render_template\n\napp = Flask (__name__)} %}\n\n@app.route(\"/hello/&#x3C;user>\")\ndef hello_name(user):\n   return render_template('hello.html', name = user)\n\nif __name__ == '__main__':\n   app.run(debug = True)\n</code></pre>\n<p>As the development server starts running, open the browser and enter URL as − <a href=\"http://localhost:5000/hello/Lusina\">http://localhost:5000/hello/Lusina</a></p>\n<p>The variable part of URL is inserted at <code>{{ name }}</code> place holder.</p>\n<p>The Jinja2 template engine uses the following delimiters for escaping from HTML.</p>\n<ul>\n<li><code>{\\%\\ ... \\%\\}</code> for Statements</li>\n<li><code>{{ ... }}</code> for Expressions to print to the template output</li>\n<li><code>{# ... #}</code> for Comments not included in the template output</li>\n<li><code># ... ##</code> for Line Statements</li>\n</ul>\n<p>In the following example, use of conditional statement in the template is demonstrated. The URL rule to the hello() function accepts the integer parameter. It is passed to the hello.html template. Inside it, the value of number received (marks) is compared (greater or less than 50) and accordingly HTML is conditionally rendered.</p>\n<p>The Python Script is as follows −</p>\n<pre><code class=\"language-python\">from flask import Flask, render_template\napp = Flask(__name__)\n\n@app.route('/hello/&#x3C;int:score>')\ndef hello_name(score):\n   return render_template('hello.html', marks = score)\n\nif __name__ == '__main__':\n   app.run(debug = True)\n</code></pre>\n<p>HTML template script of hello.html is as follows</p>\n<pre><code class=\"language-html\">&#x3C;!doctype html>\n&#x3C;html>\n   &#x3C;body>\n\n      {\\%\\ if marks>50 \\%\\}\n      &#x3C;h1> Your result is pass!&#x3C;/h1>\n      {\\%\\ else \\%\\}\n      &#x3C;h1>Your result is fail&#x3C;/h1>\n      {\\%\\ endif \\%\\}\n\n   &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<blockquote>\n<p>Note that the conditional statements if-else and endif are enclosed in delimiter {%..%}.</p>\n</blockquote>\n<p>Run the Python script and visit URL <a href=\"http://localhost/hello/60\">http://localhost/hello/60</a> and then <a href=\"http://localhost/hello/30\">http://localhost/hello/30</a> to see the output of HTML changing conditionally.</p>\n<p>The Python loop constructs can also be employed inside the template. In the following script, the <code>result()</code> function sends a dictionary object to template results.html when URL <a href=\"http://localhost:5000/result\">http://localhost:5000/result</a> is opened in the browser.</p>\n<p>The Template part of result.html employs a for loop to render key and value pairs of dictionary object result{} as cells of an HTML table.</p>\n<p>Run the following code from Python shell.</p>\n<pre><code class=\"language-python\">from flask import Flask, render_template\napp = Flask(__name__)\n\n@app.route('/result')\ndef result():\n   dict = {'phy':50,'che':60,'maths':70}\n   return render_template('result.html', result = dict)\n\nif __name__ == '__main__':\n   app.run(debug = True)\n</code></pre>\n<p>The results.html</p>\n<pre><code class=\"language-html\">    &#x3C;!doctype html>\n    &#x3C;html>\n       &#x3C;body>\n\n      &#x3C;table border = 1>\n         {\\%\\ for key, value in result.iteritems() \\%\\}\n\n            &#x3C;tr>\n               &#x3C;th> {{ key }} &#x3C;/th>\n               &#x3C;td> {{ value }} &#x3C;/td>\n            &#x3C;/tr>\n\n         {\\%\\ endfor \\%\\}\n      &#x3C;/table>\n\n   &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<blockquote>\n<p>Python statements corresponding to the For loop are enclosed in {%..%} whereas, the expressions key and value are put inside {{ }}.</p>\n</blockquote>\n<h2>Static Files</h2>\n<p>A web application often requires a static file such as a javascript file or a CSS file supporting the display of a web page. Usually, the web server is configured to serve them for you, but during the development, these files are served from static folder in your package or next to your module and it will be available at /static on the application.</p>\n<p>A special endpoint ‘static’ is used to generate URL for static files.</p>\n<p>In the following example, a javascript function defined in hello.js is called on OnClick event of HTML button in index.html, which is rendered on ‘/’ URL of the Flask application.</p>\n<p>from flask import Flask, render_template</p>\n<pre><code class=\"language-python\">        app = Flask(__name__)\n\n        @app.route(\"/\")\n        def index():\n           return render_template(\"index.html\")\n\n        if __name__ == '__main__':\n           app.run(debug = True)\n</code></pre>\n<p>The HTML script of index.html is given below.</p>\n<pre><code class=\"language-html\">        &#x3C;html>\n           &#x3C;head>\n              &#x3C;script type = \"text/javascript\" src = \"{{ url_for('static', filename = hello.js') }}\" >&#x3C;/script>\n           &#x3C;/head>\n       &#x3C;body>\n          &#x3C;input type = \"button\" onclick = \"sayHello()\" value = \"Say Hello\" />\n       &#x3C;/body>\n        &#x3C;/html>\n</code></pre>\n<p>Hello.js contains sayHello() function.</p>\n<pre><code class=\"language-javascript\">function sayHello() {\n  alert('Hello World')\n}\n</code></pre>\n<h2>Request Object</h2>\n<p>The data from a client’s web page is sent to the server as a global request object. In order to process the request data, it should be imported from the Flask module.</p>\n<p>Important attributes of request object are listed below:</p>\n<table>\n<thead>\n<tr>\n<th>Request Object</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Form</td>\n<td>It is a dictionary object containing key and value pairs of form parameters and their values.</td>\n</tr>\n<tr>\n<td>args</td>\n<td>parsed contents of query string which is part of URL after question mark (?).</td>\n</tr>\n<tr>\n<td>Cookies</td>\n<td>dictionary object holding Cookie names and values.</td>\n</tr>\n<tr>\n<td>files</td>\n<td>data pertaining to uploaded file.</td>\n</tr>\n</tbody>\n</table>\n<h2>Sending Form Data to Template</h2>\n<p>We have seen that the http method can be specified in URL rule. The Form data received by the triggered function can collect it in the form of a <em>dictionary</em> object and forward it to a template to render it on a corresponding web page.</p>\n<p>In the following example, <code>/</code> URL renders a web page <code>login-sample.html</code> which has a form. The data filled in it is posted to the <code>/result</code> URL which triggers the <code>result()</code> function.</p>\n<p>The <code>results()</code> function collects form data present in <code>request.form</code> in a dictionary object and sends it for rendering to <code>success.html</code></p>\n<p>The template dynamically renders an HTML table of form data.</p>\n<p>These are the sample html forms and tables that will be used fot this small exercise</p>\n<pre><code class=\"language-html\">&#x3C;!--sample form for login sample-->\n&#x3C;form action = \"http://localhost:5000/success\" method = \"POST\">\n    &#x3C;p>Name &#x3C;input type = \"text\" name = \"Name\" />&#x3C;/p>\n     &#x3C;p>Email &#x3C;input type = \"email\" name = \"Email\" />&#x3C;/p>\n    &#x3C;p>username &#x3C;input type = \"text\" name = \"username\" />&#x3C;/p>\n     &#x3C;p>Password &#x3C;input type =\"password\" name = \"Password\" />&#x3C;/p>\n     &#x3C;p>&#x3C;input type = \"submit\" value = \"submit\" />&#x3C;/p>\n&#x3C;/form>\n</code></pre>\n<blockquote>\n<p>Login page</p>\n</blockquote>\n<pre><code class=\"language-html\">&#x3C;table border = 1>\n     {\\%\\ for key, value in result.iteritems() \\%\\}\n\n        &#x3C;tr>\n           &#x3C;th> {{ key }} &#x3C;/th>\n           &#x3C;td> {{ value }} &#x3C;/td>\n        &#x3C;/tr>\n\n     {\\%\\ endfor \\%\\}\n&#x3C;/table>\n</code></pre>\n<blockquote>\n<p>success page</p>\n</blockquote>\n<p>The Python code</p>\n<pre><code class=\"language-python\">@app.route('/login-sample')\ndef user():\n    return render_template('login-sample.html')\n\n\n@app.route('/success', methods=['POST', 'GET'])\ndef success_login():\n    if request.method == 'POST':\n        result = request.form\n        return render_template('success.html', result=result)\n    else:\n        render_template('404')\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>","frontmatter":{"title":"Flask Web Framework","subtitle":"Some basic information about Flask web framework","date":"July, 30, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"flask-webframe.png","thumbnail":null,"teaser":"flask-webframe.png","credit":"Flask","creditlink":"http://flask.pocoo.org"},"path":"/tech/flask-webframework","tags":["web frameworks","python frameworks","flask"],"excerpt":"Web Application Framework or simply Web Framework represents a collection of libraries and modules that enables a web application developer to write applications without having to bother about low-level details such as protocols, thread management etc."}}},"pageContext":{"prev":{"html":"<p>Browsers are essential tools that help in transfering information from one computer to another over the world wide web. Without these browsers we would not be able to dynamically interact with people from all over the world at a click of a button.</p>\n<p>Most of us interact with browsers without actually knowing what happens behind the scenes. From the time you type in <a href=\"https://www.google.com\"><em>google</em></a> to the time you get millions of hits on your search, a lot of things happen in the background. We shall explore these many things that happen.</p>\n<p>First of, we shall identify the browsers out there, the ones in existence. I know there many but we shall still outline a few, just to get an idea of what we are dealing with.</p>\n<ul>\n<li>Chrome</li>\n<li>Firefox</li>\n<li>Safari (for my good friends who own MacBooks)</li>\n<li>Internet Explorer 9</li>\n<li>Opera</li>\n<li>Maxthon</li>\n<li>YouTube Browswer</li>\n<li>Netscape Browser</li>\n<li>UC Browser</li>\n<li>Avant</li>\n</ul>\n<p>etc etc.\nNotice, how I have mentioned some browsers which are mobile based. Regardless of where they are based, the functionality remains the same as we shall soon see.</p>\n<p>The most elementary function of a browser is to display a web resource to the user. This resource is fetched from a server and displayed in the browser window. This resource is written in <a href=\"https://en.wikipedia.org/wiki/HTML\" title=\"More about HTML here\">HyperText Markup Language</a> (HTML), but it can be a PDF document or an image or any other type of file.</p>\n<h2>Functionality</h2>\n<p>Browsers are able to display such content due to an underlying web <em>protocol</em> (An agreed-upon format for transmitting data between two devices). This protocol is known as the <a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol\">HyperText Transfer Protocol</a> or <strong>HTTP</strong> in short. HTTP defines how messages are formatted and transmitted and also what actions Web servers and browsers should take in response to various commands. This allows Web clients and servers to <em>talk</em> to each other. When you enter a Web address or <a href=\"https://en.wikipedia.org/wiki/Uniform_Resource_Locator\">Uniform Resource Locator</a> (URL) in your browser it sends a HTTP command to the Web server instructin it to fetch and transmit the requested Web page and display this information in your browser. It is like making a phone call. You dial a specific number in order to talk to a specific person on the other end of the line.</p>\n<blockquote>\n<p>HyperText Transfer Protocol: An agreed-upon format for transmitting data between two devices</p>\n</blockquote>\n<p>All Web servers serving Web sites and pages support the HTTP protocol.</p>\n<p>A brief example will make it easier to picture. Say, you intend to browse a website by the name <em>FunCats</em> and you want to read up on why cats love chasing red dots to their hearts content (why do they not get it's always a trap?). The title of this article is called \"For the love of the red dot.\". The URL to reach this article on FunCats is: <a href=\"http://www.funcats.com/for-the-love-of-the-red-dot.html\">http://www.funcats.com/for-the-love-of-the-red-dot.html</a></p>\n<p>Once you enter the URL \"<a href=\"http://www.funcats.com/for-the-love-of-the-red-dot.html\">http://www.funcats.com/for-the-love-of-the-red-dot.html</a>\" into your address line, the browser breaks that Web address down into 3 parts:</p>\n<ul>\n<li>Protocol - http</li>\n<li>Server name - www.funcats.com</li>\n<li>file name - for-the-love-of-the-red-dot.html (I is is important to note that .html is a file extenstion name for HyperText Markup Language File, so a PDF document would be <em>for-the-love-of-the-red-dot.pdf</em>)</li>\n</ul>\n<p>In order for your browser to connect to the server to retrieve the information, it communicates with a name server to translate the server name into an <a href=\"IP%20address%20-%20Wikipedia,%20the%20free%20encyclopedia\" title=\"More on IP addresses\">IP address</a>. Your Web browser is then able to connect to the Web server at the resolved IP address. Once your browser has connected to the Web server using HTTP, the browser then reads the HyperText Markup Language (HTML) and the data is then displayed in your browser.</p>\n<h2>Components of a browser</h2>\n<p>So, what exactly are these parts of a browser that make this all possible? It surely has to be more than just the explanation above. For the functions to be a well oiled machine, these are the parts of a browser:</p>\n<ol>\n<li>\n<p><strong>User Interface</strong></p>\n<p>This inclued the address bar, where you type to search for content online, the back and forward buttons for navigation and last but not least the bookmarks bar.</p>\n</li>\n<li>\n<p><strong>Browser engine</strong></p>\n<p>Connects the rendering engine and the user interface.</p>\n</li>\n<li>\n<p><strong>Rendering engine</strong></p>\n<p>This is reponsible for displaying requested content. If the content requested is HTML, it will parse the HTML and CSS and display the parsed content. The main function (as the name suggests), is to simply render the content requested. By default the rendering engine can display HTML and XML documents, but it can also display other content, such as images and documens such as PDF. Browsers such as Chrome run multiple instances of the rendering engine, one for each tab. Therefore, each tab runs on a separate process. Different browsers use different rendering engines. Chrome uses Blink, Firefox uses gecko, Safari uses Webkit and Internet Explorer user trident, just to mention a few.</p>\n</li>\n<li>\n<p><strong>Networking</strong></p>\n<p>For networking calls such as HTTP requests.</p>\n</li>\n<li>\n<p><strong>UI backend</strong></p>\n<p>This is used to draw basic widgets like windows and combo boxes.</p>\n</li>\n<li>\n<p><strong>JavaScript Interpreter</strong></p>\n<p>Used to parse and execute JavaScript code from a website that used JavaScript.</p>\n</li>\n<li>\n<p><strong>Data Storage</strong></p>\n<p>This is used to store data locally, such as <a href=\"HTTP%20cookie%20-%20Wikipedia,%20the%20free%20encyclopedia\" title=\"More about cookies here\">cookies</a>. This is not the tasty treat that you always craved as a child.</p>\n</li>\n</ol>\n<p>Here is an image to make it more visiually appealing</p>\n<img src=\"http://placehold.it/150x150.gif\" alt=\"\">\n![image](https://github.com/BrianLusina/howBrowsersWork/blob/master/components_of_a_browser.png \"Components of a browser\")\n<p>So, before i sum it all up, here is the intricate flow of data from the website you requested to the display on your browser:</p>\n<p><img src=\"http://www.html5rocks.com/en/tutorials/internals/howbrowserswork/flow.png\" alt=\"flow\" title=\"Flow of a typical Rendering Engine\"></p>\n<p>These are the steps:</p>\n<ul>\n<li>The rendering engine will start off with parsing the HTML document (if that is what is requested by the user) then convert elements to <a href=\"Document%20Object%20Model%20-%20Wikipedia,%20the%20free%20encyclopedia\" title=\"More information on Document Object MOdel\">Document Object Model</a>(DOM) nodes in a tree called the \"content tree\". it will read through the style data, both in external CSS files and in style elements. The styling information and visual instructions in the HTML will be used to create another tree: the <em>render tree</em>. The render tree contains rectangles with visual attributes like color and dimensions. The rectangles are in the right order to be displayed on the screen.</li>\n<li>After the construction of the render tree it goes through a \"layout\" process. This means giving each node the exact coordinates where it should appear on the screen.</li>\n<li>The next stage is painting. The render tree will be traversed and each node will be painted using the UI backend layer.</li>\n</ul>\n<p>I have broken it down to 3 steps, but is is actually a gradual process. For a better user experience (UX), the rendering engine will try to display contents on the screen as soon as possible. It will not wait until all HTML is parsed before starting to build and layout the render tree. Parts of the content will be parsed and displayed, while the process continues with the rest of the contents that keeps coming from the network. It is more like how threads work in Java. Call it multitasking, in some way.</p>\n<p>Here is a simple example of a rendering engine at work. The example displayed is of the workings of the WebKit rendering engine. Not all rendering engines will use the same terms, but the general flow will be the same.</p>\n<p><img src=\"http://www.html5rocks.com/en/tutorials/internals/howbrowserswork/webkitflow.png\" alt=\"render\"></p>","id":"44f5e4dc-b8c6-5e05-b516-3620f3f35516","timeToRead":6,"frontmatter":{"title":"How Browsers Work","subtitle":"Some basic information about how a browser works","excerpt":"Browsers are essential tools that help in transfering information from one computer to another over the world wide web. Without these browsers we would not be able to dynamically interact with people from all over the world at a click of a button.","path":"/tech/how-browsers-work","category":"tech","date":"July 31, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"how-browsers-work.jpg","thumbnail":null,"teaser":"how-browsers-work.jpg","credit":"Taligarsiel","creditlink":"http://www.taligarsiel.com"},"tags":["how browsers work","browsers"],"published":true}},"next":{"html":"<p>Algorithms are steps taken to solve a problem. Analysis of an algorithm helps us determine whether the algorithm is useful or not. Once we have a correct algorithm we have to determine whether the algorithm is efficient or not. Effieciency in any running system is important to achieve maximum performance within a given amount of time. Complexity should be at a minimum. Abstraction is key in this process.</p>\n<h1>Time Complexity Categories</h1>\n<p>Measures the time taken for an algorithm to execute a problem given a certain input. Categories include:</p>\n<ul>\n<li><strong>Worst Case complexity</strong>: When the amount ot time required by an algorithm for a given input is maximum.</li>\n<li><strong>Average-case complexity</strong>: When the amount of time required by an algorithm for a given input is average.</li>\n<li><strong>Best case complexity</strong>: When the amount of time required by an algorithm for a given input is minimum.</li>\n</ul>\n<h1>Space Complexity</h1>\n<p>Space taken by an algorithm to execute a given problem. This depends on the data structure being worked on</p>\n<h1>Asymptotic Analysis</h1>\n<p>Kind of analysis done to calculate the complexity of an algorithm in its theoretical analysis. A alarge length of input is used to calculate the complexity function of the algorithm. A graph is usually used.\nAsymptotic denotes a condition where a line tends to meet a curve, but they do not intersect. Here the line and the curve is asymptotic to each other. It involves computing the running time of any any operation in mathematical units of computation.\nThe <em>Big-O-notation</em> is used for this</p>\n<h2>Asymptotic notations</h2>\n<ul>\n<li>Big-O notation usually denoted as <strong>O</strong>. Usually used</li>\n<li>Omega</li>\n<li>Theta</li>\n</ul>","id":"83ba908b-fcfc-5588-839f-acd97181f031","timeToRead":1,"frontmatter":{"title":"Algorithm Analysis","subtitle":"What is algorithm analysis","excerpt":"Algorithms are steps taken to solve a problem. Analysis of an algorithm helps us determine whether the algorithm is useful or not. Once we have a correct algorithm we have to determine whether the algorithm is efficient or not. Effieciency in any running system is important to achieve maximum performance within a given amount of time. Complexity should be at a minimum. Abstraction is key in this process.","path":"/tech/algorithms-analysis","category":"tech","date":"July 18, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"algorithm-analysis.jpg","thumbnail":"algorithm-analysis.jpg","teaser":"algorithm-analysis.jpg","credit":null,"creditlink":null},"tags":["complexity of algorithms","algorithms","algorithm analysis"],"published":true}}}}}