{"componentChunkName":"component---src-templates-tags-tags-jsx","path":"/tags/lists/","result":{"data":{"allMarkdownRemark":{"totalCount":1,"edges":[{"node":{"frontmatter":{"title":"Abstract Data Types","subtitle":"All about abstract data types","excerpt":"There are several Abstract data types that are used in Java, this is a brief overview of some of them","path":"/tech/abstract-data-types","date":"July 12, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"abstract-data-type.jpg","thumbnail":"abstract-data-type.jpg","teaser":"abstract-data-type.jpg","credit":null,"creditlink":null},"tags":["data","arrays","lists","stacks","queues"]},"excerpt":"There are several Abstract data types that are used in Java, Stacks The Stack class represents a last-in-first-out (LIFO) stack of objectsâ€¦","timeToRead":2,"html":"<p>There are several Abstract data types that are used in Java,</p>\n<h2>Stacks</h2>\n<p>The Stack class represents a last-in-first-out (LIFO) stack of objects, The last element in will be the first one out, which is unfair if you ask me :smile:. It extends class <a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/Vector.html\"><strong>Vector</strong></a> with five operations that allow a vector to be treated as a stack.</p>\n<p>The usual push and pop operations are provided, as well as a method to peek at the top item on the stack, a method to test for whether the stack is empty, and a method to search the stack for an item and discover how far it is from the top.</p>\n<p>When a stack is first created, it contains no items.</p>\n<ul>\n<li><strong>push</strong> adds an item to the top of the stack. This will always be the last one in, but the first one out.</li>\n<li><strong>pop</strong> removes an element from the top of the stack and returns it.</li>\n<li><strong>peek</strong> look at the object at the top of the stack without removing it</li>\n<li><strong>empty</strong> tests if the stack is empty</li>\n<li><strong>search</strong> if the object being sought is in the stack, it returns the 1-based position of the object, which is the distance from the top.</li>\n</ul>\n<p>A practical example, trays piled on top of each other, books laid on top of each other, plates laid on top of each other.</p>\n<p>There is no scenerio in which the stack will remain empty. There will always be data flowing in and data flowing out.</p>\n<p>A code snippet:</p>\n<pre><code class=\"language-java\">public class StacksDemo {\n    public static void main(String[] args){\n        Stack stack = new Stack();\n        System.out.println(\"Stack is \" + stack);\n        showPush(stack,52);\n        showPop(stack);\n        /*output:\n        *Stack is []\n        * push 52\n        * Stack is now: [52]\n        * Popped element is 52\n        * Stack is: []\n        * */\n    }\n\n    /**Method showing how to push elements into a stack*/\n    public static void showPush(Stack stack, int a){\n        stack.push(new Integer(a));\n        System.out.println(\"push \" + String.valueOf(a));\n        System.out.println(\"Stack is now: \"+ stack );\n    }\n\n    /**Method demonstrating the use of pop*/\n    public static void showPop(Stack stack){\n        Integer integer = (Integer) stack.pop();\n        System.out.println(\"Popped element is \" + String.valueOf(integer));\n        System.out.println(\"Stack is: \"+ stack);\n    }\n/*Class end*/\n}\n</code></pre>\n<blockquote>\n<p>code snippet can be found <a href=\"https://github.com/BrianLusina/Java-Playground/blob/master/Toy%20Problems/src/DataStructures/DataTypes/StacksDemo.java\">here</a></p>\n</blockquote>\n<h2>Queue</h2>\n<p>Resembles a normal queue on a bus station, the first in line will be the first one to board the bus, the last will obviously be the last. It is based on a first come first serve\nHas 2 major operations:</p>\n<ul>\n<li>Dequeue</li>\n<li>-</li>\n</ul>\n<h2>LinkedLists</h2>\n<p>Data arranged in a list with the first element being the <strong>head</strong> having the node and a pointer. The pointer points to another node and so on and so forth until it reaches the last element with a node that is null. The last element is known as the <strong>tail</strong>\nThe node consists of where the current data is held and where the next data is held.</p>"}}]}},"pageContext":{"tag":"lists"}}}