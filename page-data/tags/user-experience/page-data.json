{"componentChunkName":"component---src-templates-tags-tags-jsx","path":"/tags/user-experience/","result":{"data":{"allMarkdownRemark":{"totalCount":3,"edges":[{"node":{"frontmatter":{"title":"Test Users and Usability","subtitle":"How many users do you need to test usability of your software?","excerpt":"How many users do you need to test usability of your software?","path":"/design/test-users-usabilty-studies","date":"August 04, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"test-users-and-usability.jpg","thumbnail":"test-users-and-usability.jpg","teaser":"test-users-and-usability.jpg","credit":null,"creditlink":null},"tags":["Usability","User Experience","UX","Design"]},"excerpt":"Following my previous article, I think it best to write about how many users are the optimal number to conduct a usability test with. Most…","timeToRead":4,"html":"<p>Following my <a href=\"https://brianlusina.github.io/Paper-Rabbit/articles/usability-and-code/\">previous</a> article, I think it best to write about how many users are the optimal number to conduct a usability test with. Most would argue that you need hundreds to come up with an optimal number, say, 100? However, this would be wrong, very wrong. In fact, based on my own personal research the number is 5, except when it is not. This means the optimal number is 5, but then again depends on a couple of factors.</p>\n<p>Why 5 though? This lets you find almost as many usability problems as you'd find using many more test participants. With 5 users, you almost always get close to user testing's maximum benefit-cost ratio.</p>\n<p>There are exceptions to the rule of course.</p>\n<ul>\n<li><strong>Quantitative studies aim at statistics more than on insights</strong>. In this case test at least 20 users to get statistically significant numbers; tight confidence intervals require even more users.</li>\n<li><strong>Card Sorting</strong> test at least 15 users.</li>\n<li><strong>Eyetracking</strong> Test 39 users if you want stable heatmaps.</li>\n</ul>\n<p>These exceptions shouldn't worry you much. The vast majority of your user research should be qualitative, aimed at collecting insights to drive your design, not numbers to impress people in PowerPoint.</p>\n<p>The main argument for small tests is simply <strong>return on investment</strong>. Testing costs increase with each additional study participant, yet the number of findings quickly reaches the point of diminishing returns. There's little additional benefit to running more than 5 people through the same study; ROI drops like a stone with a bigger number.</p>\n<p>And if you have a big budget? Spend it on additional studies, not more users in each study.</p>\n<h2>Arguments for more Test participants</h2>\n<ol>\n<li><strong>A big website has tons of users.</strong> Doesn't matter for the sample size, even if you were doing statistics. The variance in statistical sampling is determined by the sample size, not the size of the full population from which the sample was drawn. In user testing, we focus on a website's functionality to see which design elements are easy or difficult to use. The evaluation of a design element's quality is independent of how many people use it. (Conversely, the decision about whether to fix a design flaw should certainly consider how much use it'll get: it might not be worth the effort to improve a feature that has few users; better to spend the effort recoding something with millions of users.).</li>\n<li><strong>A big website has tons of features</strong> This is an argument for running several different tests — each focusing on a smaller set of features — not for having more users in each test. You can't ask any individual to test more than a handful of tasks before the poor user is tired out. Yes, you'll need more users overall for a feature-rich design, but you need to spread these users across many studies, each focusing on a subset of your research agenda.</li>\n<li>\n<p><strong>We have several different target audiences.</strong> This can actually be a legitimate reason for testing a larger user set because you'll need representatives of each target group. However, this argument holds <strong>only if</strong> the different users are actually going to behave in completely different ways. Some examples of projects may include:</p>\n<ul>\n<li>Medical site targeting both doctors and patients, and</li>\n<li>Auction site where you can either sell stuff or buy stuff.</li>\n</ul>\n<p>When the users and their tasks are this different, you're essentially running a new test for each target audience, and you'll need close to 5 users per group. Typically, you can get away with 3–4 users per group because the user experience will overlap somewhat between the two groups. With, say, a financial site that targets novice, intermediate, and experienced investors, you might test 3 of each, for a total of 9 users — you won't need 15 users total to assess the site's usability.</p>\n</li>\n<li>\n<p><strong>The site makes so much money that even the smallest usability problem is unacceptable.</strong> Rich companies certainly have an ROI case to spend more on usability. Even if they spend \"too much\" on each quality improvement, they'll make even more back because of the vast amounts of money flowing through the user interface. However, even the highest-value design projects will still optimize their ROI by keeping each study small and conducting many more studies than a lower-value project could afford.</p>\n<p>The basic point is that it's okay to leave usability problems behind in any one version of the design as long as you're employing an iterative design process where you'll design and test additional versions. Anything not fixed now will be fixed next time. If you have many things to fix, simply plan for a lot of iterations. The end result will be higher quality (and thus higher business value) due to the additional iterations than from testing more users each time.</p>\n</li>\n</ol>\n<p>True answer to \"how many users\" can sometimes be much smaller than 5. If you have an Agile-style UX process with very low overhead, your investment in each study is so trivial that the cost–benefit ratio is optimized by a smaller benefit. (It might seem counterintuitive to end up with more money by making less money from each study, but this occurs because the smaller overhead lets you run so many more studies that the sum of numerous small benefits becomes a big number.)</p>\n<p>For really low-overhead projects, it's often optimal to test as little as 2 users per study. For some other projects, 8 users — or sometimes even more — might be better. For most projects, however, you should stay with the tried-and-true: 5 users per usability test.</p>\n<h2>Conclusion</h2>\n<p>Performing these usability studies is necessary to determing usability of your software. However, one should note that sometimes less is more.</p>"}},{"node":{"frontmatter":{"title":"Usability, Design and Code","subtitle":"Usability 101, a brief introduction into design","excerpt":"Usability 101, a brief introduction into design","path":"/design/usability-and-code","date":"August 01, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"usability-design.png","thumbnail":"usability-design.png","teaser":"usability-design.png","credit":null,"creditlink":null},"tags":["Usability","User Experience","UX","Design"]},"excerpt":"A lot of people associate designing stellar applications with skill alone. That it just takes one brilliant out of the blue idea to create…","timeToRead":5,"html":"<p>A lot of people associate designing stellar applications with skill alone. That it just takes one brilliant out of the blue idea to create something that everyone will suddenly realize they need. Sometimes this happens, but more often than not it does not. A lot of applications are built to fill a gap that people have craved to be filled. To find this gap you need to first know that it is there, you need to identify if people acknowledge it is a gap as well and also you need to be able to determine if said people need a complex technology to fill this gap or do they simply need a pen and paper. Not all problems need technology to get solved.</p>\n<p>Now, say that you find a problem that can be solved with technology. Say, your particular software can help provide a particular solution to the problem. This is always good to identify, that it helps to solve the problem. The question breaks down to is it something the users can use with ease and can they learn easily to use it or do they need the whole documentation you used to build it?</p>\n<p>This brings me to <strong>usability</strong>. A term that is so rarely used, but a term I think is necessary and important in the world of designing technology.</p>\n<h2>Usability</h2>\n<p>Usability is a quality attribute that assesses how easy user interfaces are to use. The word <em>usability</em> also refers to methods for improving ease-of-use during the design process.</p>\n<p>The 5 components associated with usability:</p>\n<ul>\n<li><strong>Learnability</strong> Is it easy for users to accomplish basic tasks the first time they encounter the design?</li>\n<li><strong>Efficiency</strong> Once users have learned the design, how quickly can they perform tasks?</li>\n<li><strong>Memorability</strong> When users return to the design after a period of not using it, how easily can they reestablish proficiency?</li>\n<li><strong>Errors</strong> How many errors do users make, how severe are these errors, and how easily can they recover from the errors?</li>\n<li><strong>Satisfaction</strong> How pleasant is it to use the design?</li>\n</ul>\n<p>Another key attribute is <strong>utility</strong>, which refers to the design's functionality: <em>Does it do what users need?</em></p>\n<p>Usability and utility are equally important and together determine whether something is useful: It matters little that something is easy if it's not what you want. It's also no good if the system can hypothetically do what you want, but you can't make it happen because the user interface is too difficult. To study a design's utility, you can use the same user research methods that improve usability.</p>\n<p>So, utility is simply whether it provides the features you need. Usability is how easy &#x26; pleasant these features are to use. Combining the two leads to a product being <em>useful</em>.</p>\n<h2>Importance of Usability</h2>\n<p>The first law of e-commerce is that if users cannot find the product, they cannot buy it either. This means that if a user can not clearly understand your site and get all the information they need from the get go, they <strong>leave</strong>.</p>\n<blockquote>\n<p>On the Web, usability is a necessary condition. If a website is difficult to use, people exit. If the homepage fails to clearly state what a company offers and what users can do on the site, people leave. If users get lost on a website, they leave. If a website's information is hard to read or doesn't answer users' key questions, they leave. Note a pattern here? There's no such thing as a user reading a website manual or otherwise spending much time trying to figure out an interface. There are plenty of other websites available; leaving is the first line of defense when users encounter a difficulty.</p>\n</blockquote>\n<h2>Improving usability</h2>\n<p>The most basic and useful way to improve usability is <strong>user testing</strong>, which has 3 components:</p>\n<ul>\n<li><strong>Get hold of some representative users</strong>, such as customers for an e-commerce site.</li>\n<li>Ask the users to <strong>perform representative</strong> tasks with the design.</li>\n<li><strong>Observe what the users do</strong>, where they succeed, and where they have difficulties with the user interface. Shut up and let the users do the talking.</li>\n</ul>\n<p>It's important to test users individually and let them solve any problems on their own. If you help them or direct their attention to any particular part of the screen, you have contaminated the test results.\nTo identify a design's most important usability problems, testing 5 users is typically enough. Rather than run a big, expensive study, it's a better use of resources to run many small tests and revise the design between each one so you can fix the usability flaws as you identify them. Iterative design is the best way to increase the quality of user experience. The more versions and interface ideas you test with users, the better.</p>\n<p>User testing is different from focus groups, which are a poor way of evaluating design usability. Focus groups have a place in market research, but to evaluate interaction designs you must closely observe individual users as they perform tasks with the user interface. Listening to what people say is misleading: you have to watch what they actually do.</p>\n<h2>When to Work on Usability</h2>\n<p>Usability plays a role in each stage of the design process. The resulting need for multiple studies is the reason individual studies should be fast and cheap. Here are the main steps:</p>\n<ul>\n<li>Before starting the new design, <strong>test the old design</strong> to identify the good parts that you should keep or emphasize, and the bad parts that give users trouble.</li>\n<li><strong>Test your competitors' designs</strong> to get cheap data on a range of alternative interfaces that have similar features to your own.</li>\n<li><strong>Conduct a field study</strong> to see how users behave in their natural habitat.</li>\n<li>Make <strong>paper prototypes</strong> of one or more new design ideas and test them. The less time you invest in these design ideas the better, because you'll need to change them all based on the test results.</li>\n<li><strong>Refine the design ideas</strong> that test best through multiple iterations, gradually moving from low-fidelity prototyping to high-fidelity representations that run on the computer. Test each iteration.</li>\n<li><strong>Inspect the design relative to established usability guidelines</strong> whether from your own earlier studies or published research.\nOnce you decide on and implement the final design, test it again. Subtle usability problems always creep in during implementation.</li>\n<li><strong>Don't defer user testing until you have a fully implemented design</strong>. If you do, it will be impossible to fix the vast majority of the critical usability problems that the test uncovers. Many of these problems are likely to be structural, and fixing them would require major rearchitecting.</li>\n</ul>\n<p>The only way to a high-quality user experience is to start user testing early in the design process and to keep testing every step of the way.</p>\n<h2>Testing, 1, 2, 3</h2>\n<p>If you run at least one user study per week, it's worth building a dedicated usability laboratory. For most companies, however, it's fine to conduct tests in a conference room or an office — as long as you can close the door to keep out distractions. What matters is that you get hold of real users and sit with them while they use the design. A notepad is the only equipment you need.</p>\n<h2>Conclusion</h2>\n<p>Usability is just as important as the design and it goes a long way in creating software that not only solves a particular problem but also allows the user to enjoy using it the software at the same time.</p>"}},{"node":{"frontmatter":{"title":"The Front End Development Journey.","subtitle":"The long and winding front-end development journey.","excerpt":"The front end development journey is a long one and it involves a lot of work. Requires effort, perserverence and sweat. Also, coffee, lack of sleep and frustrating arguments with your computer. Either way, it is still an exciting journey","path":"/design/front-end-journey","date":"June 17, 2016","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":null,"thumbnail":null,"teaser":null,"credit":null,"creditlink":null},"tags":["front-end","User Experience","UX","UI","User interface","design"]},"excerpt":"The front end development journey is a long one and it involves a lot of work. Requires effort, perserverence and sweat. Also, coffee, lack…","timeToRead":3,"html":"<p>The front end development journey is a long one and it involves a lot of work. Requires effort, perserverence and sweat. Also, coffee, lack of sleep and frustrating arguments with your computer. Either way, it is still an exciting journey that teaches you a lot of things, whether you are an expert or starting out. To truly become an expert or proficient in your skill, you need to practice it every single day. The 10,000 hour rule applies everywhere and thus is no exception to this.</p>\n<h2>User Experience, User Interface, what's the difference?</h2>\n<p>User Experience (UX) and User Interface (UI) are two terms used interchangeably, which is very wrong to do so. They are very much related, but do not mean the same thing, If you are going to be doing front end work, it is imperative to note the difference and be able to distinguish the two every time you create an app, a website or even a simple one pager site. These two terms could not be more different like the Sun and the moon, but they are both celestial bodies.</p>\n<h2>User Experience</h2>\n<p>User experience, as the name suggests, is basically the experience the user gets when using a partifuclar websites or application. The experience has to be fluid simple and fulfilling for the user. Therefore if your site or application is about blog posts and news feeds, it should be able to display these posts in a simple way such that the user has a fluid and dynamic experience with the software.</p>\n<h2>User Interface</h2>\n<p>User interface describes how the user and your software interact. This could be how the user interacts with your web page or your mobile application. The interface is like the outer covering of your application or web page. It is supposed to be able to allow the user to dynamically interact with your website and at the same time look appealing to attract even more users, because, let us face it, human beings are quite vain and we like things that look good. So, a good user interface allows the user to enjoy using your application as well as reaping the benefits it has to offer.</p>\n<p>UI and UX are not mutually exclusive, at the very least that is my take on it. In order to create software that offers user the best experience, you also need to be able to create an interface that the user can interact with well. They are not synonymous, but they should surely not be treated separately.</p>\n<h2>Algorithms</h2>\n<p>I am going to create a series of posts, most will be Algorithm problems based on how I see it. Of course none of these are the Gospel truth, as there are always hundreds of ways to solve an algorithm problem, we are just always looking for solution that gets the problem solved the fastest. Therefore the best algorithm, is the one that gets to the solution in the shortest time frame, but also does it accurately, of course the best solution does not necessarily have to be the one that does it in the shortest time frame as it could possibly not give accurate results. So, you need to look at <em>cost and benefit approach</em> and pick the one that gets the solution, minimising errors and giving you the intended result.</p>\n<h1>Bottom Line</h1>\n<p>My bottom line is to put in the effort and constantly keep learning. This is the one thing that keeps evolving and so should you. Keep changing your approach to things, while maintaning your goal in mind and you will become an excellent front end developer and more. I suppose the best approach is to always evaluate and ask yourself, 'If I was going to use this program, what would I like to see?'. And then make it as simple as you can to people who are unfamiliar with programming and its fundamentals. Break it down completely, the user does not need to know how it fully works, they just need to know that it works well, and that is why front end development is crucial as it presents the best possible image of the program and allows the users to enjoy the full functionality of the program without fully knowing what is under the hood.</p>"}}]}},"pageContext":{"tag":"User Experience"}}}