{"componentChunkName":"component---src-templates-page-page-jsx","path":"/page/1","result":{"pageContext":{"posts":[{"html":"<p>Software development the world of technology is constantly shifting &#x26; changing. No 2 years are ever the same. New technologies are developed, old ones are improved and ideologies are challenged every single day. With this kind of climate, it is often difficult for any engineer to navigate without at some point hitting a wall or 2. Oftentimes developers struggle to find a true north to stick to due to the constant change in the tides &#x26; new upcoming trends that often leave everyone wondering if what they have been learning for the past year is worth it anymore.</p>\n<p>Truth is, we have all been here &#x26; I would bet that any engineer who claims has not had any struggles understanding and surfing this wave of <em>technological change</em> has not truly been working in this industry as they claim they have. A little context is necessary.</p>\n<p><a href=\"https://golang.org/\">Golang</a> is now a very popular programming language &#x26; is used almost everywhere &#x26; is the go to programming language for cloud computing(which by the way now runs the world as it is), but it is just slightly 10 years old. No one saw this shift happening. It is not only popular for cloud, but it is being used everywhere now, even <a href=\"https://www.zdnet.com/article/what-is-the-internet-of-things-everything-you-need-to-know-about-the-iot-right-now/\">IoT</a> devices &#x26; in distributed systems because of how the language was built. 10 years ago, no one would have even thought that a language could change the very ideology of how people build software. This speaks to the fact that the tech world will always shift &#x26; there will be something 10 years from now that will be used to power the next generation of computing.</p>\n<p>With this in mind, a lot of new developers always struggle to find a balance between being relevant &#x26; learning something that will set them apart for years to come. This is due to the fact that there is a lot of <em>noise</em> in the industry with new buzzwords &#x26; terminologies that could confuse anyone &#x26; everyone. But if you look closely, they are not really new. Most of these new technologies are just old technologies that have been re-branded to fit in the current fast moving world. It is because back in the 80s &#x26; 70s, there was no supporting hardware or technology for what we have now to exist. But, the ideas were there, we just could not execute them.</p>\n<p>Now, why would I sort of digress like this? This is to just highlight that it is fundamental to learn the basics of software development &#x26; by that I mean good practices of building modern day technologies with an allowance for it to improve &#x26; be built upon. This is agnostic to any programming language, framework, tool or cloud technology. This is the very building block of software development. In this day &#x26; age we get caught up in the latest front-end framework someone knows to the most recent cutting edge back-end development a company is using to the hosting solution we are adopting to run all these applications to the point that we forget to just build good software. At the end of the day, all these are tools, but let me emphasise, <em>it is important to pick the right tools for the job</em>. No carpenter will pick a screw driver to hammer in a nail, when it is obvious that a hammer will be perfect for the job. That is why there are many options in software development &#x26; herein lies the beauty of it &#x26; the confusion at the same time.</p>\n<p>Now as a recently fresh graduate of any coding boot-camp or any school that teaches software development it is quite common to have a lot of questions about the industry. Especially how to navigate it. You will come out with certain skill sets, but the reality of it is they will never be enough for the industry as it is right now. It is at this point that you realise you need to go far &#x26; beyond &#x26; build on top of what you know &#x26; this needs, no, <em>has</em> to be a constant endeavour.</p>\n<p>Growing your career as a software developer is a constant effort &#x26; will require discipline &#x26; this goes for any career out there. You have to put in the work to constantly improve on your skills (both non-technical &#x26; technical). There is simply no shortcut, you just have to work at it. Some of the things you can do are:</p>\n<ul>\n<li>\n<p><em>Attend conferences and webinars</em>(at this time due to the Covid-19 pandemic, this is very possible to attend conferences that you possibly never could due to either distance or financial constraints)</p>\n<p>This gives you a wider view of how the current industry is shaped &#x26; allows you to adapt to it &#x26; learn new things &#x26; see what gaps you have in your knowledge base</p>\n</li>\n<li><em>Network with your peers</em>. It is important to network with people &#x26; learn from them. You will not be able to learn everything there is to learn in the world. This is where networking comes in. Speaking to other developers gives you insights into what else you can do with your knowledge base. Stuck with a bug? How about you reach out to a friend before reaching for Google? You never know. They could have literally solved the same issue a few minutes prior.</li>\n<li><em>Read, read &#x26; read</em>. This is key for me. I suppose because a lot of times some developers do not take the time to actually dive into documentation provided in tools or programming languages that they are using &#x26; just immediately dive into Stack Overflow &#x26; even though SO is a great tool. Chances are you just did not read the fine print in the documentation. Also adding on top of that, take the time to read some software engineering books &#x26; articles. This will give you even more insights into the software world.</li>\n<li>Find a mentor who will act as a guide for you. This will help as they will warn you of any missteps &#x26; encourage you on decisions that you may be hesitant to make. I think it is important to highlight that it is not the mentor's responsibility to be checking up on you all the time. It is up to you to communicate what progress you have been making in your growth &#x26; assistance you may need. This is an initiative that you have to make.</li>\n<li><em>Join a software community &#x26; be part of discussions</em> &#x26; ask silly questions if you have to &#x26; no, I am not talking about Stack Overflow(in as much as it is a community). I am talking about a software development community in your region or even globally. There are a lot of ways to do so(Slack, Telegram, Github, Discord, Reddit, etc). These communities are vibrant &#x26; always have interesting discussions on topics that you can learn from.</li>\n<li><em>Collaborate on a software project or product</em>. Key word being <em>collaborate</em>. This is because no great software is built by one person a lone. This is the new way of working. This is how big players in the industry are building new technologies &#x26; tools. They are being built by people &#x26; there is no exclusion on who can work on what. This is especially key in open source technologies. They are built by communities &#x26; for the communities. You being able to work on a software project along with other developers, helps a lot in your growth as a software developer &#x26; shows that you can work in a team.</li>\n</ul>\n<p>As you can tell, the things that I have mentioned above have not catered or talked about technical skill at all, but this is not to say that technical skills aren't important. They very much are! But, these go hand in hand with them. The reason for highlighting these, is that a lot times, developers ignore these things or never look out for them, because they do not regard them as important, thinking that they do not matter.</p>\n<p>On a technical level, it is important to first know your programming language like the back of your hand. Be able to read it like you would read any English(or your mother tongue) text. Be able to interpret it to a point you can explain to anyone else in a very concise &#x26; simple way. Yes, this takes time &#x26; practice, a lot of it. But it is important that you do this. The reason for this, is that at the end of the day, you will be writing code &#x26; if you can't understand your own code, how else do you expect the machine to understand what you want it to do?</p>\n<p>There are many other technical skills you need to have &#x26; these speak a lot to the key competencies that a lot of employers &#x26; companies look for in software developers. I am about to sound like every Job Description(JD) out there, but really, they are key &#x26; organisations do not take the time to write them down for nothing. These speak to the values they seek in candidates:</p>\n<ul>\n<li><em>Know your stack &#x26; know it well</em>. If you say you are a back-end developer or choose the path of a front-end developer or mobile developer, it is important that you know your technologies &#x26; tools well. These tools should not sound very new to you when they are mentioned. Especially during an interview. It would really hurt your chances, when a certain technology or tool is mentioned &#x26; you are oblivious about it yet it should be part of your toolbox. There are certain tools that you expect to find in a tool-shed of any carpenter. Now imagine going to a carpenter, asking him to make a bed for you or any article of furniture &#x26; you realise he does not have certain tools(say, a hammer, screw driver, saw, you name it) &#x26; when you ask him/her about it, they are completely confused by what you are saying. Would you still hire them for the job?</li>\n<li><em>Be an advocate for testing</em> &#x26; I am not talking about manual testing where you run on <em>localhost</em> &#x26; then say you are good to go. I am talking about automated testing, being able to test your code fully. This means understanding that bugs don't crop up out of nowhere, they crop up from not catching edge cases that could have been caught by a simple unit test.</li>\n<li><em>Know about certain paradigms or processes that are common in software development, especially in this day &#x26; age</em>. An example is Continuous Integration &#x26; Continuous Deployment abbreviated as CI/CD. This is very common in this new age of software development &#x26; there are a lot of tools that aid in this paradigm &#x26; as a software developer it is important to know them &#x26; be able to use them. Almost every organisation has adapted to using CI/CD patterns following the advent of Agile practices, as it is a faster way to deliver software to people that benefit people &#x26; the business at large. As an engineer you need to know how to use these tools &#x26; fit them into your workflow. This means being able to know what is needed to build, package &#x26; distribute your application to the masses. Think of your piece of software like processed food. You have to find a way for it to continuously be shipped out to the market for people to consume or they die(not literal in this case, but I hope you get the gist of it).</li>\n</ul>\n<p>Of course this is not an exhaustive list &#x26; with how the software world keeps evolving there are a lot more things that you need to be aware of &#x26; learn.</p>\n<p>I could go on with more letters &#x26; words describing all you need to grow in this career, but the truth is, there is just a lot of things happening in this industry to fit them all in 1 article. I am sure by the time you are done reading this, there will be a new JS library ready for use (:D), that is just how quickly the industry is moving &#x26; shifting these days &#x26; as an individual it is important to know where you are, what you have, then to know what you need to go &#x26; what you need to get there &#x26; then just work on it constantly with zeal &#x26; passion.</p>\n<p>So, what does it take to build &#x26; have a successful career in software development? I would say first humility, then discipline.</p>","id":"9aae86cd-18f8-5399-99c6-47964bf2a7e0","timeToRead":8,"frontmatter":{"title":"Tools to a Successful Career in Software Development","subtitle":"Growing a career in software development","excerpt":"Growing a successful career in software development is not easy & involves a lot hurdles with ups and downs & a little surfing if you are up for it. The point is, it is not a walk in the park & always requires constant reinventint of oneself. Here is my take on it.","path":"/life/career-development-in-software","category":"life","date":"May 21, 2020","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"tools-to-career-development-in-software.jpg","thumbnail":null,"teaser":"tools-to-career-development-in-software.jpg","credit":"Unsplash","creditlink":"https://unsplash.com/photos/IClZBVw5W5A"},"tags":["Education","Software","Technology","Life"],"published":true}},{"html":"<p>Chaos is often depicted as negative and literally means \"complete disorder and confusion\". What if we can use this complete lack of organization in our production environment to bring stability and confidence in our systems and completely change the meaning of chaos? Let us explore the possible ways in which we can get harmony from chaos engineering.</p>\n<p>So, if chaos is a lack of organization, complete disfunction and confusion &#x26; engineering is about precision &#x26; using scientific principles to design and build machines, structures, tools and other items. How do these 2 principles exactly come together to bring harmony through chaos engineering?</p>\n<p>First of all, let's start with a bit of a history lesson. Chaos engineering was initially thought of by Greg Orzell in 2011 while Netflix was moving to the cloud. His intent was to move from a development model that assumed zero downtimes and breakdowns to  a model where such breakdowns were inevitable. This stemmed from the fact that during development we often assume the best case scenerios where no breakdowns happen or we control how they happen and can immediately fix these issues. However, that is not the case in the real world as we all know breakdowns could happen at any time. His intention was to drive engineers to consider resilience as an obligation rather than an option.</p>\n<p>In order to achieve this, Neflix came up with a tool known as  <em>Chaos Monkey</em> whose purpose was to randomly choose servers in a production environment and turn them off during business hours. Of course this is a very unpopular opinion and not many would attempt to do this in their production environment that actively serves customers.</p>\n<blockquote>\n<p>\"Imagine a monkey entering a \"data center\", these \"farms\" of servers that host all the critical functions of our online activities. The monkey randomly rips cables, destroys devices and returns everything that passes by the hand [i.e. flings excrement]. The challenge for IT managers is to design the information system they are responsible for so that it can work despite these monkeys, which no one ever knows when they arrive and what they will destroy.\"</p>\n</blockquote>\n<p>In practice this is how chaos engineering can be achieved:</p>\n<p><img src=\"/images/posts/chaos-engineering-flow.png\" alt=\"chaos-engineering-flow\"></p>\n<p>The harder it is to disrupt the steady state, the more confident we are the system can withstand random breakdowns. If a weakness is uncovered, we now have a target for improvement before that behavior manifests in the system at large.</p>\n<h2>Build  a hypothesis around steady state behaviour</h2>\n<p> Focus on the measurable output of a system instead of the internal attributes. By focusing on systemic behavior patterns during experiments, Chaos verifies that the system does work, rather than trying to validate how it works.</p>\n<h2>Vary Real world events</h2>\n<p>Chaos variables reflect real-world events. Prioritize events either by potential impact or estimated frequency. Consider events that correspond to hardware failures like servers dying, software failures like malformed responses, and non-failure events like a spike in traffic or a scaling event. Any event capable of disrupting steady state is a potential variable in a Chaos experiment.</p>\n<h2>Run experiments in production</h2>\n<p>Systems behave differently depending on environment and traffic patterns. Since the behavior of utilization can change at any time, sampling real traffic is the only way to reliably capture the request path. To guarantee both authenticity of the way in which the system is exercised and relevance to the current deployed system, Chaos strongly prefers to experiment directly on production traffic.</p>\n<h2>Automate Experiments to run continuously</h2>\n<p>Running experiments manually is labor-intensive and ultimately unsustainable. Automate experiments and run them continuously. Chaos Engineering builds automation into the system to drive both orchestration and analysis.</p>\n<h2>Minimize the blast radius</h2>\n<p>Experimenting in production has the potential to cause unnecessary customer pain. While there must be an allowance for some short-term negative impact, it is the responsibility and obligation of the Chaos Engineer to ensure the fallout from experiments are minimized and contained.</p>\n<h3>Limitations</h3>\n<p>Despite the buzz and the hype around chaos engineering, there are some drawbacks to it:</p>\n<ol>\n<li>\n<p><strong>Means to an end</strong>.</p>\n<p>It's important to note that it is a <em>means to an end and not an end in itself</em> . What matters most is the production service that is provided at the end. Whatever findings that you discover from perform chaos engineering from your system, must be fed back to the system - in terms of fixing bugs, training people - otherwise it will count as a waste of time.</p>\n</li>\n<li>\n<p><strong>One step forward two steps back</strong></p>\n<p>Who’s to say that being able to uncover weaknesses will automatically lead to positive outcomes, like improved customer experience? As software developers know, identifying a bug and fixing it are two different challenges. Indeed, your optimization efforts in one area might increase brittleness in other areas.</p>\n</li>\n<li>\n<p><strong>One among many</strong></p>\n<p>  Chaos Engineering is not a remedy for all of your reliability concerns, and it never will be. It’s merely one of many approaches used to gain confidence in system correctness (typically in the face of perturbation). Consider it required but not sufficient. And by no means is it – or should it be – the only way to learn from failure.</p>\n</li>\n<li>\n<p><strong>Systems will continue to fail</strong></p>\n<p>  It may sound overly pessimistic, but while Chaos Engineering surely is a net plus, impermanence makes sure that all complex systems will fail no matter how hard we try to avoid it (which is exactly why postmortems are so important). The Holy Grail of Automation – introducing faults automatically instead of manually – won’t change that fact a bit. Don’t fool yourself and set realistic expectations.</p>\n</li>\n<li>\n<p><strong>No Rollback button</strong></p>\n<p>  The rollback button is a lie. That’s not only true for application deployments but also for fault injection, as both face the same fundamental problem: state. Yes, you might be able to revert the direct impact of non-destructive faults, which can be as simple as stopping to generate CPU/memory/disk load or deleting traffic rules created to simulate network conditions. But no, you can’t roll back what has been inflicted on everything else in the system – the targeted application and everything that interacts with it. A prime example is corrupt or incorrect data stored in a database/queue/cache due to a program crash.</p>\n</li>\n</ol>\n<h2>Conclusion</h2>\n<p>This is but a brief introduction about chaos engineering, to just showcase that this is a new paradigm and shift into how products are now built at scale and to ensure that the end user always has the best esperience despite the system experiencing heavy storms. I would recommend using chaos engineering as an everyday tool to ensure that whatever you build will always work at scale and work consistently. Of course this is not everyone's cup of tea and that is acceptable. At certain levels of scale, this just becomes a pain to setup and get to work properly. Remember, the ultimate goal is to bring the best experience to the customer and measuer the overal output of your product and not how it works internally.</p>\n<p>With that I shall leave you with a quote.</p>\n<blockquote>\n<p>But behind all the beauty lies madness and chaos.</p>\n</blockquote>","id":"54fb72cb-10cf-5707-81b0-377f619c67a2","timeToRead":5,"frontmatter":{"title":"Harmony in Chaos Engineering","subtitle":"Making chaos work for you at scale","excerpt":"Chaos is often depicted as negative and literally means \"complete disorder and confusion\". What if we can use this complete lack of organization in our production environment to bring stability and confidence in our systems and completely change the meaning of chaos? Let us explore the possible ways in which we can get harmony from chaos engineering.","path":"/tech/chaos-engineering","category":"tech","date":"October 13, 2019","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"chaos-engineering.jpeg","thumbnail":"chaos-engineering.jpeg","teaser":"chaos-engineering.jpeg","credit":null,"creditlink":null},"tags":["Engineering","Chaos","Testing"],"published":true}},{"html":"<p>When I first met you, I didn't know how to talk to you, hell, I did not have any pick-up lines(I always found them dumb, I honestly still do). To me, you were a stranger, but I wanted to know you, get the chance to explore your thoughts, hates, likes, dislikes. Get to know who you truly were. I have to be honest, I did not know how to talk to girls, I tried so many tactics and I had always failed. It was almost as if I was studying for an exam. You never know what is coming in the test, but you know you want to pass it. Anyway, I digress. I first saw you and thought, wow, I want to actually just get to know you, just talk for hours and not feel any pressure for some grand gesture to win you over. Like those Hollywood movies. I hate them, honestly. They come with so many expectations on love, always as if love can be summed up in 2 hours of screen play.</p>\n<p>I always ran out of things to say, probably because I wanted to impress you and just said things over and over differently. You laughed and smiled slightly. You probably knew what was going on in my head, but, the calm face you kept was something else. It made me feel confident, not enough to go fight of bears for you, but enough to do silly things without a care in the world.</p>\n<p>Do I sometimes wonder whether life would have paired us differently? All the time. Every day, I ask myself(the universe, maybe), what is it that happened to make us meet? Star alignment? Cosmic disruption? Celestial bodies colliding? I did not know. What I did know, was that I was willing to give this a shot. Maybe I would fail horribly. You probably told your girlfriends about me and they just nodded their heads in response and asked you \"why him again?\". At least, that is how I hope it went.</p>\n<p>You remember the time we went for a picnic? I recall it like it was yesterday. I was nervous, sweaty and panicking on the inside. I did not know how to even act. But, somehow, all this was on the inside, including the sweating, thank God. That would have been embarassing. We laughed, smiled, made fun of each other and got lost in each other. I loved that day. It was away from all the noise of the city. All the struggles and doubt. I was happy. Probably, happier than I usually am.</p>\n<p>I was not only happy because I got a chance to spend the day with this wonderful human being that decided to block out her day just for me, but also happy that despite my numerous flaws, you picked me out of a bunch of guys, and I know there were a bunch of guys, I mean who would not have wanted to get a chance to be with you? I was not the smartest in a room, there are times I asked(still ask) the dumbest questions. I tend to be a bit slow to react to some things happening around me. Maybe, because I overthink the situation and start drawing parallel posibilities. You would not want to be in my head actually. And that is not something that I would ever boast about. I even almost lost you because I was in too deep in my head instead of being in the present. Honestly, that is my biggest flaw and for a long time, I have been working on that. Thank you for being so patient with me. You always have been. But, there was a time you were not always as patient and I get that. You were so mad at me. And for some reason that made me realize that I wanted to fight for you even more. It was at that moment that I realized I want to only be with you and only you.</p>\n<p>I guess what I am saying here is that no matter what happens, I hope you know how deeply I care. How much love I have for you. I would fight for you even when I stood no chance of winning, the thought of losing you would be more devastating than actually losing the fight. As I said, I am no poet, so probably around here, would be a simile or metaphor to something that would communicate better what I feel on the inside. Regardless, I will be here for you, on your side till time ends.</p>","id":"56869d7b-2031-5bdc-b0ac-8778c73b7b7f","timeToRead":3,"frontmatter":{"title":"An open letter to my wife","subtitle":"Dear beloved,","excerpt":"Ah, my beloved, that is how I would start my letter if I were in the 60s, but modern society has us all thinking differently. I probably would not have written a letter(I am no poet). This would have come in the form of a text message probably. But, let us be a little old school.","path":"/life/open_letter_to_my_wife","category":"life","date":"May 06, 2019","author":{"name":"Brian Lusina","link":null,"avatar":"brian_lusina.jpg"},"image":{"feature":null,"thumbnail":null,"teaser":null,"credit":null,"creditlink":null},"tags":["Live","Love","Life"],"published":true}},{"html":"<p>What is immutabilty? I see this word being thrown around a lot, especially in the software industry, where other phrases such as <strong>clean code</strong> and <strong>code quality</strong> are constantly being emphasized. What is it? Why is it necessary to understand what it is and how to use it?</p>\n<p>In this post, I shall write briefly about what it is and how to use it. This will not use any JS framework, but will be pure JavaScript. This is because this is applicable in any JavaScript context(read framework). Frameworks and libraries come with their own rules of immutability. How do they creat these rules arround immutability?</p>\n<blockquote>\n<p>Immutability means <em>not capable or susceptible to change</em></p>\n</blockquote>\n<p>In other words, not capable of change. In object oriented programming and functional programming, this means that an immutable object is an <em>object whose state cannot be modified after it is created</em>. Objects in general have state and behaviour. When an object is immutable, the state and behaviour can not change.</p>\n<p>This has several benefits. First of all ensures this ensures that there are no intended side-effects and we know exactly what an object's state and behaviour is at any given time within the application's lifecycle. It makes us more confident when writing our code, as we know exactly what to expect from an immutable object.</p>\n<p>Of course, this also means that it's state can not be modified and can also be an issue in the case where we do need to alter it's current state. This is why we create a copy of the object and alter the state of the copy instead of the original object(A pattern that is used in <a href=\"http://redux.js.org\">Redux</a>).</p>\n<p>Before delving into that, let us see how to create object immutability in plain ol' JavaScript:</p>\n<pre><code class=\"language-javascript\">let johnDoe = {\n    firstName: \"John\",\n    lastName: \"Doe\",\n    email: \"johndoe@email.com\",\n    age: 50\n}\n\nconst frozenJohnDoe = Object.freeze(johnDoe);\n\nfrozenJohnDoe.age = 33;\n// Throws an error in strict mode\n\nfrozenJohnDoe.age;\n// expected output: 50\n</code></pre>\n<blockquote>\n<p>An example of immutabililty in JavaScript</p>\n</blockquote>\n<p>Above, we have a <code>johnDoe</code> object with some properties (<code>firstName</code>, <code>lastName</code>, <code>email</code> and <code>age</code>). These properties at time of create are mutable(can be changed). To make this object immutable, we use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\">Object.freeze</a>. A very handy function that <em>freezes</em> the object. Therefore, we can not alter any of its properties on the following lines.</p>\n<p>This means nothing can be added or removed from the frozen object. Our <code>johnDoe</code> object is now frozen and can never be able to alter his age, sorry John :(. This gives us a sense of what to always expect when we use the frozen object. We can always be guaranteed that his age will be 50 when we use it.</p>\n<p>It is important to note that when not running in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\">strict mode</a>, it will appear as if mutation of the object's properties can be done. Here is an example:</p>\n<pre><code class=\"language-javascript\">// still using our johnDoe object above\n> johnDoe.age = 5\n5\n> johnDoe\n{ firstName: 'John',\n  lastName: 'Doe',\n  email: 'johndoe@email.com',\n  age: 50 }\n</code></pre>\n<blockquote>\n<p>While running in a Node REPL</p>\n</blockquote>\n<p>While trying to set the age of the object to 5, no error is thrown and thus it will appear as if a successful mutation actually occured, but in reality, the properties remain the same, age has not been altered.</p>\n<p>Data properties of frozen objects can not be changed, configurable attributes are set to false. This is what sets the immutability of the object. There is a problem though. What if my object's properties' values were other objects? Are those immutable to? An example:</p>\n<pre><code class=\"language-javascript\">> let shoppingCart = {\n    fruits: {\n        banana: \"banana\",\n        apple: \"apple\",\n        oranges: \"oranges\"\n    },\n    bread: {\n        brown: \"brown bread\",\n        white: \"white bread\"\n    }\n    price: 50\n}\n// freeze our object, we do not need to save a copy of it. As the function returns our initial object and NOT a fronzen copy\n> Object.freeze(shoppingCart)\n\n// fruits remains as is\n> shoppingCart.fruits\n{\n    banana: \"banana\",\n    apple: \"apple\",\n    oranges: \"oranges\"\n}\n// attempt to mutate the fruits object's properties\n> shoppingCart.fruits.banana = \"very ripe banana\"\n'very ripe banana'\n\n> shoppingCart.fruits\n{\n    banana: \"very ripe banana\",\n    apple: \"apple\",\n    oranges: \"oranges\"\n}\n</code></pre>\n<blockquote>\n<p>Again, running in a Node REPL</p>\n</blockquote>\n<p>As, you can see from above, the <code>fruits</code> object's values can be mutated, yet it is in a frozen object <code>shoppingCart</code>. This is known as <strong>shallow freeze</strong>. This means that the immediate properties of <code>shoppingCart</code> have been made immutable, however, if the values of said properties are objects, they are not frozen.</p>\n<p>For the fruits object to also have the same level of immutability, they have to also be frozen:</p>\n<pre><code class=\"language-javascript\">> let fruits = {\n    banana: \"banana\",\n    apple: \"apple\",\n    oranges: \"oranges\"\n};\n> Object.freeze(fruits);\n\n> let bread = {\n    brown: \"brown bread\",\n    white: \"white bread\"\n}\n> Object.freeze(bread);\n\n> let shoppingCart = {\n    fruits,\n    bread,\n    price: 50\n};\n\n// freeze our object, we do not need to save a copy of it\n> Object.freeze(shoppingCart)\n\n// fruits remains as is\n> shoppingCart.fruits\n{\n    banana: \"banana\",\n    apple: \"apple\",\n    oranges: \"oranges\"\n}\n// attempt to mutate the fruits object's properties\n> shoppingCart.fruits.banana = \"very ripe banana\"\n'very ripe banana'\n\n> shoppingCart.fruits\n{\n    banana: \"banana\",\n    apple: \"apple\",\n    oranges: \"oranges\"\n}\n</code></pre>\n<blockquote>\n<p>Now we have immutability for our fruits :)</p>\n</blockquote>\n<p>Of course, this can be a pain when dealing with objects that have properties that have other objects and those objects have properties that have other objects and so forth. Creating a recursive function that freezes all properties of the object that are objects themselves will save us the time and ensure that we attain <strong>deep freeze</strong> on our object.</p>\n<p>We have to ensure that the recurstion does not end up in a cycle though.</p>\n<pre><code class=\"language-javascript\">const deepFreeze = object => {\n    // get the property names\n    let propNames = Object.getOwnPropertyNames(object);\n\n    // freeze properties before freezing self\n    for(let name of propNames){\n        let value = object[name]\n\n        object[name] = value &#x26;&#x26; typeof value === \"object\" ?\n            deepFreeze(value) : value\n    }\n\n    // freeze self\n    return Object.freeze(object);\n}\n</code></pre>\n<blockquote>\n<p>This function will recursively freeze all properties of an object that are objects.</p>\n</blockquote>\n<p>We can now use this function as below:</p>\n<pre><code class=\"language-javascript\">var collection = {\n    internal: {\n        a: null\n    }\n};\n\ndeepFreeze(collection);\n\n// fails silently in non-strict mode\ncollection.internal.a = 'anotherValue';\ncollection.internal.a; // null\n</code></pre>\n<p>You can check whether out objects are frozen with <code>Object.isFrozen</code>, this takes in an object and checks whether the configurable properties have been set to false and returns a boolean value (true, if the object is frozen, false otherwise).</p>\n<p><strong>Object.freeze</strong> also works on arrays:</p>\n<pre><code class=\"language-javascript\">let a = [0];\nObject.freeze(a); // The array cannot be modified now.\n\na[0]=1; // fails silently\na.push(2); // fails silently\n\n// In strict mode such attempts will throw TypeErrors\nfunction fail() {\n  \"use strict\"\n  a[0] = 1;\n  a.push(2);\n}\n\nfail();\n</code></pre>\n<h2>The End</h2>\n<p>Next time you are writing a Javascript module and you are exposing objects that other developers may use, make sure that they have the exact needed permissions to alter your objects, otherwise they may broke your code without even realising it. Make sure also to document it.</p>","id":"c79dec82-4b96-559d-b42d-544659815fe0","timeToRead":5,"frontmatter":{"title":"Object Immutability In JavaScript","subtitle":"Creating object immutability in JavaScript","excerpt":"Creating object immutability in JavaScript has its advantages when it comes to programming, it ensures that objects retain their properties and has no unexpected side-effects. How to we create this immutability in JavaScript?","path":"/tech/object-immutability-js","category":"tech","date":"September 18, 2018","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"object-freeze.png","thumbnail":"object-freeze.png","teaser":"object-freeze.png","credit":null,"creditlink":null},"tags":["JavaScript","Objects"],"published":true}},{"html":"<p>Learning to code is never an easy endevour, especially in the world of technology, where there always seems to be something new that you must learn or know in order to keep up with the trends of the 21st century. It is such a fluid and ever changing world that you can find yourself lost in the pursuit of knowledge.</p>\n<p>Despite this, it is still a pursuit that keeps one growing and learning. These are the most important things when starting out on a journey to learn technology and dive into its depths. Sometimes the journey is full of twists and turns, long nights and early mornings, short weekends and long weekdays, even rough days and good ones, but overall, what makes me most happy is the ability to be able to create something that betters other people's lives. Makes them easier, makes them focus on what is most important in life instead of focusing on the menial tasks that we have the ability to automate.</p>\n<p>I remember when I wrote my first lines of code. I had just finished high school and had a lot of free time on my hands before joining campus (8 months). With this amount of time at one's disposal, it is easy to get lost in all that is happening around without proper planning. I enrolled for the usual classes everyone enrolled for after finishing high shool; Computer classes(Computer package classes, Driving classes, Accounting classes, etc.). I wanted to keep busy, so this gave me the chance to stay out of the house and not lose my mind. Of course all these classes only lasted 4 months, so the extra 4 months was spent attending bootcamps that span 3 weeks or less. It is during that time, that I discovered that one could actually create programs with code.</p>\n<p>The irony of it all was that my curiosity for technology was not inspired at all by attending computer classes, it was in fact inspired by a program that taught people how to type (mostly used by secretaries to train and improve their typing speed). I was curious as to how this simple program knew the keys I typed in and how it measured the speed at which I typed words. It was magic to me. I wanted to understand how it was built, I was <em>waay</em> beyond the why of it all (Improve people's typing speed), I wanted to know <strong>how</strong>.</p>\n<p>So, I dove into Google and typed in <em>how to build a computer program</em>, and waited for the search results to guide me to an answer. Of course, then, there were now sites like <a href=\"https://www.udemy.com/\">Udemy</a>, <a href=\"https://www.udacity.com\">Udacity</a>, <a href=\"http://www.codecademy.com\">Codecademy</a>, etc, so the search was even more difficult. I stumbed upon <a href=\"https://en.wikipedia.org/wiki/Visual_Basic\">Visual Basic</a> and I began downloading all the required tutorials I needed to understand <strong>how</strong> one builds a program, how to start, what you need, all the required tools that should be at your disposal and I just started.</p>\n<p>Fast forward 3 weeks later, after a lot of trial and error and the first program I built was a simple Trivia which was basically a bunch of <em>if else</em> statements that checked for your answer. I didn't care that it was horrible, looked bad or was slow, I just wanted to build something, to see it used and to understand what it took to build a program that did something and made someone's life better (in this case help you become better at trivia questions). It worked! My first ever program! Too bad there was no way of sharing it with the world (because I had no idea how to). So I explored further into how do people share what they create and how do other people then download and install these programs and that lead me to networking and how the internet works(for some reason also lead me to how viruses work, go figure).</p>\n<p>All this digging around for information made me realize how technology had the potential to change my life as well. I was learning, growing, hungry...for knowledge. I simply wanted to understand, I wanted to know the <strong>why</strong> of it all.</p>\n<p>Technology has had a major positive impact ever since. Being part of teams that build highly scalable applications has not only brought out the best in me, but has also shown me what I still need to learn and what I still need to do to get better.</p>\n<p>A couple of things that I have learned along the way:</p>\n<ol>\n<li><strong>Have zero tolerance for the victim mentality</strong>. I have learned to become deliberate about regularly upskiling myself through reading books, learning new skills, meeting and interacting with new people in different fields and industry. Of course, you will not learn everything all at once. There are times where you will fail and will fail hard, it is okay. It is part of the journey. Instead of complaining that it is difficult and hard to understant algorithms and data structures, design patterns and frameworks, take the time to deliberately want to learn and understand that patience is key in this journey.</li>\n<li><strong>Be very deliberate about where you are and understand the opportunity cost of where you are</strong>. Understand your true value including your weaknesses. Focus on up-scaling yourself. Realize that by choosing this, you have foregone other opportunities, that this is the journey you want to be on, this means that you need to make an effort to understand all that comes with it; beyond the code. This means understanding your user(who you are building for) and why you are building it.</li>\n<li><strong>Where you work has a major impact on your work-life harmony</strong>. If you work for a company that re-inforces you and you konow your work will create value, you will remain satisfied and extremely motivated that you hardly feel burn out. This is important especially in a tech field, where there is an ever changing need for how products serve customers, you need to be in a place that gives you the opportunity to balance your work and life in a way that does not sacrfice one for the other. This will leave you wanting and yearning more and will make you happier.</li>\n<li><strong>Realize that technologies are tools used to build products and they are not to be mistaken with the actual product</strong>. A lot of times, developers tend to argue and debate over what is the most popular tool/language to use out there and will tend to make this the most important thing when building an actual product. I understand that developers have their preferences and for good reasons (I included). However, what I have learnt is that treating these preferences as tools instead of an actual product helps you move much more quickly in the industry. Realize that tools are used based on the use-case. You would not use a hammer to cut down a tree, right? Or use a chainsaw sandpaper. Even though you like your hammers, you know you can't use them all the time. So, pick the best tool for the job. The sooner you realize this the faster you can learn and build better products. This will help you to become more diverse and help in exploring posibilities of even building your own tools.</li>\n</ol>","id":"effd9339-9e25-527f-9de7-e29bfd76b0db","timeToRead":5,"frontmatter":{"title":"Influence learning tech has had on my life and career","subtitle":"Learning technology and its impact on my life and career","excerpt":"Technology has been a part of my life for a very long time, not only making it better and easier, but also giving me an opportunity to learn new things. Being able to create, build and innovate using technology makes it have an even bigger impact on my life and career.","path":"/life/influence-tech-on-career","category":"life","date":"August 21, 2018","author":{"name":"Brian Lusina","link":"/brian_lusina","avatar":"brian_lusina.jpg"},"image":{"feature":"influence_learning_tech.jpg","thumbnail":null,"teaser":"influence_learning_tech.jpg","credit":"Unsplash","creditlink":"https://unsplash.com/@alesnesetril"},"tags":["Career","Technology","Life"],"published":true}}],"page":1,"pagesSum":9,"prevPath":null,"nextPath":"/page/2"}}}